
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fd4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080020e0  080020e0  000120e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002120  08002120  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002120  08002120  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002120  08002120  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002120  08002120  00012120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002124  08002124  00012124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000054  2000000c  08002134  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08002134  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005529  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000163e  00000000  00000000  000255a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005a0  00000000  00000000  00026be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000420  00000000  00000000  00027180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000164c8  00000000  00000000  000275a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007281  00000000  00000000  0003da68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00081030  00000000  00000000  00044ce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001488  00000000  00000000  000c5d1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000c71a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080020c8 	.word	0x080020c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080020c8 	.word	0x080020c8

0800014c <Relay_SetState>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
// Функция для управления реле
	void Relay_SetState(GPIO_PinState state) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, state);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	461a      	mov	r2, r3
 800015a:	2108      	movs	r1, #8
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <Relay_SetState+0x20>)
 800015e:	f001 fa07 	bl	8001570 <HAL_GPIO_WritePin>
	}
 8000162:	bf00      	nop
 8000164:	3708      	adds	r7, #8
 8000166:	46bd      	mov	sp, r7
 8000168:	bd80      	pop	{r7, pc}
 800016a:	bf00      	nop
 800016c:	40010c00 	.word	0x40010c00

08000170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000174:	f000 fa02 	bl	800057c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000178:	f000 f830 	bl	80001dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800017c:	f000 f8bc 	bl	80002f8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000180:	f000 f87c 	bl	800027c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000184:	4813      	ldr	r0, [pc, #76]	; (80001d4 <main+0x64>)
 8000186:	f000 fea9 	bl	8000edc <HAL_ADCEx_Calibration_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start_IT(&hadc1);
 800018a:	4812      	ldr	r0, [pc, #72]	; (80001d4 <main+0x64>)
 800018c:	f000 fb54 	bl	8000838 <HAL_ADC_Start_IT>
	  //HAL_ADC_ADCStart(&hadc1);
	 // HAL_ADC_PollForConversion(&hadc1, 10);
	 // ValueFrmSoil=HAL_ADC_GetValue(&hadc1);
	  //HAL_ADC_Stop(&hadc1);
	 if(ValueFrmSoil >= 2000 && ValueFrmSoil <= 2730){
 8000190:	4b11      	ldr	r3, [pc, #68]	; (80001d8 <main+0x68>)
 8000192:	881b      	ldrh	r3, [r3, #0]
 8000194:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000198:	d309      	bcc.n	80001ae <main+0x3e>
 800019a:	4b0f      	ldr	r3, [pc, #60]	; (80001d8 <main+0x68>)
 800019c:	881b      	ldrh	r3, [r3, #0]
 800019e:	f640 22aa 	movw	r2, #2730	; 0xaaa
 80001a2:	4293      	cmp	r3, r2
 80001a4:	d803      	bhi.n	80001ae <main+0x3e>
		  Relay_SetState(GPIO_PIN_RESET);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <Relay_SetState>
 80001ac:	e00d      	b.n	80001ca <main+0x5a>
	  }else if(ValueFrmSoil >= 500 && ValueFrmSoil <= 1148)Relay_SetState(GPIO_PIN_SET);
 80001ae:	4b0a      	ldr	r3, [pc, #40]	; (80001d8 <main+0x68>)
 80001b0:	881b      	ldrh	r3, [r3, #0]
 80001b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80001b6:	d308      	bcc.n	80001ca <main+0x5a>
 80001b8:	4b07      	ldr	r3, [pc, #28]	; (80001d8 <main+0x68>)
 80001ba:	881b      	ldrh	r3, [r3, #0]
 80001bc:	f240 427c 	movw	r2, #1148	; 0x47c
 80001c0:	4293      	cmp	r3, r2
 80001c2:	d802      	bhi.n	80001ca <main+0x5a>
 80001c4:	2001      	movs	r0, #1
 80001c6:	f7ff ffc1 	bl	800014c <Relay_SetState>
	  HAL_Delay(1000);
 80001ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001ce:	f000 fa37 	bl	8000640 <HAL_Delay>
	  HAL_ADC_Start_IT(&hadc1);
 80001d2:	e7da      	b.n	800018a <main+0x1a>
 80001d4:	20000028 	.word	0x20000028
 80001d8:	20000058 	.word	0x20000058

080001dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b094      	sub	sp, #80	; 0x50
 80001e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001e6:	2228      	movs	r2, #40	; 0x28
 80001e8:	2100      	movs	r1, #0
 80001ea:	4618      	mov	r0, r3
 80001ec:	f001 ff40 	bl	8002070 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f0:	f107 0314 	add.w	r3, r7, #20
 80001f4:	2200      	movs	r2, #0
 80001f6:	601a      	str	r2, [r3, #0]
 80001f8:	605a      	str	r2, [r3, #4]
 80001fa:	609a      	str	r2, [r3, #8]
 80001fc:	60da      	str	r2, [r3, #12]
 80001fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]
 8000206:	605a      	str	r2, [r3, #4]
 8000208:	609a      	str	r2, [r3, #8]
 800020a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800020c:	2302      	movs	r3, #2
 800020e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000210:	2301      	movs	r3, #1
 8000212:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000214:	2310      	movs	r3, #16
 8000216:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000218:	2300      	movs	r3, #0
 800021a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000220:	4618      	mov	r0, r3
 8000222:	f001 f9bd 	bl	80015a0 <HAL_RCC_OscConfig>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d001      	beq.n	8000230 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800022c:	f000 f8cc 	bl	80003c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000230:	230f      	movs	r3, #15
 8000232:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000234:	2300      	movs	r3, #0
 8000236:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000238:	2300      	movs	r3, #0
 800023a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800023c:	2300      	movs	r3, #0
 800023e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000240:	2300      	movs	r3, #0
 8000242:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000244:	f107 0314 	add.w	r3, r7, #20
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f001 fc2a 	bl	8001aa4 <HAL_RCC_ClockConfig>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000256:	f000 f8b7 	bl	80003c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800025a:	2302      	movs	r3, #2
 800025c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800025e:	2300      	movs	r3, #0
 8000260:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	4618      	mov	r0, r3
 8000266:	f001 fd97 	bl	8001d98 <HAL_RCCEx_PeriphCLKConfig>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000270:	f000 f8aa 	bl	80003c8 <Error_Handler>
  }
}
 8000274:	bf00      	nop
 8000276:	3750      	adds	r7, #80	; 0x50
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}

0800027c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	605a      	str	r2, [r3, #4]
 800028a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800028c:	4b18      	ldr	r3, [pc, #96]	; (80002f0 <MX_ADC1_Init+0x74>)
 800028e:	4a19      	ldr	r2, [pc, #100]	; (80002f4 <MX_ADC1_Init+0x78>)
 8000290:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000292:	4b17      	ldr	r3, [pc, #92]	; (80002f0 <MX_ADC1_Init+0x74>)
 8000294:	2200      	movs	r2, #0
 8000296:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000298:	4b15      	ldr	r3, [pc, #84]	; (80002f0 <MX_ADC1_Init+0x74>)
 800029a:	2200      	movs	r2, #0
 800029c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800029e:	4b14      	ldr	r3, [pc, #80]	; (80002f0 <MX_ADC1_Init+0x74>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002a4:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <MX_ADC1_Init+0x74>)
 80002a6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002ac:	4b10      	ldr	r3, [pc, #64]	; (80002f0 <MX_ADC1_Init+0x74>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002b2:	4b0f      	ldr	r3, [pc, #60]	; (80002f0 <MX_ADC1_Init+0x74>)
 80002b4:	2201      	movs	r2, #1
 80002b6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002b8:	480d      	ldr	r0, [pc, #52]	; (80002f0 <MX_ADC1_Init+0x74>)
 80002ba:	f000 f9e5 	bl	8000688 <HAL_ADC_Init>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002c4:	f000 f880 	bl	80003c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002c8:	2301      	movs	r3, #1
 80002ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002cc:	2301      	movs	r3, #1
 80002ce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002d0:	2300      	movs	r3, #0
 80002d2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	4619      	mov	r1, r3
 80002d8:	4805      	ldr	r0, [pc, #20]	; (80002f0 <MX_ADC1_Init+0x74>)
 80002da:	f000 fc6b 	bl	8000bb4 <HAL_ADC_ConfigChannel>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002e4:	f000 f870 	bl	80003c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002e8:	bf00      	nop
 80002ea:	3710      	adds	r7, #16
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000028 	.word	0x20000028
 80002f4:	40012400 	.word	0x40012400

080002f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b088      	sub	sp, #32
 80002fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002fe:	f107 0310 	add.w	r3, r7, #16
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800030c:	4b1d      	ldr	r3, [pc, #116]	; (8000384 <MX_GPIO_Init+0x8c>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	4a1c      	ldr	r2, [pc, #112]	; (8000384 <MX_GPIO_Init+0x8c>)
 8000312:	f043 0320 	orr.w	r3, r3, #32
 8000316:	6193      	str	r3, [r2, #24]
 8000318:	4b1a      	ldr	r3, [pc, #104]	; (8000384 <MX_GPIO_Init+0x8c>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	f003 0320 	and.w	r3, r3, #32
 8000320:	60fb      	str	r3, [r7, #12]
 8000322:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000324:	4b17      	ldr	r3, [pc, #92]	; (8000384 <MX_GPIO_Init+0x8c>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	4a16      	ldr	r2, [pc, #88]	; (8000384 <MX_GPIO_Init+0x8c>)
 800032a:	f043 0304 	orr.w	r3, r3, #4
 800032e:	6193      	str	r3, [r2, #24]
 8000330:	4b14      	ldr	r3, [pc, #80]	; (8000384 <MX_GPIO_Init+0x8c>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	f003 0304 	and.w	r3, r3, #4
 8000338:	60bb      	str	r3, [r7, #8]
 800033a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800033c:	4b11      	ldr	r3, [pc, #68]	; (8000384 <MX_GPIO_Init+0x8c>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	4a10      	ldr	r2, [pc, #64]	; (8000384 <MX_GPIO_Init+0x8c>)
 8000342:	f043 0308 	orr.w	r3, r3, #8
 8000346:	6193      	str	r3, [r2, #24]
 8000348:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <MX_GPIO_Init+0x8c>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	f003 0308 	and.w	r3, r3, #8
 8000350:	607b      	str	r3, [r7, #4]
 8000352:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000354:	2201      	movs	r2, #1
 8000356:	2108      	movs	r1, #8
 8000358:	480b      	ldr	r0, [pc, #44]	; (8000388 <MX_GPIO_Init+0x90>)
 800035a:	f001 f909 	bl	8001570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800035e:	2308      	movs	r3, #8
 8000360:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000362:	2311      	movs	r3, #17
 8000364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000366:	2301      	movs	r3, #1
 8000368:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800036a:	2302      	movs	r3, #2
 800036c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800036e:	f107 0310 	add.w	r3, r7, #16
 8000372:	4619      	mov	r1, r3
 8000374:	4804      	ldr	r0, [pc, #16]	; (8000388 <MX_GPIO_Init+0x90>)
 8000376:	f000 ff77 	bl	8001268 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800037a:	bf00      	nop
 800037c:	3720      	adds	r7, #32
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	40021000 	.word	0x40021000
 8000388:	40010c00 	.word	0x40010c00

0800038c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void  HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef*hadc){
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
	if(hadc->Instance==ADC1){
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a08      	ldr	r2, [pc, #32]	; (80003bc <HAL_ADC_ConvCpltCallback+0x30>)
 800039a:	4293      	cmp	r3, r2
 800039c:	d109      	bne.n	80003b2 <HAL_ADC_ConvCpltCallback+0x26>
		ValueFrmSoil=HAL_ADC_GetValue(&hadc1);
 800039e:	4808      	ldr	r0, [pc, #32]	; (80003c0 <HAL_ADC_ConvCpltCallback+0x34>)
 80003a0:	f000 fb34 	bl	8000a0c <HAL_ADC_GetValue>
 80003a4:	4603      	mov	r3, r0
 80003a6:	b29a      	uxth	r2, r3
 80003a8:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <HAL_ADC_ConvCpltCallback+0x38>)
 80003aa:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop_IT(&hadc1);
 80003ac:	4804      	ldr	r0, [pc, #16]	; (80003c0 <HAL_ADC_ConvCpltCallback+0x34>)
 80003ae:	f000 faf9 	bl	80009a4 <HAL_ADC_Stop_IT>
	}

}
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	40012400 	.word	0x40012400
 80003c0:	20000028 	.word	0x20000028
 80003c4:	20000058 	.word	0x20000058

080003c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003cc:	b672      	cpsid	i
}
 80003ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003d0:	e7fe      	b.n	80003d0 <Error_Handler+0x8>
	...

080003d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003da:	4b15      	ldr	r3, [pc, #84]	; (8000430 <HAL_MspInit+0x5c>)
 80003dc:	699b      	ldr	r3, [r3, #24]
 80003de:	4a14      	ldr	r2, [pc, #80]	; (8000430 <HAL_MspInit+0x5c>)
 80003e0:	f043 0301 	orr.w	r3, r3, #1
 80003e4:	6193      	str	r3, [r2, #24]
 80003e6:	4b12      	ldr	r3, [pc, #72]	; (8000430 <HAL_MspInit+0x5c>)
 80003e8:	699b      	ldr	r3, [r3, #24]
 80003ea:	f003 0301 	and.w	r3, r3, #1
 80003ee:	60bb      	str	r3, [r7, #8]
 80003f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003f2:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <HAL_MspInit+0x5c>)
 80003f4:	69db      	ldr	r3, [r3, #28]
 80003f6:	4a0e      	ldr	r2, [pc, #56]	; (8000430 <HAL_MspInit+0x5c>)
 80003f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003fc:	61d3      	str	r3, [r2, #28]
 80003fe:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <HAL_MspInit+0x5c>)
 8000400:	69db      	ldr	r3, [r3, #28]
 8000402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800040a:	4b0a      	ldr	r3, [pc, #40]	; (8000434 <HAL_MspInit+0x60>)
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	60fb      	str	r3, [r7, #12]
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	4a04      	ldr	r2, [pc, #16]	; (8000434 <HAL_MspInit+0x60>)
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000426:	bf00      	nop
 8000428:	3714      	adds	r7, #20
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr
 8000430:	40021000 	.word	0x40021000
 8000434:	40010000 	.word	0x40010000

08000438 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b088      	sub	sp, #32
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000440:	f107 0310 	add.w	r3, r7, #16
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]
 8000448:	605a      	str	r2, [r3, #4]
 800044a:	609a      	str	r2, [r3, #8]
 800044c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4a18      	ldr	r2, [pc, #96]	; (80004b4 <HAL_ADC_MspInit+0x7c>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d129      	bne.n	80004ac <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000458:	4b17      	ldr	r3, [pc, #92]	; (80004b8 <HAL_ADC_MspInit+0x80>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a16      	ldr	r2, [pc, #88]	; (80004b8 <HAL_ADC_MspInit+0x80>)
 800045e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <HAL_ADC_MspInit+0x80>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800046c:	60fb      	str	r3, [r7, #12]
 800046e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000470:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <HAL_ADC_MspInit+0x80>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	4a10      	ldr	r2, [pc, #64]	; (80004b8 <HAL_ADC_MspInit+0x80>)
 8000476:	f043 0304 	orr.w	r3, r3, #4
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	4b0e      	ldr	r3, [pc, #56]	; (80004b8 <HAL_ADC_MspInit+0x80>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f003 0304 	and.w	r3, r3, #4
 8000484:	60bb      	str	r3, [r7, #8]
 8000486:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000488:	2302      	movs	r3, #2
 800048a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800048c:	2303      	movs	r3, #3
 800048e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000490:	f107 0310 	add.w	r3, r7, #16
 8000494:	4619      	mov	r1, r3
 8000496:	4809      	ldr	r0, [pc, #36]	; (80004bc <HAL_ADC_MspInit+0x84>)
 8000498:	f000 fee6 	bl	8001268 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800049c:	2200      	movs	r2, #0
 800049e:	2100      	movs	r1, #0
 80004a0:	2012      	movs	r0, #18
 80004a2:	f000 feaa 	bl	80011fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80004a6:	2012      	movs	r0, #18
 80004a8:	f000 fec3 	bl	8001232 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80004ac:	bf00      	nop
 80004ae:	3720      	adds	r7, #32
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	40012400 	.word	0x40012400
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40010800 	.word	0x40010800

080004c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004c4:	e7fe      	b.n	80004c4 <NMI_Handler+0x4>

080004c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ca:	e7fe      	b.n	80004ca <HardFault_Handler+0x4>

080004cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004d0:	e7fe      	b.n	80004d0 <MemManage_Handler+0x4>

080004d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004d6:	e7fe      	b.n	80004d6 <BusFault_Handler+0x4>

080004d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004dc:	e7fe      	b.n	80004dc <UsageFault_Handler+0x4>

080004de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr

080004ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bc80      	pop	{r7}
 80004f4:	4770      	bx	lr

080004f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004fa:	bf00      	nop
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr

08000502 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000502:	b580      	push	{r7, lr}
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000506:	f000 f87f 	bl	8000608 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
	...

08000510 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000514:	4802      	ldr	r0, [pc, #8]	; (8000520 <ADC1_2_IRQHandler+0x10>)
 8000516:	f000 fa85 	bl	8000a24 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000028 	.word	0x20000028

08000524 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000530:	f7ff fff8 	bl	8000524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000534:	480b      	ldr	r0, [pc, #44]	; (8000564 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000536:	490c      	ldr	r1, [pc, #48]	; (8000568 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000538:	4a0c      	ldr	r2, [pc, #48]	; (800056c <LoopFillZerobss+0x16>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800053c:	e002      	b.n	8000544 <LoopCopyDataInit>

0800053e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800053e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000542:	3304      	adds	r3, #4

08000544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000548:	d3f9      	bcc.n	800053e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800054a:	4a09      	ldr	r2, [pc, #36]	; (8000570 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800054c:	4c09      	ldr	r4, [pc, #36]	; (8000574 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800054e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000550:	e001      	b.n	8000556 <LoopFillZerobss>

08000552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000554:	3204      	adds	r2, #4

08000556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000558:	d3fb      	bcc.n	8000552 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800055a:	f001 fd91 	bl	8002080 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800055e:	f7ff fe07 	bl	8000170 <main>
  bx lr
 8000562:	4770      	bx	lr
  ldr r0, =_sdata
 8000564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000568:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800056c:	08002128 	.word	0x08002128
  ldr r2, =_sbss
 8000570:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000574:	20000060 	.word	0x20000060

08000578 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000578:	e7fe      	b.n	8000578 <CAN1_RX1_IRQHandler>
	...

0800057c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000580:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <HAL_Init+0x28>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <HAL_Init+0x28>)
 8000586:	f043 0310 	orr.w	r3, r3, #16
 800058a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800058c:	2003      	movs	r0, #3
 800058e:	f000 fe29 	bl	80011e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000592:	200f      	movs	r0, #15
 8000594:	f000 f808 	bl	80005a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000598:	f7ff ff1c 	bl	80003d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800059c:	2300      	movs	r3, #0
}
 800059e:	4618      	mov	r0, r3
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40022000 	.word	0x40022000

080005a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005b0:	4b12      	ldr	r3, [pc, #72]	; (80005fc <HAL_InitTick+0x54>)
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <HAL_InitTick+0x58>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	4619      	mov	r1, r3
 80005ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005be:	fbb3 f3f1 	udiv	r3, r3, r1
 80005c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 fe41 	bl	800124e <HAL_SYSTICK_Config>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005d2:	2301      	movs	r3, #1
 80005d4:	e00e      	b.n	80005f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2b0f      	cmp	r3, #15
 80005da:	d80a      	bhi.n	80005f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005dc:	2200      	movs	r2, #0
 80005de:	6879      	ldr	r1, [r7, #4]
 80005e0:	f04f 30ff 	mov.w	r0, #4294967295
 80005e4:	f000 fe09 	bl	80011fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005e8:	4a06      	ldr	r2, [pc, #24]	; (8000604 <HAL_InitTick+0x5c>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005ee:	2300      	movs	r3, #0
 80005f0:	e000      	b.n	80005f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005f2:	2301      	movs	r3, #1
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000000 	.word	0x20000000
 8000600:	20000008 	.word	0x20000008
 8000604:	20000004 	.word	0x20000004

08000608 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <HAL_IncTick+0x1c>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	461a      	mov	r2, r3
 8000612:	4b05      	ldr	r3, [pc, #20]	; (8000628 <HAL_IncTick+0x20>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4413      	add	r3, r2
 8000618:	4a03      	ldr	r2, [pc, #12]	; (8000628 <HAL_IncTick+0x20>)
 800061a:	6013      	str	r3, [r2, #0]
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr
 8000624:	20000008 	.word	0x20000008
 8000628:	2000005c 	.word	0x2000005c

0800062c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  return uwTick;
 8000630:	4b02      	ldr	r3, [pc, #8]	; (800063c <HAL_GetTick+0x10>)
 8000632:	681b      	ldr	r3, [r3, #0]
}
 8000634:	4618      	mov	r0, r3
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr
 800063c:	2000005c 	.word	0x2000005c

08000640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000648:	f7ff fff0 	bl	800062c <HAL_GetTick>
 800064c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000658:	d005      	beq.n	8000666 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800065a:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <HAL_Delay+0x44>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	461a      	mov	r2, r3
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	4413      	add	r3, r2
 8000664:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000666:	bf00      	nop
 8000668:	f7ff ffe0 	bl	800062c <HAL_GetTick>
 800066c:	4602      	mov	r2, r0
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	68fa      	ldr	r2, [r7, #12]
 8000674:	429a      	cmp	r2, r3
 8000676:	d8f7      	bhi.n	8000668 <HAL_Delay+0x28>
  {
  }
}
 8000678:	bf00      	nop
 800067a:	bf00      	nop
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000008 	.word	0x20000008

08000688 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000690:	2300      	movs	r3, #0
 8000692:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000694:	2300      	movs	r3, #0
 8000696:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d101      	bne.n	80006aa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80006a6:	2301      	movs	r3, #1
 80006a8:	e0be      	b.n	8000828 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	689b      	ldr	r3, [r3, #8]
 80006ae:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d109      	bne.n	80006cc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2200      	movs	r2, #0
 80006bc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	2200      	movs	r2, #0
 80006c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f7ff feb6 	bl	8000438 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f000 fbc3 	bl	8000e58 <ADC_ConversionStop_Disable>
 80006d2:	4603      	mov	r3, r0
 80006d4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006da:	f003 0310 	and.w	r3, r3, #16
 80006de:	2b00      	cmp	r3, #0
 80006e0:	f040 8099 	bne.w	8000816 <HAL_ADC_Init+0x18e>
 80006e4:	7dfb      	ldrb	r3, [r7, #23]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	f040 8095 	bne.w	8000816 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80006f4:	f023 0302 	bic.w	r3, r3, #2
 80006f8:	f043 0202 	orr.w	r2, r3, #2
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000708:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	7b1b      	ldrb	r3, [r3, #12]
 800070e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000710:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000712:	68ba      	ldr	r2, [r7, #8]
 8000714:	4313      	orrs	r3, r2
 8000716:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000720:	d003      	beq.n	800072a <HAL_ADC_Init+0xa2>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	2b01      	cmp	r3, #1
 8000728:	d102      	bne.n	8000730 <HAL_ADC_Init+0xa8>
 800072a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800072e:	e000      	b.n	8000732 <HAL_ADC_Init+0xaa>
 8000730:	2300      	movs	r3, #0
 8000732:	693a      	ldr	r2, [r7, #16]
 8000734:	4313      	orrs	r3, r2
 8000736:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	7d1b      	ldrb	r3, [r3, #20]
 800073c:	2b01      	cmp	r3, #1
 800073e:	d119      	bne.n	8000774 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	7b1b      	ldrb	r3, [r3, #12]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d109      	bne.n	800075c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	3b01      	subs	r3, #1
 800074e:	035a      	lsls	r2, r3, #13
 8000750:	693b      	ldr	r3, [r7, #16]
 8000752:	4313      	orrs	r3, r2
 8000754:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000758:	613b      	str	r3, [r7, #16]
 800075a:	e00b      	b.n	8000774 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000760:	f043 0220 	orr.w	r2, r3, #32
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800076c:	f043 0201 	orr.w	r2, r3, #1
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	693a      	ldr	r2, [r7, #16]
 8000784:	430a      	orrs	r2, r1
 8000786:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	689a      	ldr	r2, [r3, #8]
 800078e:	4b28      	ldr	r3, [pc, #160]	; (8000830 <HAL_ADC_Init+0x1a8>)
 8000790:	4013      	ands	r3, r2
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	6812      	ldr	r2, [r2, #0]
 8000796:	68b9      	ldr	r1, [r7, #8]
 8000798:	430b      	orrs	r3, r1
 800079a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	689b      	ldr	r3, [r3, #8]
 80007a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007a4:	d003      	beq.n	80007ae <HAL_ADC_Init+0x126>
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	689b      	ldr	r3, [r3, #8]
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d104      	bne.n	80007b8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	691b      	ldr	r3, [r3, #16]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	051b      	lsls	r3, r3, #20
 80007b6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007be:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	68fa      	ldr	r2, [r7, #12]
 80007c8:	430a      	orrs	r2, r1
 80007ca:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	689a      	ldr	r2, [r3, #8]
 80007d2:	4b18      	ldr	r3, [pc, #96]	; (8000834 <HAL_ADC_Init+0x1ac>)
 80007d4:	4013      	ands	r3, r2
 80007d6:	68ba      	ldr	r2, [r7, #8]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d10b      	bne.n	80007f4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2200      	movs	r2, #0
 80007e0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007e6:	f023 0303 	bic.w	r3, r3, #3
 80007ea:	f043 0201 	orr.w	r2, r3, #1
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80007f2:	e018      	b.n	8000826 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007f8:	f023 0312 	bic.w	r3, r3, #18
 80007fc:	f043 0210 	orr.w	r2, r3, #16
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000808:	f043 0201 	orr.w	r2, r3, #1
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000810:	2301      	movs	r3, #1
 8000812:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000814:	e007      	b.n	8000826 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800081a:	f043 0210 	orr.w	r2, r3, #16
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000822:	2301      	movs	r3, #1
 8000824:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000826:	7dfb      	ldrb	r3, [r7, #23]
}
 8000828:	4618      	mov	r0, r3
 800082a:	3718      	adds	r7, #24
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	ffe1f7fd 	.word	0xffe1f7fd
 8000834:	ff1f0efe 	.word	0xff1f0efe

08000838 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000840:	2300      	movs	r3, #0
 8000842:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800084a:	2b01      	cmp	r3, #1
 800084c:	d101      	bne.n	8000852 <HAL_ADC_Start_IT+0x1a>
 800084e:	2302      	movs	r3, #2
 8000850:	e0a0      	b.n	8000994 <HAL_ADC_Start_IT+0x15c>
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2201      	movs	r2, #1
 8000856:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f000 faa2 	bl	8000da4 <ADC_Enable>
 8000860:	4603      	mov	r3, r0
 8000862:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000864:	7bfb      	ldrb	r3, [r7, #15]
 8000866:	2b00      	cmp	r3, #0
 8000868:	f040 808f 	bne.w	800098a <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000870:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000874:	f023 0301 	bic.w	r3, r3, #1
 8000878:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a45      	ldr	r2, [pc, #276]	; (800099c <HAL_ADC_Start_IT+0x164>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d105      	bne.n	8000896 <HAL_ADC_Start_IT+0x5e>
 800088a:	4b45      	ldr	r3, [pc, #276]	; (80009a0 <HAL_ADC_Start_IT+0x168>)
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000892:	2b00      	cmp	r3, #0
 8000894:	d115      	bne.n	80008c2 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800089a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d026      	beq.n	80008fe <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80008b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80008c0:	e01d      	b.n	80008fe <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a33      	ldr	r2, [pc, #204]	; (80009a0 <HAL_ADC_Start_IT+0x168>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d004      	beq.n	80008e2 <HAL_ADC_Start_IT+0xaa>
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a2f      	ldr	r2, [pc, #188]	; (800099c <HAL_ADC_Start_IT+0x164>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d10d      	bne.n	80008fe <HAL_ADC_Start_IT+0xc6>
 80008e2:	4b2f      	ldr	r3, [pc, #188]	; (80009a0 <HAL_ADC_Start_IT+0x168>)
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d007      	beq.n	80008fe <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80008f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000902:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000906:	2b00      	cmp	r3, #0
 8000908:	d006      	beq.n	8000918 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800090e:	f023 0206 	bic.w	r2, r3, #6
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	62da      	str	r2, [r3, #44]	; 0x2c
 8000916:	e002      	b.n	800091e <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2200      	movs	r2, #0
 800091c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2200      	movs	r2, #0
 8000922:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f06f 0202 	mvn.w	r2, #2
 800092e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	685a      	ldr	r2, [r3, #4]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f042 0220 	orr.w	r2, r2, #32
 800093e:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	689b      	ldr	r3, [r3, #8]
 8000946:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800094a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800094e:	d113      	bne.n	8000978 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000954:	4a11      	ldr	r2, [pc, #68]	; (800099c <HAL_ADC_Start_IT+0x164>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d105      	bne.n	8000966 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <HAL_ADC_Start_IT+0x168>)
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000962:	2b00      	cmp	r3, #0
 8000964:	d108      	bne.n	8000978 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	689a      	ldr	r2, [r3, #8]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	e00c      	b.n	8000992 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	689a      	ldr	r2, [r3, #8]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	e003      	b.n	8000992 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2200      	movs	r2, #0
 800098e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000992:	7bfb      	ldrb	r3, [r7, #15]
}
 8000994:	4618      	mov	r0, r3
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40012800 	.word	0x40012800
 80009a0:	40012400 	.word	0x40012400

080009a4 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009ac:	2300      	movs	r3, #0
 80009ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d101      	bne.n	80009be <HAL_ADC_Stop_IT+0x1a>
 80009ba:	2302      	movs	r3, #2
 80009bc:	e022      	b.n	8000a04 <HAL_ADC_Stop_IT+0x60>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2201      	movs	r2, #1
 80009c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f000 fa46 	bl	8000e58 <ADC_ConversionStop_Disable>
 80009cc:	4603      	mov	r3, r0
 80009ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d111      	bne.n	80009fa <HAL_ADC_Stop_IT+0x56>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	685a      	ldr	r2, [r3, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f022 0220 	bic.w	r2, r2, #32
 80009e4:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80009ee:	f023 0301 	bic.w	r3, r3, #1
 80009f2:	f043 0201 	orr.w	r2, r3, #1
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2200      	movs	r2, #0
 80009fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr

08000a24 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	f003 0320 	and.w	r3, r3, #32
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d03e      	beq.n	8000ac4 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	f003 0302 	and.w	r3, r3, #2
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d039      	beq.n	8000ac4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a54:	f003 0310 	and.w	r3, r3, #16
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d105      	bne.n	8000a68 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a60:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	689b      	ldr	r3, [r3, #8]
 8000a6e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000a72:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000a76:	d11d      	bne.n	8000ab4 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d119      	bne.n	8000ab4 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	685a      	ldr	r2, [r3, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f022 0220 	bic.w	r2, r2, #32
 8000a8e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d105      	bne.n	8000ab4 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aac:	f043 0201 	orr.w	r2, r3, #1
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f7ff fc69 	bl	800038c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f06f 0212 	mvn.w	r2, #18
 8000ac2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d04d      	beq.n	8000b6a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d048      	beq.n	8000b6a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000adc:	f003 0310 	and.w	r3, r3, #16
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d105      	bne.n	8000af0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000afa:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000afe:	d012      	beq.n	8000b26 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d125      	bne.n	8000b5a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000b18:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000b1c:	d11d      	bne.n	8000b5a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d119      	bne.n	8000b5a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	685a      	ldr	r2, [r3, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b34:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d105      	bne.n	8000b5a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b52:	f043 0201 	orr.w	r2, r3, #1
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f000 fa6c 	bl	8001038 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f06f 020c 	mvn.w	r2, #12
 8000b68:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d012      	beq.n	8000b9a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d00d      	beq.n	8000b9a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f000 f809 	bl	8000ba2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f06f 0201 	mvn.w	r2, #1
 8000b98:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr

08000bb4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d101      	bne.n	8000bd4 <HAL_ADC_ConfigChannel+0x20>
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	e0dc      	b.n	8000d8e <HAL_ADC_ConfigChannel+0x1da>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	2b06      	cmp	r3, #6
 8000be2:	d81c      	bhi.n	8000c1e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685a      	ldr	r2, [r3, #4]
 8000bee:	4613      	mov	r3, r2
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	4413      	add	r3, r2
 8000bf4:	3b05      	subs	r3, #5
 8000bf6:	221f      	movs	r2, #31
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	4019      	ands	r1, r3
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	6818      	ldr	r0, [r3, #0]
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685a      	ldr	r2, [r3, #4]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	4413      	add	r3, r2
 8000c0e:	3b05      	subs	r3, #5
 8000c10:	fa00 f203 	lsl.w	r2, r0, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	635a      	str	r2, [r3, #52]	; 0x34
 8000c1c:	e03c      	b.n	8000c98 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	2b0c      	cmp	r3, #12
 8000c24:	d81c      	bhi.n	8000c60 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685a      	ldr	r2, [r3, #4]
 8000c30:	4613      	mov	r3, r2
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	4413      	add	r3, r2
 8000c36:	3b23      	subs	r3, #35	; 0x23
 8000c38:	221f      	movs	r2, #31
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	4019      	ands	r1, r3
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	6818      	ldr	r0, [r3, #0]
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685a      	ldr	r2, [r3, #4]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	4413      	add	r3, r2
 8000c50:	3b23      	subs	r3, #35	; 0x23
 8000c52:	fa00 f203 	lsl.w	r2, r0, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	631a      	str	r2, [r3, #48]	; 0x30
 8000c5e:	e01b      	b.n	8000c98 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685a      	ldr	r2, [r3, #4]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	4413      	add	r3, r2
 8000c70:	3b41      	subs	r3, #65	; 0x41
 8000c72:	221f      	movs	r2, #31
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	4019      	ands	r1, r3
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	6818      	ldr	r0, [r3, #0]
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685a      	ldr	r2, [r3, #4]
 8000c84:	4613      	mov	r3, r2
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	4413      	add	r3, r2
 8000c8a:	3b41      	subs	r3, #65	; 0x41
 8000c8c:	fa00 f203 	lsl.w	r2, r0, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	430a      	orrs	r2, r1
 8000c96:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b09      	cmp	r3, #9
 8000c9e:	d91c      	bls.n	8000cda <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	68d9      	ldr	r1, [r3, #12]
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	4613      	mov	r3, r2
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	4413      	add	r3, r2
 8000cb0:	3b1e      	subs	r3, #30
 8000cb2:	2207      	movs	r2, #7
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	4019      	ands	r1, r3
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	6898      	ldr	r0, [r3, #8]
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	4413      	add	r3, r2
 8000cca:	3b1e      	subs	r3, #30
 8000ccc:	fa00 f203 	lsl.w	r2, r0, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	60da      	str	r2, [r3, #12]
 8000cd8:	e019      	b.n	8000d0e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	6919      	ldr	r1, [r3, #16]
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	4413      	add	r3, r2
 8000cea:	2207      	movs	r2, #7
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	4019      	ands	r1, r3
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	6898      	ldr	r0, [r3, #8]
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	4413      	add	r3, r2
 8000d02:	fa00 f203 	lsl.w	r2, r0, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2b10      	cmp	r3, #16
 8000d14:	d003      	beq.n	8000d1e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d1a:	2b11      	cmp	r3, #17
 8000d1c:	d132      	bne.n	8000d84 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a1d      	ldr	r2, [pc, #116]	; (8000d98 <HAL_ADC_ConfigChannel+0x1e4>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d125      	bne.n	8000d74 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d126      	bne.n	8000d84 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	689a      	ldr	r2, [r3, #8]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000d44:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b10      	cmp	r3, #16
 8000d4c:	d11a      	bne.n	8000d84 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <HAL_ADC_ConfigChannel+0x1e8>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a13      	ldr	r2, [pc, #76]	; (8000da0 <HAL_ADC_ConfigChannel+0x1ec>)
 8000d54:	fba2 2303 	umull	r2, r3, r2, r3
 8000d58:	0c9a      	lsrs	r2, r3, #18
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	4413      	add	r3, r2
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d64:	e002      	b.n	8000d6c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d1f9      	bne.n	8000d66 <HAL_ADC_ConfigChannel+0x1b2>
 8000d72:	e007      	b.n	8000d84 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d78:	f043 0220 	orr.w	r2, r3, #32
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3714      	adds	r7, #20
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr
 8000d98:	40012400 	.word	0x40012400
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	431bde83 	.word	0x431bde83

08000da4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d040      	beq.n	8000e44 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	689a      	ldr	r2, [r3, #8]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f042 0201 	orr.w	r2, r2, #1
 8000dd0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000dd2:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <ADC_Enable+0xac>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a1f      	ldr	r2, [pc, #124]	; (8000e54 <ADC_Enable+0xb0>)
 8000dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ddc:	0c9b      	lsrs	r3, r3, #18
 8000dde:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000de0:	e002      	b.n	8000de8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	3b01      	subs	r3, #1
 8000de6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d1f9      	bne.n	8000de2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000dee:	f7ff fc1d 	bl	800062c <HAL_GetTick>
 8000df2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000df4:	e01f      	b.n	8000e36 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000df6:	f7ff fc19 	bl	800062c <HAL_GetTick>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d918      	bls.n	8000e36 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d011      	beq.n	8000e36 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e16:	f043 0210 	orr.w	r2, r3, #16
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e22:	f043 0201 	orr.w	r2, r3, #1
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e007      	b.n	8000e46 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d1d8      	bne.n	8000df6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000000 	.word	0x20000000
 8000e54:	431bde83 	.word	0x431bde83

08000e58 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d12e      	bne.n	8000ed0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	689a      	ldr	r2, [r3, #8]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f022 0201 	bic.w	r2, r2, #1
 8000e80:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e82:	f7ff fbd3 	bl	800062c <HAL_GetTick>
 8000e86:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e88:	e01b      	b.n	8000ec2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000e8a:	f7ff fbcf 	bl	800062c <HAL_GetTick>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d914      	bls.n	8000ec2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d10d      	bne.n	8000ec2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eaa:	f043 0210 	orr.w	r2, r3, #16
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb6:	f043 0201 	orr.w	r2, r3, #1
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e007      	b.n	8000ed2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d0dc      	beq.n	8000e8a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8000edc:	b590      	push	{r4, r7, lr}
 8000ede:	b087      	sub	sp, #28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d101      	bne.n	8000efa <HAL_ADCEx_Calibration_Start+0x1e>
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	e097      	b.n	800102a <HAL_ADCEx_Calibration_Start+0x14e>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2201      	movs	r2, #1
 8000efe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff ffa8 	bl	8000e58 <ADC_ConversionStop_Disable>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff ff49 	bl	8000da4 <ADC_Enable>
 8000f12:	4603      	mov	r3, r0
 8000f14:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8000f16:	7dfb      	ldrb	r3, [r7, #23]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	f040 8081 	bne.w	8001020 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f22:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f26:	f023 0302 	bic.w	r3, r3, #2
 8000f2a:	f043 0202 	orr.w	r2, r3, #2
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000f32:	4b40      	ldr	r3, [pc, #256]	; (8001034 <HAL_ADCEx_Calibration_Start+0x158>)
 8000f34:	681c      	ldr	r4, [r3, #0]
 8000f36:	2002      	movs	r0, #2
 8000f38:	f000 ffe4 	bl	8001f04 <HAL_RCCEx_GetPeriphCLKFreq>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8000f42:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8000f44:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8000f46:	e002      	b.n	8000f4e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d1f9      	bne.n	8000f48 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f042 0208 	orr.w	r2, r2, #8
 8000f62:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8000f64:	f7ff fb62 	bl	800062c <HAL_GetTick>
 8000f68:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8000f6a:	e01b      	b.n	8000fa4 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000f6c:	f7ff fb5e 	bl	800062c <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	2b0a      	cmp	r3, #10
 8000f78:	d914      	bls.n	8000fa4 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f003 0308 	and.w	r3, r3, #8
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d00d      	beq.n	8000fa4 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f8c:	f023 0312 	bic.w	r3, r3, #18
 8000f90:	f043 0210 	orr.w	r2, r3, #16
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e042      	b.n	800102a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f003 0308 	and.w	r3, r3, #8
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1dc      	bne.n	8000f6c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	689a      	ldr	r2, [r3, #8]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f042 0204 	orr.w	r2, r2, #4
 8000fc0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8000fc2:	f7ff fb33 	bl	800062c <HAL_GetTick>
 8000fc6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8000fc8:	e01b      	b.n	8001002 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000fca:	f7ff fb2f 	bl	800062c <HAL_GetTick>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	2b0a      	cmp	r3, #10
 8000fd6:	d914      	bls.n	8001002 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f003 0304 	and.w	r3, r3, #4
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d00d      	beq.n	8001002 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fea:	f023 0312 	bic.w	r3, r3, #18
 8000fee:	f043 0210 	orr.w	r2, r3, #16
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e013      	b.n	800102a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f003 0304 	and.w	r3, r3, #4
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1dc      	bne.n	8000fca <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001014:	f023 0303 	bic.w	r3, r3, #3
 8001018:	f043 0201 	orr.w	r2, r3, #1
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001028:	7dfb      	ldrb	r3, [r7, #23]
}
 800102a:	4618      	mov	r0, r3
 800102c:	371c      	adds	r7, #28
 800102e:	46bd      	mov	sp, r7
 8001030:	bd90      	pop	{r4, r7, pc}
 8001032:	bf00      	nop
 8001034:	20000000 	.word	0x20000000

08001038 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr
	...

0800104c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <__NVIC_SetPriorityGrouping+0x44>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001068:	4013      	ands	r3, r2
 800106a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001074:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800107c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107e:	4a04      	ldr	r2, [pc, #16]	; (8001090 <__NVIC_SetPriorityGrouping+0x44>)
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	60d3      	str	r3, [r2, #12]
}
 8001084:	bf00      	nop
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <__NVIC_GetPriorityGrouping+0x18>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	0a1b      	lsrs	r3, r3, #8
 800109e:	f003 0307 	and.w	r3, r3, #7
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	db0b      	blt.n	80010da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	f003 021f 	and.w	r2, r3, #31
 80010c8:	4906      	ldr	r1, [pc, #24]	; (80010e4 <__NVIC_EnableIRQ+0x34>)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	095b      	lsrs	r3, r3, #5
 80010d0:	2001      	movs	r0, #1
 80010d2:	fa00 f202 	lsl.w	r2, r0, r2
 80010d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr
 80010e4:	e000e100 	.word	0xe000e100

080010e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	6039      	str	r1, [r7, #0]
 80010f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	db0a      	blt.n	8001112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	490c      	ldr	r1, [pc, #48]	; (8001134 <__NVIC_SetPriority+0x4c>)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	0112      	lsls	r2, r2, #4
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	440b      	add	r3, r1
 800110c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001110:	e00a      	b.n	8001128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4908      	ldr	r1, [pc, #32]	; (8001138 <__NVIC_SetPriority+0x50>)
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	3b04      	subs	r3, #4
 8001120:	0112      	lsls	r2, r2, #4
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	440b      	add	r3, r1
 8001126:	761a      	strb	r2, [r3, #24]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000e100 	.word	0xe000e100
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f1c3 0307 	rsb	r3, r3, #7
 8001156:	2b04      	cmp	r3, #4
 8001158:	bf28      	it	cs
 800115a:	2304      	movcs	r3, #4
 800115c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3304      	adds	r3, #4
 8001162:	2b06      	cmp	r3, #6
 8001164:	d902      	bls.n	800116c <NVIC_EncodePriority+0x30>
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3b03      	subs	r3, #3
 800116a:	e000      	b.n	800116e <NVIC_EncodePriority+0x32>
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	f04f 32ff 	mov.w	r2, #4294967295
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43da      	mvns	r2, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	401a      	ands	r2, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001184:	f04f 31ff 	mov.w	r1, #4294967295
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fa01 f303 	lsl.w	r3, r1, r3
 800118e:	43d9      	mvns	r1, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	4313      	orrs	r3, r2
         );
}
 8001196:	4618      	mov	r0, r3
 8001198:	3724      	adds	r7, #36	; 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr

080011a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b0:	d301      	bcc.n	80011b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b2:	2301      	movs	r3, #1
 80011b4:	e00f      	b.n	80011d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b6:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <SysTick_Config+0x40>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011be:	210f      	movs	r1, #15
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295
 80011c4:	f7ff ff90 	bl	80010e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <SysTick_Config+0x40>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ce:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <SysTick_Config+0x40>)
 80011d0:	2207      	movs	r2, #7
 80011d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	e000e010 	.word	0xe000e010

080011e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ff2d 	bl	800104c <__NVIC_SetPriorityGrouping>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b086      	sub	sp, #24
 80011fe:	af00      	add	r7, sp, #0
 8001200:	4603      	mov	r3, r0
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	607a      	str	r2, [r7, #4]
 8001206:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800120c:	f7ff ff42 	bl	8001094 <__NVIC_GetPriorityGrouping>
 8001210:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	68b9      	ldr	r1, [r7, #8]
 8001216:	6978      	ldr	r0, [r7, #20]
 8001218:	f7ff ff90 	bl	800113c <NVIC_EncodePriority>
 800121c:	4602      	mov	r2, r0
 800121e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001222:	4611      	mov	r1, r2
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff5f 	bl	80010e8 <__NVIC_SetPriority>
}
 800122a:	bf00      	nop
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff35 	bl	80010b0 <__NVIC_EnableIRQ>
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff ffa2 	bl	80011a0 <SysTick_Config>
 800125c:	4603      	mov	r3, r0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001268:	b480      	push	{r7}
 800126a:	b08b      	sub	sp, #44	; 0x2c
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001272:	2300      	movs	r3, #0
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001276:	2300      	movs	r3, #0
 8001278:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800127a:	e169      	b.n	8001550 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800127c:	2201      	movs	r2, #1
 800127e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	69fa      	ldr	r2, [r7, #28]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	429a      	cmp	r2, r3
 8001296:	f040 8158 	bne.w	800154a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	4a9a      	ldr	r2, [pc, #616]	; (8001508 <HAL_GPIO_Init+0x2a0>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d05e      	beq.n	8001362 <HAL_GPIO_Init+0xfa>
 80012a4:	4a98      	ldr	r2, [pc, #608]	; (8001508 <HAL_GPIO_Init+0x2a0>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d875      	bhi.n	8001396 <HAL_GPIO_Init+0x12e>
 80012aa:	4a98      	ldr	r2, [pc, #608]	; (800150c <HAL_GPIO_Init+0x2a4>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d058      	beq.n	8001362 <HAL_GPIO_Init+0xfa>
 80012b0:	4a96      	ldr	r2, [pc, #600]	; (800150c <HAL_GPIO_Init+0x2a4>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d86f      	bhi.n	8001396 <HAL_GPIO_Init+0x12e>
 80012b6:	4a96      	ldr	r2, [pc, #600]	; (8001510 <HAL_GPIO_Init+0x2a8>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d052      	beq.n	8001362 <HAL_GPIO_Init+0xfa>
 80012bc:	4a94      	ldr	r2, [pc, #592]	; (8001510 <HAL_GPIO_Init+0x2a8>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d869      	bhi.n	8001396 <HAL_GPIO_Init+0x12e>
 80012c2:	4a94      	ldr	r2, [pc, #592]	; (8001514 <HAL_GPIO_Init+0x2ac>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d04c      	beq.n	8001362 <HAL_GPIO_Init+0xfa>
 80012c8:	4a92      	ldr	r2, [pc, #584]	; (8001514 <HAL_GPIO_Init+0x2ac>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d863      	bhi.n	8001396 <HAL_GPIO_Init+0x12e>
 80012ce:	4a92      	ldr	r2, [pc, #584]	; (8001518 <HAL_GPIO_Init+0x2b0>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d046      	beq.n	8001362 <HAL_GPIO_Init+0xfa>
 80012d4:	4a90      	ldr	r2, [pc, #576]	; (8001518 <HAL_GPIO_Init+0x2b0>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d85d      	bhi.n	8001396 <HAL_GPIO_Init+0x12e>
 80012da:	2b12      	cmp	r3, #18
 80012dc:	d82a      	bhi.n	8001334 <HAL_GPIO_Init+0xcc>
 80012de:	2b12      	cmp	r3, #18
 80012e0:	d859      	bhi.n	8001396 <HAL_GPIO_Init+0x12e>
 80012e2:	a201      	add	r2, pc, #4	; (adr r2, 80012e8 <HAL_GPIO_Init+0x80>)
 80012e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e8:	08001363 	.word	0x08001363
 80012ec:	0800133d 	.word	0x0800133d
 80012f0:	0800134f 	.word	0x0800134f
 80012f4:	08001391 	.word	0x08001391
 80012f8:	08001397 	.word	0x08001397
 80012fc:	08001397 	.word	0x08001397
 8001300:	08001397 	.word	0x08001397
 8001304:	08001397 	.word	0x08001397
 8001308:	08001397 	.word	0x08001397
 800130c:	08001397 	.word	0x08001397
 8001310:	08001397 	.word	0x08001397
 8001314:	08001397 	.word	0x08001397
 8001318:	08001397 	.word	0x08001397
 800131c:	08001397 	.word	0x08001397
 8001320:	08001397 	.word	0x08001397
 8001324:	08001397 	.word	0x08001397
 8001328:	08001397 	.word	0x08001397
 800132c:	08001345 	.word	0x08001345
 8001330:	08001359 	.word	0x08001359
 8001334:	4a79      	ldr	r2, [pc, #484]	; (800151c <HAL_GPIO_Init+0x2b4>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d013      	beq.n	8001362 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800133a:	e02c      	b.n	8001396 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	623b      	str	r3, [r7, #32]
          break;
 8001342:	e029      	b.n	8001398 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	3304      	adds	r3, #4
 800134a:	623b      	str	r3, [r7, #32]
          break;
 800134c:	e024      	b.n	8001398 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	3308      	adds	r3, #8
 8001354:	623b      	str	r3, [r7, #32]
          break;
 8001356:	e01f      	b.n	8001398 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	330c      	adds	r3, #12
 800135e:	623b      	str	r3, [r7, #32]
          break;
 8001360:	e01a      	b.n	8001398 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d102      	bne.n	8001370 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800136a:	2304      	movs	r3, #4
 800136c:	623b      	str	r3, [r7, #32]
          break;
 800136e:	e013      	b.n	8001398 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d105      	bne.n	8001384 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001378:	2308      	movs	r3, #8
 800137a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	69fa      	ldr	r2, [r7, #28]
 8001380:	611a      	str	r2, [r3, #16]
          break;
 8001382:	e009      	b.n	8001398 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001384:	2308      	movs	r3, #8
 8001386:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	69fa      	ldr	r2, [r7, #28]
 800138c:	615a      	str	r2, [r3, #20]
          break;
 800138e:	e003      	b.n	8001398 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001390:	2300      	movs	r3, #0
 8001392:	623b      	str	r3, [r7, #32]
          break;
 8001394:	e000      	b.n	8001398 <HAL_GPIO_Init+0x130>
          break;
 8001396:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	2bff      	cmp	r3, #255	; 0xff
 800139c:	d801      	bhi.n	80013a2 <HAL_GPIO_Init+0x13a>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	e001      	b.n	80013a6 <HAL_GPIO_Init+0x13e>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3304      	adds	r3, #4
 80013a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	2bff      	cmp	r3, #255	; 0xff
 80013ac:	d802      	bhi.n	80013b4 <HAL_GPIO_Init+0x14c>
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	e002      	b.n	80013ba <HAL_GPIO_Init+0x152>
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	3b08      	subs	r3, #8
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	210f      	movs	r1, #15
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	fa01 f303 	lsl.w	r3, r1, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	401a      	ands	r2, r3
 80013cc:	6a39      	ldr	r1, [r7, #32]
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	fa01 f303 	lsl.w	r3, r1, r3
 80013d4:	431a      	orrs	r2, r3
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 80b1 	beq.w	800154a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013e8:	4b4d      	ldr	r3, [pc, #308]	; (8001520 <HAL_GPIO_Init+0x2b8>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	4a4c      	ldr	r2, [pc, #304]	; (8001520 <HAL_GPIO_Init+0x2b8>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	6193      	str	r3, [r2, #24]
 80013f4:	4b4a      	ldr	r3, [pc, #296]	; (8001520 <HAL_GPIO_Init+0x2b8>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001400:	4a48      	ldr	r2, [pc, #288]	; (8001524 <HAL_GPIO_Init+0x2bc>)
 8001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	3302      	adds	r3, #2
 8001408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	f003 0303 	and.w	r3, r3, #3
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	220f      	movs	r2, #15
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	4013      	ands	r3, r2
 8001422:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a40      	ldr	r2, [pc, #256]	; (8001528 <HAL_GPIO_Init+0x2c0>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d013      	beq.n	8001454 <HAL_GPIO_Init+0x1ec>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a3f      	ldr	r2, [pc, #252]	; (800152c <HAL_GPIO_Init+0x2c4>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d00d      	beq.n	8001450 <HAL_GPIO_Init+0x1e8>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a3e      	ldr	r2, [pc, #248]	; (8001530 <HAL_GPIO_Init+0x2c8>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d007      	beq.n	800144c <HAL_GPIO_Init+0x1e4>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a3d      	ldr	r2, [pc, #244]	; (8001534 <HAL_GPIO_Init+0x2cc>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d101      	bne.n	8001448 <HAL_GPIO_Init+0x1e0>
 8001444:	2303      	movs	r3, #3
 8001446:	e006      	b.n	8001456 <HAL_GPIO_Init+0x1ee>
 8001448:	2304      	movs	r3, #4
 800144a:	e004      	b.n	8001456 <HAL_GPIO_Init+0x1ee>
 800144c:	2302      	movs	r3, #2
 800144e:	e002      	b.n	8001456 <HAL_GPIO_Init+0x1ee>
 8001450:	2301      	movs	r3, #1
 8001452:	e000      	b.n	8001456 <HAL_GPIO_Init+0x1ee>
 8001454:	2300      	movs	r3, #0
 8001456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001458:	f002 0203 	and.w	r2, r2, #3
 800145c:	0092      	lsls	r2, r2, #2
 800145e:	4093      	lsls	r3, r2
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	4313      	orrs	r3, r2
 8001464:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001466:	492f      	ldr	r1, [pc, #188]	; (8001524 <HAL_GPIO_Init+0x2bc>)
 8001468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146a:	089b      	lsrs	r3, r3, #2
 800146c:	3302      	adds	r3, #2
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d006      	beq.n	800148e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001480:	4b2d      	ldr	r3, [pc, #180]	; (8001538 <HAL_GPIO_Init+0x2d0>)
 8001482:	689a      	ldr	r2, [r3, #8]
 8001484:	492c      	ldr	r1, [pc, #176]	; (8001538 <HAL_GPIO_Init+0x2d0>)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	4313      	orrs	r3, r2
 800148a:	608b      	str	r3, [r1, #8]
 800148c:	e006      	b.n	800149c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800148e:	4b2a      	ldr	r3, [pc, #168]	; (8001538 <HAL_GPIO_Init+0x2d0>)
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	43db      	mvns	r3, r3
 8001496:	4928      	ldr	r1, [pc, #160]	; (8001538 <HAL_GPIO_Init+0x2d0>)
 8001498:	4013      	ands	r3, r2
 800149a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d006      	beq.n	80014b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014a8:	4b23      	ldr	r3, [pc, #140]	; (8001538 <HAL_GPIO_Init+0x2d0>)
 80014aa:	68da      	ldr	r2, [r3, #12]
 80014ac:	4922      	ldr	r1, [pc, #136]	; (8001538 <HAL_GPIO_Init+0x2d0>)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	60cb      	str	r3, [r1, #12]
 80014b4:	e006      	b.n	80014c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014b6:	4b20      	ldr	r3, [pc, #128]	; (8001538 <HAL_GPIO_Init+0x2d0>)
 80014b8:	68da      	ldr	r2, [r3, #12]
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	43db      	mvns	r3, r3
 80014be:	491e      	ldr	r1, [pc, #120]	; (8001538 <HAL_GPIO_Init+0x2d0>)
 80014c0:	4013      	ands	r3, r2
 80014c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d006      	beq.n	80014de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014d0:	4b19      	ldr	r3, [pc, #100]	; (8001538 <HAL_GPIO_Init+0x2d0>)
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	4918      	ldr	r1, [pc, #96]	; (8001538 <HAL_GPIO_Init+0x2d0>)
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	4313      	orrs	r3, r2
 80014da:	604b      	str	r3, [r1, #4]
 80014dc:	e006      	b.n	80014ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014de:	4b16      	ldr	r3, [pc, #88]	; (8001538 <HAL_GPIO_Init+0x2d0>)
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	4914      	ldr	r1, [pc, #80]	; (8001538 <HAL_GPIO_Init+0x2d0>)
 80014e8:	4013      	ands	r3, r2
 80014ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d021      	beq.n	800153c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014f8:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <HAL_GPIO_Init+0x2d0>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	490e      	ldr	r1, [pc, #56]	; (8001538 <HAL_GPIO_Init+0x2d0>)
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	4313      	orrs	r3, r2
 8001502:	600b      	str	r3, [r1, #0]
 8001504:	e021      	b.n	800154a <HAL_GPIO_Init+0x2e2>
 8001506:	bf00      	nop
 8001508:	10320000 	.word	0x10320000
 800150c:	10310000 	.word	0x10310000
 8001510:	10220000 	.word	0x10220000
 8001514:	10210000 	.word	0x10210000
 8001518:	10120000 	.word	0x10120000
 800151c:	10110000 	.word	0x10110000
 8001520:	40021000 	.word	0x40021000
 8001524:	40010000 	.word	0x40010000
 8001528:	40010800 	.word	0x40010800
 800152c:	40010c00 	.word	0x40010c00
 8001530:	40011000 	.word	0x40011000
 8001534:	40011400 	.word	0x40011400
 8001538:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800153c:	4b0b      	ldr	r3, [pc, #44]	; (800156c <HAL_GPIO_Init+0x304>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	43db      	mvns	r3, r3
 8001544:	4909      	ldr	r1, [pc, #36]	; (800156c <HAL_GPIO_Init+0x304>)
 8001546:	4013      	ands	r3, r2
 8001548:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	3301      	adds	r3, #1
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	fa22 f303 	lsr.w	r3, r2, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	f47f ae8e 	bne.w	800127c <HAL_GPIO_Init+0x14>
  }
}
 8001560:	bf00      	nop
 8001562:	bf00      	nop
 8001564:	372c      	adds	r7, #44	; 0x2c
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	40010400 	.word	0x40010400

08001570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	460b      	mov	r3, r1
 800157a:	807b      	strh	r3, [r7, #2]
 800157c:	4613      	mov	r3, r2
 800157e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001580:	787b      	ldrb	r3, [r7, #1]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001586:	887a      	ldrh	r2, [r7, #2]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800158c:	e003      	b.n	8001596 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800158e:	887b      	ldrh	r3, [r7, #2]
 8001590:	041a      	lsls	r2, r3, #16
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	611a      	str	r2, [r3, #16]
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr

080015a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e272      	b.n	8001a98 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 8087 	beq.w	80016ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015c0:	4b92      	ldr	r3, [pc, #584]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 030c 	and.w	r3, r3, #12
 80015c8:	2b04      	cmp	r3, #4
 80015ca:	d00c      	beq.n	80015e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015cc:	4b8f      	ldr	r3, [pc, #572]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 030c 	and.w	r3, r3, #12
 80015d4:	2b08      	cmp	r3, #8
 80015d6:	d112      	bne.n	80015fe <HAL_RCC_OscConfig+0x5e>
 80015d8:	4b8c      	ldr	r3, [pc, #560]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e4:	d10b      	bne.n	80015fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e6:	4b89      	ldr	r3, [pc, #548]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d06c      	beq.n	80016cc <HAL_RCC_OscConfig+0x12c>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d168      	bne.n	80016cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e24c      	b.n	8001a98 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001606:	d106      	bne.n	8001616 <HAL_RCC_OscConfig+0x76>
 8001608:	4b80      	ldr	r3, [pc, #512]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a7f      	ldr	r2, [pc, #508]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 800160e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	e02e      	b.n	8001674 <HAL_RCC_OscConfig+0xd4>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10c      	bne.n	8001638 <HAL_RCC_OscConfig+0x98>
 800161e:	4b7b      	ldr	r3, [pc, #492]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a7a      	ldr	r2, [pc, #488]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 8001624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	4b78      	ldr	r3, [pc, #480]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a77      	ldr	r2, [pc, #476]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 8001630:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	e01d      	b.n	8001674 <HAL_RCC_OscConfig+0xd4>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001640:	d10c      	bne.n	800165c <HAL_RCC_OscConfig+0xbc>
 8001642:	4b72      	ldr	r3, [pc, #456]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a71      	ldr	r2, [pc, #452]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 8001648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	4b6f      	ldr	r3, [pc, #444]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a6e      	ldr	r2, [pc, #440]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 8001654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	e00b      	b.n	8001674 <HAL_RCC_OscConfig+0xd4>
 800165c:	4b6b      	ldr	r3, [pc, #428]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a6a      	ldr	r2, [pc, #424]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 8001662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	4b68      	ldr	r3, [pc, #416]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a67      	ldr	r2, [pc, #412]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 800166e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001672:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d013      	beq.n	80016a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167c:	f7fe ffd6 	bl	800062c <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001684:	f7fe ffd2 	bl	800062c <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b64      	cmp	r3, #100	; 0x64
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e200      	b.n	8001a98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001696:	4b5d      	ldr	r3, [pc, #372]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0f0      	beq.n	8001684 <HAL_RCC_OscConfig+0xe4>
 80016a2:	e014      	b.n	80016ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a4:	f7fe ffc2 	bl	800062c <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ac:	f7fe ffbe 	bl	800062c <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b64      	cmp	r3, #100	; 0x64
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e1ec      	b.n	8001a98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016be:	4b53      	ldr	r3, [pc, #332]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0x10c>
 80016ca:	e000      	b.n	80016ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d063      	beq.n	80017a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016da:	4b4c      	ldr	r3, [pc, #304]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f003 030c 	and.w	r3, r3, #12
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00b      	beq.n	80016fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016e6:	4b49      	ldr	r3, [pc, #292]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f003 030c 	and.w	r3, r3, #12
 80016ee:	2b08      	cmp	r3, #8
 80016f0:	d11c      	bne.n	800172c <HAL_RCC_OscConfig+0x18c>
 80016f2:	4b46      	ldr	r3, [pc, #280]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d116      	bne.n	800172c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016fe:	4b43      	ldr	r3, [pc, #268]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d005      	beq.n	8001716 <HAL_RCC_OscConfig+0x176>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d001      	beq.n	8001716 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e1c0      	b.n	8001a98 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001716:	4b3d      	ldr	r3, [pc, #244]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	4939      	ldr	r1, [pc, #228]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 8001726:	4313      	orrs	r3, r2
 8001728:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800172a:	e03a      	b.n	80017a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d020      	beq.n	8001776 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001734:	4b36      	ldr	r3, [pc, #216]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 8001736:	2201      	movs	r2, #1
 8001738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173a:	f7fe ff77 	bl	800062c <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001742:	f7fe ff73 	bl	800062c <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e1a1      	b.n	8001a98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001754:	4b2d      	ldr	r3, [pc, #180]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0f0      	beq.n	8001742 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001760:	4b2a      	ldr	r3, [pc, #168]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	695b      	ldr	r3, [r3, #20]
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	4927      	ldr	r1, [pc, #156]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 8001770:	4313      	orrs	r3, r2
 8001772:	600b      	str	r3, [r1, #0]
 8001774:	e015      	b.n	80017a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001776:	4b26      	ldr	r3, [pc, #152]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177c:	f7fe ff56 	bl	800062c <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001784:	f7fe ff52 	bl	800062c <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e180      	b.n	8001a98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001796:	4b1d      	ldr	r3, [pc, #116]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f0      	bne.n	8001784 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d03a      	beq.n	8001824 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d019      	beq.n	80017ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017b6:	4b17      	ldr	r3, [pc, #92]	; (8001814 <HAL_RCC_OscConfig+0x274>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017bc:	f7fe ff36 	bl	800062c <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017c4:	f7fe ff32 	bl	800062c <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e160      	b.n	8001a98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d6:	4b0d      	ldr	r3, [pc, #52]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0f0      	beq.n	80017c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017e2:	2001      	movs	r0, #1
 80017e4:	f000 faba 	bl	8001d5c <RCC_Delay>
 80017e8:	e01c      	b.n	8001824 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ea:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <HAL_RCC_OscConfig+0x274>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f0:	f7fe ff1c 	bl	800062c <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f6:	e00f      	b.n	8001818 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f8:	f7fe ff18 	bl	800062c <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d908      	bls.n	8001818 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e146      	b.n	8001a98 <HAL_RCC_OscConfig+0x4f8>
 800180a:	bf00      	nop
 800180c:	40021000 	.word	0x40021000
 8001810:	42420000 	.word	0x42420000
 8001814:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001818:	4b92      	ldr	r3, [pc, #584]	; (8001a64 <HAL_RCC_OscConfig+0x4c4>)
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1e9      	bne.n	80017f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 80a6 	beq.w	800197e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001832:	2300      	movs	r3, #0
 8001834:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001836:	4b8b      	ldr	r3, [pc, #556]	; (8001a64 <HAL_RCC_OscConfig+0x4c4>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10d      	bne.n	800185e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001842:	4b88      	ldr	r3, [pc, #544]	; (8001a64 <HAL_RCC_OscConfig+0x4c4>)
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	4a87      	ldr	r2, [pc, #540]	; (8001a64 <HAL_RCC_OscConfig+0x4c4>)
 8001848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800184c:	61d3      	str	r3, [r2, #28]
 800184e:	4b85      	ldr	r3, [pc, #532]	; (8001a64 <HAL_RCC_OscConfig+0x4c4>)
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800185a:	2301      	movs	r3, #1
 800185c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800185e:	4b82      	ldr	r3, [pc, #520]	; (8001a68 <HAL_RCC_OscConfig+0x4c8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001866:	2b00      	cmp	r3, #0
 8001868:	d118      	bne.n	800189c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800186a:	4b7f      	ldr	r3, [pc, #508]	; (8001a68 <HAL_RCC_OscConfig+0x4c8>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a7e      	ldr	r2, [pc, #504]	; (8001a68 <HAL_RCC_OscConfig+0x4c8>)
 8001870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001874:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001876:	f7fe fed9 	bl	800062c <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800187e:	f7fe fed5 	bl	800062c <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b64      	cmp	r3, #100	; 0x64
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e103      	b.n	8001a98 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001890:	4b75      	ldr	r3, [pc, #468]	; (8001a68 <HAL_RCC_OscConfig+0x4c8>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0f0      	beq.n	800187e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d106      	bne.n	80018b2 <HAL_RCC_OscConfig+0x312>
 80018a4:	4b6f      	ldr	r3, [pc, #444]	; (8001a64 <HAL_RCC_OscConfig+0x4c4>)
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	4a6e      	ldr	r2, [pc, #440]	; (8001a64 <HAL_RCC_OscConfig+0x4c4>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	6213      	str	r3, [r2, #32]
 80018b0:	e02d      	b.n	800190e <HAL_RCC_OscConfig+0x36e>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d10c      	bne.n	80018d4 <HAL_RCC_OscConfig+0x334>
 80018ba:	4b6a      	ldr	r3, [pc, #424]	; (8001a64 <HAL_RCC_OscConfig+0x4c4>)
 80018bc:	6a1b      	ldr	r3, [r3, #32]
 80018be:	4a69      	ldr	r2, [pc, #420]	; (8001a64 <HAL_RCC_OscConfig+0x4c4>)
 80018c0:	f023 0301 	bic.w	r3, r3, #1
 80018c4:	6213      	str	r3, [r2, #32]
 80018c6:	4b67      	ldr	r3, [pc, #412]	; (8001a64 <HAL_RCC_OscConfig+0x4c4>)
 80018c8:	6a1b      	ldr	r3, [r3, #32]
 80018ca:	4a66      	ldr	r2, [pc, #408]	; (8001a64 <HAL_RCC_OscConfig+0x4c4>)
 80018cc:	f023 0304 	bic.w	r3, r3, #4
 80018d0:	6213      	str	r3, [r2, #32]
 80018d2:	e01c      	b.n	800190e <HAL_RCC_OscConfig+0x36e>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	2b05      	cmp	r3, #5
 80018da:	d10c      	bne.n	80018f6 <HAL_RCC_OscConfig+0x356>
 80018dc:	4b61      	ldr	r3, [pc, #388]	; (8001a64 <HAL_RCC_OscConfig+0x4c4>)
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	4a60      	ldr	r2, [pc, #384]	; (8001a64 <HAL_RCC_OscConfig+0x4c4>)
 80018e2:	f043 0304 	orr.w	r3, r3, #4
 80018e6:	6213      	str	r3, [r2, #32]
 80018e8:	4b5e      	ldr	r3, [pc, #376]	; (8001a64 <HAL_RCC_OscConfig+0x4c4>)
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	4a5d      	ldr	r2, [pc, #372]	; (8001a64 <HAL_RCC_OscConfig+0x4c4>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	6213      	str	r3, [r2, #32]
 80018f4:	e00b      	b.n	800190e <HAL_RCC_OscConfig+0x36e>
 80018f6:	4b5b      	ldr	r3, [pc, #364]	; (8001a64 <HAL_RCC_OscConfig+0x4c4>)
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	4a5a      	ldr	r2, [pc, #360]	; (8001a64 <HAL_RCC_OscConfig+0x4c4>)
 80018fc:	f023 0301 	bic.w	r3, r3, #1
 8001900:	6213      	str	r3, [r2, #32]
 8001902:	4b58      	ldr	r3, [pc, #352]	; (8001a64 <HAL_RCC_OscConfig+0x4c4>)
 8001904:	6a1b      	ldr	r3, [r3, #32]
 8001906:	4a57      	ldr	r2, [pc, #348]	; (8001a64 <HAL_RCC_OscConfig+0x4c4>)
 8001908:	f023 0304 	bic.w	r3, r3, #4
 800190c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d015      	beq.n	8001942 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001916:	f7fe fe89 	bl	800062c <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800191c:	e00a      	b.n	8001934 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800191e:	f7fe fe85 	bl	800062c <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	f241 3288 	movw	r2, #5000	; 0x1388
 800192c:	4293      	cmp	r3, r2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e0b1      	b.n	8001a98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001934:	4b4b      	ldr	r3, [pc, #300]	; (8001a64 <HAL_RCC_OscConfig+0x4c4>)
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0ee      	beq.n	800191e <HAL_RCC_OscConfig+0x37e>
 8001940:	e014      	b.n	800196c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001942:	f7fe fe73 	bl	800062c <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001948:	e00a      	b.n	8001960 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800194a:	f7fe fe6f 	bl	800062c <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	f241 3288 	movw	r2, #5000	; 0x1388
 8001958:	4293      	cmp	r3, r2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e09b      	b.n	8001a98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001960:	4b40      	ldr	r3, [pc, #256]	; (8001a64 <HAL_RCC_OscConfig+0x4c4>)
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1ee      	bne.n	800194a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800196c:	7dfb      	ldrb	r3, [r7, #23]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d105      	bne.n	800197e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001972:	4b3c      	ldr	r3, [pc, #240]	; (8001a64 <HAL_RCC_OscConfig+0x4c4>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	4a3b      	ldr	r2, [pc, #236]	; (8001a64 <HAL_RCC_OscConfig+0x4c4>)
 8001978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800197c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 8087 	beq.w	8001a96 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001988:	4b36      	ldr	r3, [pc, #216]	; (8001a64 <HAL_RCC_OscConfig+0x4c4>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 030c 	and.w	r3, r3, #12
 8001990:	2b08      	cmp	r3, #8
 8001992:	d061      	beq.n	8001a58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69db      	ldr	r3, [r3, #28]
 8001998:	2b02      	cmp	r3, #2
 800199a:	d146      	bne.n	8001a2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800199c:	4b33      	ldr	r3, [pc, #204]	; (8001a6c <HAL_RCC_OscConfig+0x4cc>)
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a2:	f7fe fe43 	bl	800062c <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019aa:	f7fe fe3f 	bl	800062c <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e06d      	b.n	8001a98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019bc:	4b29      	ldr	r3, [pc, #164]	; (8001a64 <HAL_RCC_OscConfig+0x4c4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1f0      	bne.n	80019aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d0:	d108      	bne.n	80019e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019d2:	4b24      	ldr	r3, [pc, #144]	; (8001a64 <HAL_RCC_OscConfig+0x4c4>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	4921      	ldr	r1, [pc, #132]	; (8001a64 <HAL_RCC_OscConfig+0x4c4>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019e4:	4b1f      	ldr	r3, [pc, #124]	; (8001a64 <HAL_RCC_OscConfig+0x4c4>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a19      	ldr	r1, [r3, #32]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f4:	430b      	orrs	r3, r1
 80019f6:	491b      	ldr	r1, [pc, #108]	; (8001a64 <HAL_RCC_OscConfig+0x4c4>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <HAL_RCC_OscConfig+0x4cc>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a02:	f7fe fe13 	bl	800062c <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a0a:	f7fe fe0f 	bl	800062c <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e03d      	b.n	8001a98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a1c:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <HAL_RCC_OscConfig+0x4c4>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0f0      	beq.n	8001a0a <HAL_RCC_OscConfig+0x46a>
 8001a28:	e035      	b.n	8001a96 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a2a:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <HAL_RCC_OscConfig+0x4cc>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a30:	f7fe fdfc 	bl	800062c <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a38:	f7fe fdf8 	bl	800062c <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e026      	b.n	8001a98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_RCC_OscConfig+0x4c4>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0x498>
 8001a56:	e01e      	b.n	8001a96 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d107      	bne.n	8001a70 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e019      	b.n	8001a98 <HAL_RCC_OscConfig+0x4f8>
 8001a64:	40021000 	.word	0x40021000
 8001a68:	40007000 	.word	0x40007000
 8001a6c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <HAL_RCC_OscConfig+0x500>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d106      	bne.n	8001a92 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d001      	beq.n	8001a96 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e000      	b.n	8001a98 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40021000 	.word	0x40021000

08001aa4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e0d0      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab8:	4b6a      	ldr	r3, [pc, #424]	; (8001c64 <HAL_RCC_ClockConfig+0x1c0>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d910      	bls.n	8001ae8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac6:	4b67      	ldr	r3, [pc, #412]	; (8001c64 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f023 0207 	bic.w	r2, r3, #7
 8001ace:	4965      	ldr	r1, [pc, #404]	; (8001c64 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad6:	4b63      	ldr	r3, [pc, #396]	; (8001c64 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d001      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e0b8      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d020      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d005      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b00:	4b59      	ldr	r3, [pc, #356]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	4a58      	ldr	r2, [pc, #352]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0308 	and.w	r3, r3, #8
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d005      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b18:	4b53      	ldr	r3, [pc, #332]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	4a52      	ldr	r2, [pc, #328]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b24:	4b50      	ldr	r3, [pc, #320]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	494d      	ldr	r1, [pc, #308]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d040      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d107      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4a:	4b47      	ldr	r3, [pc, #284]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d115      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e07f      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d107      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b62:	4b41      	ldr	r3, [pc, #260]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d109      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e073      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b72:	4b3d      	ldr	r3, [pc, #244]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e06b      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b82:	4b39      	ldr	r3, [pc, #228]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f023 0203 	bic.w	r2, r3, #3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	4936      	ldr	r1, [pc, #216]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b94:	f7fe fd4a 	bl	800062c <HAL_GetTick>
 8001b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9a:	e00a      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b9c:	f7fe fd46 	bl	800062c <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e053      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb2:	4b2d      	ldr	r3, [pc, #180]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 020c 	and.w	r2, r3, #12
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d1eb      	bne.n	8001b9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc4:	4b27      	ldr	r3, [pc, #156]	; (8001c64 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d210      	bcs.n	8001bf4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd2:	4b24      	ldr	r3, [pc, #144]	; (8001c64 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f023 0207 	bic.w	r2, r3, #7
 8001bda:	4922      	ldr	r1, [pc, #136]	; (8001c64 <HAL_RCC_ClockConfig+0x1c0>)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be2:	4b20      	ldr	r3, [pc, #128]	; (8001c64 <HAL_RCC_ClockConfig+0x1c0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d001      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e032      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d008      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c00:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	4916      	ldr	r1, [pc, #88]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d009      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c1e:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	490e      	ldr	r1, [pc, #56]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c32:	f000 f821 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
 8001c36:	4602      	mov	r2, r0
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	091b      	lsrs	r3, r3, #4
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	490a      	ldr	r1, [pc, #40]	; (8001c6c <HAL_RCC_ClockConfig+0x1c8>)
 8001c44:	5ccb      	ldrb	r3, [r1, r3]
 8001c46:	fa22 f303 	lsr.w	r3, r2, r3
 8001c4a:	4a09      	ldr	r2, [pc, #36]	; (8001c70 <HAL_RCC_ClockConfig+0x1cc>)
 8001c4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <HAL_RCC_ClockConfig+0x1d0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fca8 	bl	80005a8 <HAL_InitTick>

  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40022000 	.word	0x40022000
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	080020e0 	.word	0x080020e0
 8001c70:	20000000 	.word	0x20000000
 8001c74:	20000004 	.word	0x20000004

08001c78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b087      	sub	sp, #28
 8001c7c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	2300      	movs	r3, #0
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c92:	4b1e      	ldr	r3, [pc, #120]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x94>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d002      	beq.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x30>
 8001ca2:	2b08      	cmp	r3, #8
 8001ca4:	d003      	beq.n	8001cae <HAL_RCC_GetSysClockFreq+0x36>
 8001ca6:	e027      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ca8:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x98>)
 8001caa:	613b      	str	r3, [r7, #16]
      break;
 8001cac:	e027      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	0c9b      	lsrs	r3, r3, #18
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	4a17      	ldr	r2, [pc, #92]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001cb8:	5cd3      	ldrb	r3, [r2, r3]
 8001cba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d010      	beq.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cc6:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x94>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	0c5b      	lsrs	r3, r3, #17
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	4a11      	ldr	r2, [pc, #68]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cd2:	5cd3      	ldrb	r3, [r2, r3]
 8001cd4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a0d      	ldr	r2, [pc, #52]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cda:	fb03 f202 	mul.w	r2, r3, r2
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	e004      	b.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a0c      	ldr	r2, [pc, #48]	; (8001d1c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001cec:	fb02 f303 	mul.w	r3, r2, r3
 8001cf0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	613b      	str	r3, [r7, #16]
      break;
 8001cf6:	e002      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cfa:	613b      	str	r3, [r7, #16]
      break;
 8001cfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cfe:	693b      	ldr	r3, [r7, #16]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	371c      	adds	r7, #28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	007a1200 	.word	0x007a1200
 8001d14:	080020f8 	.word	0x080020f8
 8001d18:	08002108 	.word	0x08002108
 8001d1c:	003d0900 	.word	0x003d0900

08001d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d24:	4b02      	ldr	r3, [pc, #8]	; (8001d30 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d26:	681b      	ldr	r3, [r3, #0]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr
 8001d30:	20000000 	.word	0x20000000

08001d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d38:	f7ff fff2 	bl	8001d20 <HAL_RCC_GetHCLKFreq>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	0adb      	lsrs	r3, r3, #11
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	4903      	ldr	r1, [pc, #12]	; (8001d58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d4a:	5ccb      	ldrb	r3, [r1, r3]
 8001d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40021000 	.word	0x40021000
 8001d58:	080020f0 	.word	0x080020f0

08001d5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d64:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <RCC_Delay+0x34>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <RCC_Delay+0x38>)
 8001d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6e:	0a5b      	lsrs	r3, r3, #9
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	fb02 f303 	mul.w	r3, r2, r3
 8001d76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d78:	bf00      	nop
  }
  while (Delay --);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	1e5a      	subs	r2, r3, #1
 8001d7e:	60fa      	str	r2, [r7, #12]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1f9      	bne.n	8001d78 <RCC_Delay+0x1c>
}
 8001d84:	bf00      	nop
 8001d86:	bf00      	nop
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr
 8001d90:	20000000 	.word	0x20000000
 8001d94:	10624dd3 	.word	0x10624dd3

08001d98 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	2300      	movs	r3, #0
 8001da6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d07d      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001db4:	2300      	movs	r3, #0
 8001db6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001db8:	4b4f      	ldr	r3, [pc, #316]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dba:	69db      	ldr	r3, [r3, #28]
 8001dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d10d      	bne.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc4:	4b4c      	ldr	r3, [pc, #304]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	4a4b      	ldr	r2, [pc, #300]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dce:	61d3      	str	r3, [r2, #28]
 8001dd0:	4b49      	ldr	r3, [pc, #292]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dd2:	69db      	ldr	r3, [r3, #28]
 8001dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de0:	4b46      	ldr	r3, [pc, #280]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d118      	bne.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dec:	4b43      	ldr	r3, [pc, #268]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a42      	ldr	r2, [pc, #264]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001df8:	f7fe fc18 	bl	800062c <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfe:	e008      	b.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e00:	f7fe fc14 	bl	800062c <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b64      	cmp	r3, #100	; 0x64
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e06d      	b.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e12:	4b3a      	ldr	r3, [pc, #232]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0f0      	beq.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e1e:	4b36      	ldr	r3, [pc, #216]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e26:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d02e      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d027      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e3c:	4b2e      	ldr	r3, [pc, #184]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e44:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e46:	4b2e      	ldr	r3, [pc, #184]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e4c:	4b2c      	ldr	r3, [pc, #176]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e52:	4a29      	ldr	r2, [pc, #164]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d014      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e62:	f7fe fbe3 	bl	800062c <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e68:	e00a      	b.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e6a:	f7fe fbdf 	bl	800062c <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e036      	b.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e80:	4b1d      	ldr	r3, [pc, #116]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0ee      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e8c:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	4917      	ldr	r1, [pc, #92]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d105      	bne.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea4:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	4a13      	ldr	r2, [pc, #76]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d008      	beq.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ebc:	4b0e      	ldr	r3, [pc, #56]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	490b      	ldr	r1, [pc, #44]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0310 	and.w	r3, r3, #16
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d008      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001eda:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	4904      	ldr	r1, [pc, #16]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40007000 	.word	0x40007000
 8001f00:	42420440 	.word	0x42420440

08001f04 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b088      	sub	sp, #32
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	2300      	movs	r3, #0
 8001f12:	61fb      	str	r3, [r7, #28]
 8001f14:	2300      	movs	r3, #0
 8001f16:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b10      	cmp	r3, #16
 8001f24:	d00a      	beq.n	8001f3c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b10      	cmp	r3, #16
 8001f2a:	f200 808a 	bhi.w	8002042 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d045      	beq.n	8001fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d075      	beq.n	8002026 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001f3a:	e082      	b.n	8002042 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8001f3c:	4b46      	ldr	r3, [pc, #280]	; (8002058 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001f42:	4b45      	ldr	r3, [pc, #276]	; (8002058 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d07b      	beq.n	8002046 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	0c9b      	lsrs	r3, r3, #18
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	4a41      	ldr	r2, [pc, #260]	; (800205c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8001f58:	5cd3      	ldrb	r3, [r2, r3]
 8001f5a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d015      	beq.n	8001f92 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f66:	4b3c      	ldr	r3, [pc, #240]	; (8002058 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	0c5b      	lsrs	r3, r3, #17
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	4a3b      	ldr	r2, [pc, #236]	; (8002060 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8001f72:	5cd3      	ldrb	r3, [r2, r3]
 8001f74:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00d      	beq.n	8001f9c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001f80:	4a38      	ldr	r2, [pc, #224]	; (8002064 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	fb02 f303 	mul.w	r3, r2, r3
 8001f8e:	61fb      	str	r3, [r7, #28]
 8001f90:	e004      	b.n	8001f9c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	4a34      	ldr	r2, [pc, #208]	; (8002068 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8001f96:	fb02 f303 	mul.w	r3, r2, r3
 8001f9a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001f9c:	4b2e      	ldr	r3, [pc, #184]	; (8002058 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fa8:	d102      	bne.n	8001fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	61bb      	str	r3, [r7, #24]
      break;
 8001fae:	e04a      	b.n	8002046 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	4a2d      	ldr	r2, [pc, #180]	; (800206c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fba:	085b      	lsrs	r3, r3, #1
 8001fbc:	61bb      	str	r3, [r7, #24]
      break;
 8001fbe:	e042      	b.n	8002046 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8001fc0:	4b25      	ldr	r3, [pc, #148]	; (8002058 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fd0:	d108      	bne.n	8001fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8001fdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fe0:	61bb      	str	r3, [r7, #24]
 8001fe2:	e01f      	b.n	8002024 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fee:	d109      	bne.n	8002004 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8001ff0:	4b19      	ldr	r3, [pc, #100]	; (8002058 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8001ffc:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002000:	61bb      	str	r3, [r7, #24]
 8002002:	e00f      	b.n	8002024 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800200a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800200e:	d11c      	bne.n	800204a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002010:	4b11      	ldr	r3, [pc, #68]	; (8002058 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d016      	beq.n	800204a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800201c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002020:	61bb      	str	r3, [r7, #24]
      break;
 8002022:	e012      	b.n	800204a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002024:	e011      	b.n	800204a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002026:	f7ff fe85 	bl	8001d34 <HAL_RCC_GetPCLK2Freq>
 800202a:	4602      	mov	r2, r0
 800202c:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	0b9b      	lsrs	r3, r3, #14
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	3301      	adds	r3, #1
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	fbb2 f3f3 	udiv	r3, r2, r3
 800203e:	61bb      	str	r3, [r7, #24]
      break;
 8002040:	e004      	b.n	800204c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002042:	bf00      	nop
 8002044:	e002      	b.n	800204c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002046:	bf00      	nop
 8002048:	e000      	b.n	800204c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800204a:	bf00      	nop
    }
  }
  return (frequency);
 800204c:	69bb      	ldr	r3, [r7, #24]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3720      	adds	r7, #32
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40021000 	.word	0x40021000
 800205c:	0800210c 	.word	0x0800210c
 8002060:	0800211c 	.word	0x0800211c
 8002064:	007a1200 	.word	0x007a1200
 8002068:	003d0900 	.word	0x003d0900
 800206c:	aaaaaaab 	.word	0xaaaaaaab

08002070 <memset>:
 8002070:	4603      	mov	r3, r0
 8002072:	4402      	add	r2, r0
 8002074:	4293      	cmp	r3, r2
 8002076:	d100      	bne.n	800207a <memset+0xa>
 8002078:	4770      	bx	lr
 800207a:	f803 1b01 	strb.w	r1, [r3], #1
 800207e:	e7f9      	b.n	8002074 <memset+0x4>

08002080 <__libc_init_array>:
 8002080:	b570      	push	{r4, r5, r6, lr}
 8002082:	2600      	movs	r6, #0
 8002084:	4d0c      	ldr	r5, [pc, #48]	; (80020b8 <__libc_init_array+0x38>)
 8002086:	4c0d      	ldr	r4, [pc, #52]	; (80020bc <__libc_init_array+0x3c>)
 8002088:	1b64      	subs	r4, r4, r5
 800208a:	10a4      	asrs	r4, r4, #2
 800208c:	42a6      	cmp	r6, r4
 800208e:	d109      	bne.n	80020a4 <__libc_init_array+0x24>
 8002090:	f000 f81a 	bl	80020c8 <_init>
 8002094:	2600      	movs	r6, #0
 8002096:	4d0a      	ldr	r5, [pc, #40]	; (80020c0 <__libc_init_array+0x40>)
 8002098:	4c0a      	ldr	r4, [pc, #40]	; (80020c4 <__libc_init_array+0x44>)
 800209a:	1b64      	subs	r4, r4, r5
 800209c:	10a4      	asrs	r4, r4, #2
 800209e:	42a6      	cmp	r6, r4
 80020a0:	d105      	bne.n	80020ae <__libc_init_array+0x2e>
 80020a2:	bd70      	pop	{r4, r5, r6, pc}
 80020a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80020a8:	4798      	blx	r3
 80020aa:	3601      	adds	r6, #1
 80020ac:	e7ee      	b.n	800208c <__libc_init_array+0xc>
 80020ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80020b2:	4798      	blx	r3
 80020b4:	3601      	adds	r6, #1
 80020b6:	e7f2      	b.n	800209e <__libc_init_array+0x1e>
 80020b8:	08002120 	.word	0x08002120
 80020bc:	08002120 	.word	0x08002120
 80020c0:	08002120 	.word	0x08002120
 80020c4:	08002124 	.word	0x08002124

080020c8 <_init>:
 80020c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ca:	bf00      	nop
 80020cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ce:	bc08      	pop	{r3}
 80020d0:	469e      	mov	lr, r3
 80020d2:	4770      	bx	lr

080020d4 <_fini>:
 80020d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020d6:	bf00      	nop
 80020d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020da:	bc08      	pop	{r3}
 80020dc:	469e      	mov	lr, r3
 80020de:	4770      	bx	lr
