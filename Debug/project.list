
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003da4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000de0  08003eb0  08003eb0  00013eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c90  08004c90  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08004c90  08004c90  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c90  08004c90  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c90  08004c90  00014c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c94  08004c94  00014c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004c98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000650  20000068  08004d00  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b8  08004d00  000206b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cc87  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002209  00000000  00000000  0002cd5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba0  00000000  00000000  0002ef68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000905  00000000  00000000  0002fb08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017a61  00000000  00000000  0003040d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f9de  00000000  00000000  00047e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a1aa  00000000  00000000  0005784c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003490  00000000  00000000  000e19f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000e4e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003e98 	.word	0x08003e98

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003e98 	.word	0x08003e98

0800014c <Relay_SetState>:
static void MX_ADC1_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */
// Функция для управления реле
	void Relay_SetState(GPIO_PinState state) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, state);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	461a      	mov	r2, r3
 800015a:	2108      	movs	r1, #8
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <Relay_SetState+0x20>)
 800015e:	f001 fd85 	bl	8001c6c <HAL_GPIO_WritePin>
	}
 8000162:	bf00      	nop
 8000164:	3708      	adds	r7, #8
 8000166:	46bd      	mov	sp, r7
 8000168:	bd80      	pop	{r7, pc}
 800016a:	bf00      	nop
 800016c:	40010c00 	.word	0x40010c00

08000170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000176:	f000 fd7f 	bl	8000c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800017a:	f000 f861 	bl	8000240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800017e:	f000 f945 	bl	800040c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000182:	f000 f8ad 	bl	80002e0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000186:	f000 f917 	bl	80003b8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800018a:	f000 f8e7 	bl	800035c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 800018e:	4825      	ldr	r0, [pc, #148]	; (8000224 <main+0xb4>)
 8000190:	f001 fa22 	bl	80015d8 <HAL_ADCEx_Calibration_Start>
  ssd1306_Init();
 8000194:	f000 fb72 	bl	800087c <ssd1306_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_ADC_Start_IT(&hadc1);
 8000198:	4822      	ldr	r0, [pc, #136]	; (8000224 <main+0xb4>)
 800019a:	f000 fecb 	bl	8000f34 <HAL_ADC_Start_IT>
	  //HAL_ADC_ADCStart(&hadc1);
	 // HAL_ADC_PollForConversion(&hadc1, 10);
	 // ValueFrmSoil=HAL_ADC_GetValue(&hadc1);
	  //HAL_ADC_Stop(&hadc1);
	 if(ValueFrmSoil >= 1750){
 800019e:	4b22      	ldr	r3, [pc, #136]	; (8000228 <main+0xb8>)
 80001a0:	881b      	ldrh	r3, [r3, #0]
 80001a2:	f240 62d5 	movw	r2, #1749	; 0x6d5
 80001a6:	4293      	cmp	r3, r2
 80001a8:	d903      	bls.n	80001b2 <main+0x42>
		  Relay_SetState(GPIO_PIN_RESET);
 80001aa:	2000      	movs	r0, #0
 80001ac:	f7ff ffce 	bl	800014c <Relay_SetState>
 80001b0:	e00d      	b.n	80001ce <main+0x5e>

      	  }else if(ValueFrmSoil >= 1000 && ValueFrmSoil <=1300)Relay_SetState(GPIO_PIN_SET);
 80001b2:	4b1d      	ldr	r3, [pc, #116]	; (8000228 <main+0xb8>)
 80001b4:	881b      	ldrh	r3, [r3, #0]
 80001b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80001ba:	d308      	bcc.n	80001ce <main+0x5e>
 80001bc:	4b1a      	ldr	r3, [pc, #104]	; (8000228 <main+0xb8>)
 80001be:	881b      	ldrh	r3, [r3, #0]
 80001c0:	f240 5214 	movw	r2, #1300	; 0x514
 80001c4:	4293      	cmp	r3, r2
 80001c6:	d802      	bhi.n	80001ce <main+0x5e>
 80001c8:	2001      	movs	r0, #1
 80001ca:	f7ff ffbf 	bl	800014c <Relay_SetState>
	 ssd1306_SetCursor(5, 5);//ToDo Запхати все у функцыю ы додати ще щось
 80001ce:	2105      	movs	r1, #5
 80001d0:	2005      	movs	r0, #5
 80001d2:	f000 fd07 	bl	8000be4 <ssd1306_SetCursor>
	 ssd1306_WriteString(moisture, Font_11x18, White);
 80001d6:	4b15      	ldr	r3, [pc, #84]	; (800022c <main+0xbc>)
 80001d8:	2201      	movs	r2, #1
 80001da:	9200      	str	r2, [sp, #0]
 80001dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80001de:	4814      	ldr	r0, [pc, #80]	; (8000230 <main+0xc0>)
 80001e0:	f000 fcda 	bl	8000b98 <ssd1306_WriteString>
	 ssd1306_SetCursor(40, 25);
 80001e4:	2119      	movs	r1, #25
 80001e6:	2028      	movs	r0, #40	; 0x28
 80001e8:	f000 fcfc 	bl	8000be4 <ssd1306_SetCursor>
	ssd1306_WriteString(strData, Font_11x18, White);
 80001ec:	4b0f      	ldr	r3, [pc, #60]	; (800022c <main+0xbc>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	9200      	str	r2, [sp, #0]
 80001f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80001f4:	480f      	ldr	r0, [pc, #60]	; (8000234 <main+0xc4>)
 80001f6:	f000 fccf 	bl	8000b98 <ssd1306_WriteString>
	 ssd1306_UpdateScreen();
 80001fa:	f000 fbc1 	bl	8000980 <ssd1306_UpdateScreen>

	 sprintf(strData, "%d", ValueFrmSoil);
 80001fe:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <main+0xb8>)
 8000200:	881b      	ldrh	r3, [r3, #0]
 8000202:	461a      	mov	r2, r3
 8000204:	490c      	ldr	r1, [pc, #48]	; (8000238 <main+0xc8>)
 8000206:	480b      	ldr	r0, [pc, #44]	; (8000234 <main+0xc4>)
 8000208:	f003 f994 	bl	8003534 <siprintf>
	 HAL_UART_Transmit(&huart2, (uint8_t*)strData, sizeof((uint8_t*)strData), HAL_MAX_DELAY);
 800020c:	f04f 33ff 	mov.w	r3, #4294967295
 8000210:	2204      	movs	r2, #4
 8000212:	4908      	ldr	r1, [pc, #32]	; (8000234 <main+0xc4>)
 8000214:	4809      	ldr	r0, [pc, #36]	; (800023c <main+0xcc>)
 8000216:	f002 ffb9 	bl	800318c <HAL_UART_Transmit>
	  HAL_Delay(1000);
 800021a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800021e:	f000 fd8d 	bl	8000d3c <HAL_Delay>
  {
 8000222:	e7b9      	b.n	8000198 <main+0x28>
 8000224:	20000084 	.word	0x20000084
 8000228:	20000150 	.word	0x20000150
 800022c:	08004c28 	.word	0x08004c28
 8000230:	20000000 	.word	0x20000000
 8000234:	20000154 	.word	0x20000154
 8000238:	08003eb0 	.word	0x08003eb0
 800023c:	20000108 	.word	0x20000108

08000240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b094      	sub	sp, #80	; 0x50
 8000244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000246:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800024a:	2228      	movs	r2, #40	; 0x28
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f003 f990 	bl	8003574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000254:	f107 0314 	add.w	r3, r7, #20
 8000258:	2200      	movs	r2, #0
 800025a:	601a      	str	r2, [r3, #0]
 800025c:	605a      	str	r2, [r3, #4]
 800025e:	609a      	str	r2, [r3, #8]
 8000260:	60da      	str	r2, [r3, #12]
 8000262:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	605a      	str	r2, [r3, #4]
 800026c:	609a      	str	r2, [r3, #8]
 800026e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000270:	2302      	movs	r3, #2
 8000272:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000274:	2301      	movs	r3, #1
 8000276:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000278:	2310      	movs	r3, #16
 800027a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800027c:	2300      	movs	r3, #0
 800027e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000280:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000284:	4618      	mov	r0, r3
 8000286:	f002 f9b5 	bl	80025f4 <HAL_RCC_OscConfig>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000290:	f000 f924 	bl	80004dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000294:	230f      	movs	r3, #15
 8000296:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000298:	2300      	movs	r3, #0
 800029a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002a8:	f107 0314 	add.w	r3, r7, #20
 80002ac:	2100      	movs	r1, #0
 80002ae:	4618      	mov	r0, r3
 80002b0:	f002 fc22 	bl	8002af8 <HAL_RCC_ClockConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80002ba:	f000 f90f 	bl	80004dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002be:	2302      	movs	r3, #2
 80002c0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80002c2:	2300      	movs	r3, #0
 80002c4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	4618      	mov	r0, r3
 80002ca:	f002 fda3 	bl	8002e14 <HAL_RCCEx_PeriphCLKConfig>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80002d4:	f000 f902 	bl	80004dc <Error_Handler>
  }
}
 80002d8:	bf00      	nop
 80002da:	3750      	adds	r7, #80	; 0x50
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}

080002e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	605a      	str	r2, [r3, #4]
 80002ee:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002f0:	4b18      	ldr	r3, [pc, #96]	; (8000354 <MX_ADC1_Init+0x74>)
 80002f2:	4a19      	ldr	r2, [pc, #100]	; (8000358 <MX_ADC1_Init+0x78>)
 80002f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002f6:	4b17      	ldr	r3, [pc, #92]	; (8000354 <MX_ADC1_Init+0x74>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002fc:	4b15      	ldr	r3, [pc, #84]	; (8000354 <MX_ADC1_Init+0x74>)
 80002fe:	2200      	movs	r2, #0
 8000300:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000302:	4b14      	ldr	r3, [pc, #80]	; (8000354 <MX_ADC1_Init+0x74>)
 8000304:	2200      	movs	r2, #0
 8000306:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000308:	4b12      	ldr	r3, [pc, #72]	; (8000354 <MX_ADC1_Init+0x74>)
 800030a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800030e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000310:	4b10      	ldr	r3, [pc, #64]	; (8000354 <MX_ADC1_Init+0x74>)
 8000312:	2200      	movs	r2, #0
 8000314:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000316:	4b0f      	ldr	r3, [pc, #60]	; (8000354 <MX_ADC1_Init+0x74>)
 8000318:	2201      	movs	r2, #1
 800031a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800031c:	480d      	ldr	r0, [pc, #52]	; (8000354 <MX_ADC1_Init+0x74>)
 800031e:	f000 fd31 	bl	8000d84 <HAL_ADC_Init>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000328:	f000 f8d8 	bl	80004dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800032c:	2301      	movs	r3, #1
 800032e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000330:	2301      	movs	r3, #1
 8000332:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000334:	2300      	movs	r3, #0
 8000336:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	4619      	mov	r1, r3
 800033c:	4805      	ldr	r0, [pc, #20]	; (8000354 <MX_ADC1_Init+0x74>)
 800033e:	f000 ffb7 	bl	80012b0 <HAL_ADC_ConfigChannel>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000348:	f000 f8c8 	bl	80004dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800034c:	bf00      	nop
 800034e:	3710      	adds	r7, #16
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	20000084 	.word	0x20000084
 8000358:	40012400 	.word	0x40012400

0800035c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000360:	4b12      	ldr	r3, [pc, #72]	; (80003ac <MX_I2C1_Init+0x50>)
 8000362:	4a13      	ldr	r2, [pc, #76]	; (80003b0 <MX_I2C1_Init+0x54>)
 8000364:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000366:	4b11      	ldr	r3, [pc, #68]	; (80003ac <MX_I2C1_Init+0x50>)
 8000368:	4a12      	ldr	r2, [pc, #72]	; (80003b4 <MX_I2C1_Init+0x58>)
 800036a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800036c:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <MX_I2C1_Init+0x50>)
 800036e:	2200      	movs	r2, #0
 8000370:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000372:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <MX_I2C1_Init+0x50>)
 8000374:	2200      	movs	r2, #0
 8000376:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000378:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <MX_I2C1_Init+0x50>)
 800037a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800037e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000380:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <MX_I2C1_Init+0x50>)
 8000382:	2200      	movs	r2, #0
 8000384:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000386:	4b09      	ldr	r3, [pc, #36]	; (80003ac <MX_I2C1_Init+0x50>)
 8000388:	2200      	movs	r2, #0
 800038a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800038c:	4b07      	ldr	r3, [pc, #28]	; (80003ac <MX_I2C1_Init+0x50>)
 800038e:	2200      	movs	r2, #0
 8000390:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000392:	4b06      	ldr	r3, [pc, #24]	; (80003ac <MX_I2C1_Init+0x50>)
 8000394:	2200      	movs	r2, #0
 8000396:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000398:	4804      	ldr	r0, [pc, #16]	; (80003ac <MX_I2C1_Init+0x50>)
 800039a:	f001 fc7f 	bl	8001c9c <HAL_I2C_Init>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003a4:	f000 f89a 	bl	80004dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003a8:	bf00      	nop
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	200000b4 	.word	0x200000b4
 80003b0:	40005400 	.word	0x40005400
 80003b4:	000186a0 	.word	0x000186a0

080003b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <MX_USART2_UART_Init+0x4c>)
 80003be:	4a12      	ldr	r2, [pc, #72]	; (8000408 <MX_USART2_UART_Init+0x50>)
 80003c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003c2:	4b10      	ldr	r3, [pc, #64]	; (8000404 <MX_USART2_UART_Init+0x4c>)
 80003c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003ca:	4b0e      	ldr	r3, [pc, #56]	; (8000404 <MX_USART2_UART_Init+0x4c>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003d0:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <MX_USART2_UART_Init+0x4c>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003d6:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <MX_USART2_UART_Init+0x4c>)
 80003d8:	2200      	movs	r2, #0
 80003da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003dc:	4b09      	ldr	r3, [pc, #36]	; (8000404 <MX_USART2_UART_Init+0x4c>)
 80003de:	220c      	movs	r2, #12
 80003e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003e2:	4b08      	ldr	r3, [pc, #32]	; (8000404 <MX_USART2_UART_Init+0x4c>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <MX_USART2_UART_Init+0x4c>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003ee:	4805      	ldr	r0, [pc, #20]	; (8000404 <MX_USART2_UART_Init+0x4c>)
 80003f0:	f002 fe7c 	bl	80030ec <HAL_UART_Init>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003fa:	f000 f86f 	bl	80004dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	20000108 	.word	0x20000108
 8000408:	40004400 	.word	0x40004400

0800040c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b088      	sub	sp, #32
 8000410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000412:	f107 0310 	add.w	r3, r7, #16
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	605a      	str	r2, [r3, #4]
 800041c:	609a      	str	r2, [r3, #8]
 800041e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000420:	4b1d      	ldr	r3, [pc, #116]	; (8000498 <MX_GPIO_Init+0x8c>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a1c      	ldr	r2, [pc, #112]	; (8000498 <MX_GPIO_Init+0x8c>)
 8000426:	f043 0320 	orr.w	r3, r3, #32
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b1a      	ldr	r3, [pc, #104]	; (8000498 <MX_GPIO_Init+0x8c>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f003 0320 	and.w	r3, r3, #32
 8000434:	60fb      	str	r3, [r7, #12]
 8000436:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000438:	4b17      	ldr	r3, [pc, #92]	; (8000498 <MX_GPIO_Init+0x8c>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a16      	ldr	r2, [pc, #88]	; (8000498 <MX_GPIO_Init+0x8c>)
 800043e:	f043 0304 	orr.w	r3, r3, #4
 8000442:	6193      	str	r3, [r2, #24]
 8000444:	4b14      	ldr	r3, [pc, #80]	; (8000498 <MX_GPIO_Init+0x8c>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	f003 0304 	and.w	r3, r3, #4
 800044c:	60bb      	str	r3, [r7, #8]
 800044e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000450:	4b11      	ldr	r3, [pc, #68]	; (8000498 <MX_GPIO_Init+0x8c>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a10      	ldr	r2, [pc, #64]	; (8000498 <MX_GPIO_Init+0x8c>)
 8000456:	f043 0308 	orr.w	r3, r3, #8
 800045a:	6193      	str	r3, [r2, #24]
 800045c:	4b0e      	ldr	r3, [pc, #56]	; (8000498 <MX_GPIO_Init+0x8c>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f003 0308 	and.w	r3, r3, #8
 8000464:	607b      	str	r3, [r7, #4]
 8000466:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000468:	2201      	movs	r2, #1
 800046a:	2108      	movs	r1, #8
 800046c:	480b      	ldr	r0, [pc, #44]	; (800049c <MX_GPIO_Init+0x90>)
 800046e:	f001 fbfd 	bl	8001c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000472:	2308      	movs	r3, #8
 8000474:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000476:	2311      	movs	r3, #17
 8000478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800047a:	2301      	movs	r3, #1
 800047c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047e:	2302      	movs	r3, #2
 8000480:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000482:	f107 0310 	add.w	r3, r7, #16
 8000486:	4619      	mov	r1, r3
 8000488:	4804      	ldr	r0, [pc, #16]	; (800049c <MX_GPIO_Init+0x90>)
 800048a:	f001 fa6b 	bl	8001964 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800048e:	bf00      	nop
 8000490:	3720      	adds	r7, #32
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40021000 	.word	0x40021000
 800049c:	40010c00 	.word	0x40010c00

080004a0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void  HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef*hadc){
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
	if(hadc->Instance==ADC1){
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a08      	ldr	r2, [pc, #32]	; (80004d0 <HAL_ADC_ConvCpltCallback+0x30>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d109      	bne.n	80004c6 <HAL_ADC_ConvCpltCallback+0x26>
		ValueFrmSoil=HAL_ADC_GetValue(&hadc1);
 80004b2:	4808      	ldr	r0, [pc, #32]	; (80004d4 <HAL_ADC_ConvCpltCallback+0x34>)
 80004b4:	f000 fe28 	bl	8001108 <HAL_ADC_GetValue>
 80004b8:	4603      	mov	r3, r0
 80004ba:	b29a      	uxth	r2, r3
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <HAL_ADC_ConvCpltCallback+0x38>)
 80004be:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop_IT(&hadc1);
 80004c0:	4804      	ldr	r0, [pc, #16]	; (80004d4 <HAL_ADC_ConvCpltCallback+0x34>)
 80004c2:	f000 fded 	bl	80010a0 <HAL_ADC_Stop_IT>
	}

}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40012400 	.word	0x40012400
 80004d4:	20000084 	.word	0x20000084
 80004d8:	20000150 	.word	0x20000150

080004dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e0:	b672      	cpsid	i
}
 80004e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <Error_Handler+0x8>
	...

080004e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ee:	4b15      	ldr	r3, [pc, #84]	; (8000544 <HAL_MspInit+0x5c>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	4a14      	ldr	r2, [pc, #80]	; (8000544 <HAL_MspInit+0x5c>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	6193      	str	r3, [r2, #24]
 80004fa:	4b12      	ldr	r3, [pc, #72]	; (8000544 <HAL_MspInit+0x5c>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000506:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <HAL_MspInit+0x5c>)
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	4a0e      	ldr	r2, [pc, #56]	; (8000544 <HAL_MspInit+0x5c>)
 800050c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000510:	61d3      	str	r3, [r2, #28]
 8000512:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <HAL_MspInit+0x5c>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800051e:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <HAL_MspInit+0x60>)
 8000520:	685b      	ldr	r3, [r3, #4]
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	4a04      	ldr	r2, [pc, #16]	; (8000548 <HAL_MspInit+0x60>)
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr
 8000544:	40021000 	.word	0x40021000
 8000548:	40010000 	.word	0x40010000

0800054c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b088      	sub	sp, #32
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000554:	f107 0310 	add.w	r3, r7, #16
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a18      	ldr	r2, [pc, #96]	; (80005c8 <HAL_ADC_MspInit+0x7c>)
 8000568:	4293      	cmp	r3, r2
 800056a:	d129      	bne.n	80005c0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <HAL_ADC_MspInit+0x80>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	4a16      	ldr	r2, [pc, #88]	; (80005cc <HAL_ADC_MspInit+0x80>)
 8000572:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000576:	6193      	str	r3, [r2, #24]
 8000578:	4b14      	ldr	r3, [pc, #80]	; (80005cc <HAL_ADC_MspInit+0x80>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000584:	4b11      	ldr	r3, [pc, #68]	; (80005cc <HAL_ADC_MspInit+0x80>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a10      	ldr	r2, [pc, #64]	; (80005cc <HAL_ADC_MspInit+0x80>)
 800058a:	f043 0304 	orr.w	r3, r3, #4
 800058e:	6193      	str	r3, [r2, #24]
 8000590:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <HAL_ADC_MspInit+0x80>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f003 0304 	and.w	r3, r3, #4
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800059c:	2302      	movs	r3, #2
 800059e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005a0:	2303      	movs	r3, #3
 80005a2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a4:	f107 0310 	add.w	r3, r7, #16
 80005a8:	4619      	mov	r1, r3
 80005aa:	4809      	ldr	r0, [pc, #36]	; (80005d0 <HAL_ADC_MspInit+0x84>)
 80005ac:	f001 f9da 	bl	8001964 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2100      	movs	r1, #0
 80005b4:	2012      	movs	r0, #18
 80005b6:	f001 f99e 	bl	80018f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80005ba:	2012      	movs	r0, #18
 80005bc:	f001 f9b7 	bl	800192e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80005c0:	bf00      	nop
 80005c2:	3720      	adds	r7, #32
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40012400 	.word	0x40012400
 80005cc:	40021000 	.word	0x40021000
 80005d0:	40010800 	.word	0x40010800

080005d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005dc:	f107 0310 	add.w	r3, r7, #16
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a15      	ldr	r2, [pc, #84]	; (8000644 <HAL_I2C_MspInit+0x70>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d123      	bne.n	800063c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f4:	4b14      	ldr	r3, [pc, #80]	; (8000648 <HAL_I2C_MspInit+0x74>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a13      	ldr	r2, [pc, #76]	; (8000648 <HAL_I2C_MspInit+0x74>)
 80005fa:	f043 0308 	orr.w	r3, r3, #8
 80005fe:	6193      	str	r3, [r2, #24]
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <HAL_I2C_MspInit+0x74>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	f003 0308 	and.w	r3, r3, #8
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800060c:	23c0      	movs	r3, #192	; 0xc0
 800060e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000610:	2312      	movs	r3, #18
 8000612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000614:	2303      	movs	r3, #3
 8000616:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000618:	f107 0310 	add.w	r3, r7, #16
 800061c:	4619      	mov	r1, r3
 800061e:	480b      	ldr	r0, [pc, #44]	; (800064c <HAL_I2C_MspInit+0x78>)
 8000620:	f001 f9a0 	bl	8001964 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <HAL_I2C_MspInit+0x74>)
 8000626:	69db      	ldr	r3, [r3, #28]
 8000628:	4a07      	ldr	r2, [pc, #28]	; (8000648 <HAL_I2C_MspInit+0x74>)
 800062a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800062e:	61d3      	str	r3, [r2, #28]
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <HAL_I2C_MspInit+0x74>)
 8000632:	69db      	ldr	r3, [r3, #28]
 8000634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800063c:	bf00      	nop
 800063e:	3720      	adds	r7, #32
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40005400 	.word	0x40005400
 8000648:	40021000 	.word	0x40021000
 800064c:	40010c00 	.word	0x40010c00

08000650 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	f107 0310 	add.w	r3, r7, #16
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a1b      	ldr	r2, [pc, #108]	; (80006d8 <HAL_UART_MspInit+0x88>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d12f      	bne.n	80006d0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <HAL_UART_MspInit+0x8c>)
 8000672:	69db      	ldr	r3, [r3, #28]
 8000674:	4a19      	ldr	r2, [pc, #100]	; (80006dc <HAL_UART_MspInit+0x8c>)
 8000676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800067a:	61d3      	str	r3, [r2, #28]
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <HAL_UART_MspInit+0x8c>)
 800067e:	69db      	ldr	r3, [r3, #28]
 8000680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <HAL_UART_MspInit+0x8c>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <HAL_UART_MspInit+0x8c>)
 800068e:	f043 0304 	orr.w	r3, r3, #4
 8000692:	6193      	str	r3, [r2, #24]
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <HAL_UART_MspInit+0x8c>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f003 0304 	and.w	r3, r3, #4
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006a0:	2304      	movs	r3, #4
 80006a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a4:	2302      	movs	r3, #2
 80006a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a8:	2303      	movs	r3, #3
 80006aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	4619      	mov	r1, r3
 80006b2:	480b      	ldr	r0, [pc, #44]	; (80006e0 <HAL_UART_MspInit+0x90>)
 80006b4:	f001 f956 	bl	8001964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006b8:	2308      	movs	r3, #8
 80006ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	4619      	mov	r1, r3
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <HAL_UART_MspInit+0x90>)
 80006cc:	f001 f94a 	bl	8001964 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006d0:	bf00      	nop
 80006d2:	3720      	adds	r7, #32
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40004400 	.word	0x40004400
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40010800 	.word	0x40010800

080006e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006e8:	e7fe      	b.n	80006e8 <NMI_Handler+0x4>

080006ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ee:	e7fe      	b.n	80006ee <HardFault_Handler+0x4>

080006f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <MemManage_Handler+0x4>

080006f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006fa:	e7fe      	b.n	80006fa <BusFault_Handler+0x4>

080006fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <UsageFault_Handler+0x4>

08000702 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr

0800070e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr

0800071a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr

08000726 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800072a:	f000 faeb 	bl	8000d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000738:	4802      	ldr	r0, [pc, #8]	; (8000744 <ADC1_2_IRQHandler+0x10>)
 800073a:	f000 fcf1 	bl	8001120 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000084 	.word	0x20000084

08000748 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000750:	4a14      	ldr	r2, [pc, #80]	; (80007a4 <_sbrk+0x5c>)
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <_sbrk+0x60>)
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800075c:	4b13      	ldr	r3, [pc, #76]	; (80007ac <_sbrk+0x64>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d102      	bne.n	800076a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <_sbrk+0x64>)
 8000766:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <_sbrk+0x68>)
 8000768:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <_sbrk+0x64>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4413      	add	r3, r2
 8000772:	693a      	ldr	r2, [r7, #16]
 8000774:	429a      	cmp	r2, r3
 8000776:	d207      	bcs.n	8000788 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000778:	f002 ff04 	bl	8003584 <__errno>
 800077c:	4603      	mov	r3, r0
 800077e:	220c      	movs	r2, #12
 8000780:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000782:	f04f 33ff 	mov.w	r3, #4294967295
 8000786:	e009      	b.n	800079c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000788:	4b08      	ldr	r3, [pc, #32]	; (80007ac <_sbrk+0x64>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800078e:	4b07      	ldr	r3, [pc, #28]	; (80007ac <_sbrk+0x64>)
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4413      	add	r3, r2
 8000796:	4a05      	ldr	r2, [pc, #20]	; (80007ac <_sbrk+0x64>)
 8000798:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800079a:	68fb      	ldr	r3, [r7, #12]
}
 800079c:	4618      	mov	r0, r3
 800079e:	3718      	adds	r7, #24
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20005000 	.word	0x20005000
 80007a8:	00000400 	.word	0x00000400
 80007ac:	20000160 	.word	0x20000160
 80007b0:	200006b8 	.word	0x200006b8

080007b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr

080007c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007c0:	f7ff fff8 	bl	80007b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c4:	480b      	ldr	r0, [pc, #44]	; (80007f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007c6:	490c      	ldr	r1, [pc, #48]	; (80007f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007c8:	4a0c      	ldr	r2, [pc, #48]	; (80007fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80007ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007cc:	e002      	b.n	80007d4 <LoopCopyDataInit>

080007ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007d2:	3304      	adds	r3, #4

080007d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d8:	d3f9      	bcc.n	80007ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007da:	4a09      	ldr	r2, [pc, #36]	; (8000800 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007dc:	4c09      	ldr	r4, [pc, #36]	; (8000804 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e0:	e001      	b.n	80007e6 <LoopFillZerobss>

080007e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e4:	3204      	adds	r2, #4

080007e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e8:	d3fb      	bcc.n	80007e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ea:	f002 fed1 	bl	8003590 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ee:	f7ff fcbf 	bl	8000170 <main>
  bx lr
 80007f2:	4770      	bx	lr
  ldr r0, =_sdata
 80007f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80007fc:	08004c98 	.word	0x08004c98
  ldr r2, =_sbss
 8000800:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000804:	200006b8 	.word	0x200006b8

08000808 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000808:	e7fe      	b.n	8000808 <CAN1_RX1_IRQHandler>

0800080a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr
	...

08000818 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af04      	add	r7, sp, #16
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
 8000826:	9302      	str	r3, [sp, #8]
 8000828:	2301      	movs	r3, #1
 800082a:	9301      	str	r3, [sp, #4]
 800082c:	1dfb      	adds	r3, r7, #7
 800082e:	9300      	str	r3, [sp, #0]
 8000830:	2301      	movs	r3, #1
 8000832:	2200      	movs	r2, #0
 8000834:	2178      	movs	r1, #120	; 0x78
 8000836:	4803      	ldr	r0, [pc, #12]	; (8000844 <ssd1306_WriteCommand+0x2c>)
 8000838:	f001 fb74 	bl	8001f24 <HAL_I2C_Mem_Write>
}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200000b4 	.word	0x200000b4

08000848 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af04      	add	r7, sp, #16
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	b29b      	uxth	r3, r3
 8000856:	f04f 32ff 	mov.w	r2, #4294967295
 800085a:	9202      	str	r2, [sp, #8]
 800085c:	9301      	str	r3, [sp, #4]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	9300      	str	r3, [sp, #0]
 8000862:	2301      	movs	r3, #1
 8000864:	2240      	movs	r2, #64	; 0x40
 8000866:	2178      	movs	r1, #120	; 0x78
 8000868:	4803      	ldr	r0, [pc, #12]	; (8000878 <ssd1306_WriteData+0x30>)
 800086a:	f001 fb5b 	bl	8001f24 <HAL_I2C_Mem_Write>
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200000b4 	.word	0x200000b4

0800087c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000880:	f7ff ffc3 	bl	800080a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000884:	2064      	movs	r0, #100	; 0x64
 8000886:	f000 fa59 	bl	8000d3c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800088a:	2000      	movs	r0, #0
 800088c:	f000 f9d6 	bl	8000c3c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000890:	2020      	movs	r0, #32
 8000892:	f7ff ffc1 	bl	8000818 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000896:	2000      	movs	r0, #0
 8000898:	f7ff ffbe 	bl	8000818 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800089c:	20b0      	movs	r0, #176	; 0xb0
 800089e:	f7ff ffbb 	bl	8000818 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80008a2:	20c8      	movs	r0, #200	; 0xc8
 80008a4:	f7ff ffb8 	bl	8000818 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80008a8:	2000      	movs	r0, #0
 80008aa:	f7ff ffb5 	bl	8000818 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80008ae:	2010      	movs	r0, #16
 80008b0:	f7ff ffb2 	bl	8000818 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80008b4:	2040      	movs	r0, #64	; 0x40
 80008b6:	f7ff ffaf 	bl	8000818 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80008ba:	20ff      	movs	r0, #255	; 0xff
 80008bc:	f000 f9aa 	bl	8000c14 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80008c0:	20a1      	movs	r0, #161	; 0xa1
 80008c2:	f7ff ffa9 	bl	8000818 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80008c6:	20a6      	movs	r0, #166	; 0xa6
 80008c8:	f7ff ffa6 	bl	8000818 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80008cc:	20a8      	movs	r0, #168	; 0xa8
 80008ce:	f7ff ffa3 	bl	8000818 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80008d2:	203f      	movs	r0, #63	; 0x3f
 80008d4:	f7ff ffa0 	bl	8000818 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80008d8:	20a4      	movs	r0, #164	; 0xa4
 80008da:	f7ff ff9d 	bl	8000818 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80008de:	20d3      	movs	r0, #211	; 0xd3
 80008e0:	f7ff ff9a 	bl	8000818 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff ff97 	bl	8000818 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80008ea:	20d5      	movs	r0, #213	; 0xd5
 80008ec:	f7ff ff94 	bl	8000818 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80008f0:	20f0      	movs	r0, #240	; 0xf0
 80008f2:	f7ff ff91 	bl	8000818 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80008f6:	20d9      	movs	r0, #217	; 0xd9
 80008f8:	f7ff ff8e 	bl	8000818 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80008fc:	2022      	movs	r0, #34	; 0x22
 80008fe:	f7ff ff8b 	bl	8000818 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000902:	20da      	movs	r0, #218	; 0xda
 8000904:	f7ff ff88 	bl	8000818 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000908:	2012      	movs	r0, #18
 800090a:	f7ff ff85 	bl	8000818 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800090e:	20db      	movs	r0, #219	; 0xdb
 8000910:	f7ff ff82 	bl	8000818 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000914:	2020      	movs	r0, #32
 8000916:	f7ff ff7f 	bl	8000818 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800091a:	208d      	movs	r0, #141	; 0x8d
 800091c:	f7ff ff7c 	bl	8000818 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000920:	2014      	movs	r0, #20
 8000922:	f7ff ff79 	bl	8000818 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000926:	2001      	movs	r0, #1
 8000928:	f000 f988 	bl	8000c3c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800092c:	2000      	movs	r0, #0
 800092e:	f000 f80f 	bl	8000950 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000932:	f000 f825 	bl	8000980 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000936:	4b05      	ldr	r3, [pc, #20]	; (800094c <ssd1306_Init+0xd0>)
 8000938:	2200      	movs	r2, #0
 800093a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800093c:	4b03      	ldr	r3, [pc, #12]	; (800094c <ssd1306_Init+0xd0>)
 800093e:	2200      	movs	r2, #0
 8000940:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000942:	4b02      	ldr	r3, [pc, #8]	; (800094c <ssd1306_Init+0xd0>)
 8000944:	2201      	movs	r2, #1
 8000946:	711a      	strb	r2, [r3, #4]
}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000564 	.word	0x20000564

08000950 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d101      	bne.n	8000964 <ssd1306_Fill+0x14>
 8000960:	2300      	movs	r3, #0
 8000962:	e000      	b.n	8000966 <ssd1306_Fill+0x16>
 8000964:	23ff      	movs	r3, #255	; 0xff
 8000966:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800096a:	4619      	mov	r1, r3
 800096c:	4803      	ldr	r0, [pc, #12]	; (800097c <ssd1306_Fill+0x2c>)
 800096e:	f002 fe01 	bl	8003574 <memset>
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000164 	.word	0x20000164

08000980 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000986:	2300      	movs	r3, #0
 8000988:	71fb      	strb	r3, [r7, #7]
 800098a:	e016      	b.n	80009ba <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	3b50      	subs	r3, #80	; 0x50
 8000990:	b2db      	uxtb	r3, r3
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff ff40 	bl	8000818 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000998:	2000      	movs	r0, #0
 800099a:	f7ff ff3d 	bl	8000818 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800099e:	2010      	movs	r0, #16
 80009a0:	f7ff ff3a 	bl	8000818 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	01db      	lsls	r3, r3, #7
 80009a8:	4a08      	ldr	r2, [pc, #32]	; (80009cc <ssd1306_UpdateScreen+0x4c>)
 80009aa:	4413      	add	r3, r2
 80009ac:	2180      	movs	r1, #128	; 0x80
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff ff4a 	bl	8000848 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	3301      	adds	r3, #1
 80009b8:	71fb      	strb	r3, [r7, #7]
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	2b07      	cmp	r3, #7
 80009be:	d9e5      	bls.n	800098c <ssd1306_UpdateScreen+0xc>
    }
}
 80009c0:	bf00      	nop
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000164 	.word	0x20000164

080009d0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
 80009da:	460b      	mov	r3, r1
 80009dc:	71bb      	strb	r3, [r7, #6]
 80009de:	4613      	mov	r3, r2
 80009e0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80009e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	db3d      	blt.n	8000a66 <ssd1306_DrawPixel+0x96>
 80009ea:	79bb      	ldrb	r3, [r7, #6]
 80009ec:	2b3f      	cmp	r3, #63	; 0x3f
 80009ee:	d83a      	bhi.n	8000a66 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80009f0:	797b      	ldrb	r3, [r7, #5]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d11a      	bne.n	8000a2c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80009f6:	79fa      	ldrb	r2, [r7, #7]
 80009f8:	79bb      	ldrb	r3, [r7, #6]
 80009fa:	08db      	lsrs	r3, r3, #3
 80009fc:	b2d8      	uxtb	r0, r3
 80009fe:	4603      	mov	r3, r0
 8000a00:	01db      	lsls	r3, r3, #7
 8000a02:	4413      	add	r3, r2
 8000a04:	4a1a      	ldr	r2, [pc, #104]	; (8000a70 <ssd1306_DrawPixel+0xa0>)
 8000a06:	5cd3      	ldrb	r3, [r2, r3]
 8000a08:	b25a      	sxtb	r2, r3
 8000a0a:	79bb      	ldrb	r3, [r7, #6]
 8000a0c:	f003 0307 	and.w	r3, r3, #7
 8000a10:	2101      	movs	r1, #1
 8000a12:	fa01 f303 	lsl.w	r3, r1, r3
 8000a16:	b25b      	sxtb	r3, r3
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	b259      	sxtb	r1, r3
 8000a1c:	79fa      	ldrb	r2, [r7, #7]
 8000a1e:	4603      	mov	r3, r0
 8000a20:	01db      	lsls	r3, r3, #7
 8000a22:	4413      	add	r3, r2
 8000a24:	b2c9      	uxtb	r1, r1
 8000a26:	4a12      	ldr	r2, [pc, #72]	; (8000a70 <ssd1306_DrawPixel+0xa0>)
 8000a28:	54d1      	strb	r1, [r2, r3]
 8000a2a:	e01d      	b.n	8000a68 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000a2c:	79fa      	ldrb	r2, [r7, #7]
 8000a2e:	79bb      	ldrb	r3, [r7, #6]
 8000a30:	08db      	lsrs	r3, r3, #3
 8000a32:	b2d8      	uxtb	r0, r3
 8000a34:	4603      	mov	r3, r0
 8000a36:	01db      	lsls	r3, r3, #7
 8000a38:	4413      	add	r3, r2
 8000a3a:	4a0d      	ldr	r2, [pc, #52]	; (8000a70 <ssd1306_DrawPixel+0xa0>)
 8000a3c:	5cd3      	ldrb	r3, [r2, r3]
 8000a3e:	b25a      	sxtb	r2, r3
 8000a40:	79bb      	ldrb	r3, [r7, #6]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	2101      	movs	r1, #1
 8000a48:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4c:	b25b      	sxtb	r3, r3
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	b25b      	sxtb	r3, r3
 8000a52:	4013      	ands	r3, r2
 8000a54:	b259      	sxtb	r1, r3
 8000a56:	79fa      	ldrb	r2, [r7, #7]
 8000a58:	4603      	mov	r3, r0
 8000a5a:	01db      	lsls	r3, r3, #7
 8000a5c:	4413      	add	r3, r2
 8000a5e:	b2c9      	uxtb	r1, r1
 8000a60:	4a03      	ldr	r2, [pc, #12]	; (8000a70 <ssd1306_DrawPixel+0xa0>)
 8000a62:	54d1      	strb	r1, [r2, r3]
 8000a64:	e000      	b.n	8000a68 <ssd1306_DrawPixel+0x98>
        return;
 8000a66:	bf00      	nop
    }
}
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr
 8000a70:	20000164 	.word	0x20000164

08000a74 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000a74:	b590      	push	{r4, r7, lr}
 8000a76:	b089      	sub	sp, #36	; 0x24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	4638      	mov	r0, r7
 8000a7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000a82:	4623      	mov	r3, r4
 8000a84:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
 8000a88:	2b1f      	cmp	r3, #31
 8000a8a:	d902      	bls.n	8000a92 <ssd1306_WriteChar+0x1e>
 8000a8c:	7bfb      	ldrb	r3, [r7, #15]
 8000a8e:	2b7e      	cmp	r3, #126	; 0x7e
 8000a90:	d901      	bls.n	8000a96 <ssd1306_WriteChar+0x22>
        return 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	e079      	b.n	8000b8a <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d005      	beq.n	8000aa8 <ssd1306_WriteChar+0x34>
 8000a9c:	68ba      	ldr	r2, [r7, #8]
 8000a9e:	7bfb      	ldrb	r3, [r7, #15]
 8000aa0:	3b20      	subs	r3, #32
 8000aa2:	4413      	add	r3, r2
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	e000      	b.n	8000aaa <ssd1306_WriteChar+0x36>
 8000aa8:	783b      	ldrb	r3, [r7, #0]
 8000aaa:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8000aac:	4b39      	ldr	r3, [pc, #228]	; (8000b94 <ssd1306_WriteChar+0x120>)
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	7dfb      	ldrb	r3, [r7, #23]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	2b80      	cmp	r3, #128	; 0x80
 8000ab8:	dc06      	bgt.n	8000ac8 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8000aba:	4b36      	ldr	r3, [pc, #216]	; (8000b94 <ssd1306_WriteChar+0x120>)
 8000abc:	885b      	ldrh	r3, [r3, #2]
 8000abe:	461a      	mov	r2, r3
 8000ac0:	787b      	ldrb	r3, [r7, #1]
 8000ac2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8000ac4:	2b40      	cmp	r3, #64	; 0x40
 8000ac6:	dd01      	ble.n	8000acc <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	e05e      	b.n	8000b8a <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
 8000ad0:	e04d      	b.n	8000b6e <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	7bfb      	ldrb	r3, [r7, #15]
 8000ad6:	3b20      	subs	r3, #32
 8000ad8:	7879      	ldrb	r1, [r7, #1]
 8000ada:	fb01 f303 	mul.w	r3, r1, r3
 8000ade:	4619      	mov	r1, r3
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	440b      	add	r3, r1
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	4413      	add	r3, r2
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8000aec:	2300      	movs	r3, #0
 8000aee:	61bb      	str	r3, [r7, #24]
 8000af0:	e036      	b.n	8000b60 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d013      	beq.n	8000b2a <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000b02:	4b24      	ldr	r3, [pc, #144]	; (8000b94 <ssd1306_WriteChar+0x120>)
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	4413      	add	r3, r2
 8000b0e:	b2d8      	uxtb	r0, r3
 8000b10:	4b20      	ldr	r3, [pc, #128]	; (8000b94 <ssd1306_WriteChar+0x120>)
 8000b12:	885b      	ldrh	r3, [r3, #2]
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	4413      	add	r3, r2
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000b22:	4619      	mov	r1, r3
 8000b24:	f7ff ff54 	bl	80009d0 <ssd1306_DrawPixel>
 8000b28:	e017      	b.n	8000b5a <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000b2a:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <ssd1306_WriteChar+0x120>)
 8000b2c:	881b      	ldrh	r3, [r3, #0]
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	4413      	add	r3, r2
 8000b36:	b2d8      	uxtb	r0, r3
 8000b38:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <ssd1306_WriteChar+0x120>)
 8000b3a:	885b      	ldrh	r3, [r3, #2]
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	4413      	add	r3, r2
 8000b44:	b2d9      	uxtb	r1, r3
 8000b46:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	bf0c      	ite	eq
 8000b4e:	2301      	moveq	r3, #1
 8000b50:	2300      	movne	r3, #0
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	461a      	mov	r2, r3
 8000b56:	f7ff ff3b 	bl	80009d0 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	61bb      	str	r3, [r7, #24]
 8000b60:	7dfb      	ldrb	r3, [r7, #23]
 8000b62:	69ba      	ldr	r2, [r7, #24]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d3c4      	bcc.n	8000af2 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	61fb      	str	r3, [r7, #28]
 8000b6e:	787b      	ldrb	r3, [r7, #1]
 8000b70:	461a      	mov	r2, r3
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d3ac      	bcc.n	8000ad2 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <ssd1306_WriteChar+0x120>)
 8000b7a:	881a      	ldrh	r2, [r3, #0]
 8000b7c:	7dfb      	ldrb	r3, [r7, #23]
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	4413      	add	r3, r2
 8000b82:	b29a      	uxth	r2, r3
 8000b84:	4b03      	ldr	r3, [pc, #12]	; (8000b94 <ssd1306_WriteChar+0x120>)
 8000b86:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3724      	adds	r7, #36	; 0x24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd90      	pop	{r4, r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000564 	.word	0x20000564

08000b98 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af02      	add	r7, sp, #8
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	4638      	mov	r0, r7
 8000ba2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8000ba6:	e013      	b.n	8000bd0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	7818      	ldrb	r0, [r3, #0]
 8000bac:	7e3b      	ldrb	r3, [r7, #24]
 8000bae:	9300      	str	r3, [sp, #0]
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bb4:	f7ff ff5e 	bl	8000a74 <ssd1306_WriteChar>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	461a      	mov	r2, r3
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d002      	beq.n	8000bca <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	e008      	b.n	8000bdc <ssd1306_WriteString+0x44>
        }
        str++;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d1e7      	bne.n	8000ba8 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	781b      	ldrb	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	460a      	mov	r2, r1
 8000bee:	71fb      	strb	r3, [r7, #7]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <ssd1306_SetCursor+0x2c>)
 8000bfa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000bfc:	79bb      	ldrb	r3, [r7, #6]
 8000bfe:	b29a      	uxth	r2, r3
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <ssd1306_SetCursor+0x2c>)
 8000c02:	805a      	strh	r2, [r3, #2]
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000564 	.word	0x20000564

08000c14 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000c1e:	2381      	movs	r3, #129	; 0x81
 8000c20:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fdf7 	bl	8000818 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fdf3 	bl	8000818 <ssd1306_WriteCommand>
}
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d005      	beq.n	8000c58 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000c4c:	23af      	movs	r3, #175	; 0xaf
 8000c4e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000c50:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <ssd1306_SetDisplayOn+0x38>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	715a      	strb	r2, [r3, #5]
 8000c56:	e004      	b.n	8000c62 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000c58:	23ae      	movs	r3, #174	; 0xae
 8000c5a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <ssd1306_SetDisplayOn+0x38>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fdd7 	bl	8000818 <ssd1306_WriteCommand>
}
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000564 	.word	0x20000564

08000c78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <HAL_Init+0x28>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <HAL_Init+0x28>)
 8000c82:	f043 0310 	orr.w	r3, r3, #16
 8000c86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c88:	2003      	movs	r0, #3
 8000c8a:	f000 fe29 	bl	80018e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8e:	200f      	movs	r0, #15
 8000c90:	f000 f808 	bl	8000ca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c94:	f7ff fc28 	bl	80004e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40022000 	.word	0x40022000

08000ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_InitTick+0x54>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_InitTick+0x58>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 fe41 	bl	800194a <HAL_SYSTICK_Config>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e00e      	b.n	8000cf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2b0f      	cmp	r3, #15
 8000cd6:	d80a      	bhi.n	8000cee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce0:	f000 fe09 	bl	80018f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce4:	4a06      	ldr	r2, [pc, #24]	; (8000d00 <HAL_InitTick+0x5c>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cea:	2300      	movs	r3, #0
 8000cec:	e000      	b.n	8000cf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	2000000c 	.word	0x2000000c
 8000cfc:	20000014 	.word	0x20000014
 8000d00:	20000010 	.word	0x20000010

08000d04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <HAL_IncTick+0x1c>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <HAL_IncTick+0x20>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4413      	add	r3, r2
 8000d14:	4a03      	ldr	r2, [pc, #12]	; (8000d24 <HAL_IncTick+0x20>)
 8000d16:	6013      	str	r3, [r2, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr
 8000d20:	20000014 	.word	0x20000014
 8000d24:	2000056c 	.word	0x2000056c

08000d28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d2c:	4b02      	ldr	r3, [pc, #8]	; (8000d38 <HAL_GetTick+0x10>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr
 8000d38:	2000056c 	.word	0x2000056c

08000d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d44:	f7ff fff0 	bl	8000d28 <HAL_GetTick>
 8000d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d54:	d005      	beq.n	8000d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d56:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <HAL_Delay+0x44>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4413      	add	r3, r2
 8000d60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d62:	bf00      	nop
 8000d64:	f7ff ffe0 	bl	8000d28 <HAL_GetTick>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d8f7      	bhi.n	8000d64 <HAL_Delay+0x28>
  {
  }
}
 8000d74:	bf00      	nop
 8000d76:	bf00      	nop
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000014 	.word	0x20000014

08000d84 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000d90:	2300      	movs	r3, #0
 8000d92:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d101      	bne.n	8000da6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e0be      	b.n	8000f24 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d109      	bne.n	8000dc8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2200      	movs	r2, #0
 8000db8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff fbc2 	bl	800054c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f000 fbc3 	bl	8001554 <ADC_ConversionStop_Disable>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd6:	f003 0310 	and.w	r3, r3, #16
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f040 8099 	bne.w	8000f12 <HAL_ADC_Init+0x18e>
 8000de0:	7dfb      	ldrb	r3, [r7, #23]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f040 8095 	bne.w	8000f12 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000df0:	f023 0302 	bic.w	r3, r3, #2
 8000df4:	f043 0202 	orr.w	r2, r3, #2
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e04:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	7b1b      	ldrb	r3, [r3, #12]
 8000e0a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e0c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e1c:	d003      	beq.n	8000e26 <HAL_ADC_Init+0xa2>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d102      	bne.n	8000e2c <HAL_ADC_Init+0xa8>
 8000e26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e2a:	e000      	b.n	8000e2e <HAL_ADC_Init+0xaa>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	7d1b      	ldrb	r3, [r3, #20]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d119      	bne.n	8000e70 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	7b1b      	ldrb	r3, [r3, #12]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d109      	bne.n	8000e58 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	035a      	lsls	r2, r3, #13
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	e00b      	b.n	8000e70 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5c:	f043 0220 	orr.w	r2, r3, #32
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e68:	f043 0201 	orr.w	r2, r3, #1
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	430a      	orrs	r2, r1
 8000e82:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	689a      	ldr	r2, [r3, #8]
 8000e8a:	4b28      	ldr	r3, [pc, #160]	; (8000f2c <HAL_ADC_Init+0x1a8>)
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	6812      	ldr	r2, [r2, #0]
 8000e92:	68b9      	ldr	r1, [r7, #8]
 8000e94:	430b      	orrs	r3, r1
 8000e96:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ea0:	d003      	beq.n	8000eaa <HAL_ADC_Init+0x126>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d104      	bne.n	8000eb4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	691b      	ldr	r3, [r3, #16]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	051b      	lsls	r3, r3, #20
 8000eb2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eba:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	689a      	ldr	r2, [r3, #8]
 8000ece:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <HAL_ADC_Init+0x1ac>)
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d10b      	bne.n	8000ef0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee2:	f023 0303 	bic.w	r3, r3, #3
 8000ee6:	f043 0201 	orr.w	r2, r3, #1
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000eee:	e018      	b.n	8000f22 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef4:	f023 0312 	bic.w	r3, r3, #18
 8000ef8:	f043 0210 	orr.w	r2, r3, #16
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f04:	f043 0201 	orr.w	r2, r3, #1
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f10:	e007      	b.n	8000f22 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f16:	f043 0210 	orr.w	r2, r3, #16
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f22:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	ffe1f7fd 	.word	0xffe1f7fd
 8000f30:	ff1f0efe 	.word	0xff1f0efe

08000f34 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d101      	bne.n	8000f4e <HAL_ADC_Start_IT+0x1a>
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	e0a0      	b.n	8001090 <HAL_ADC_Start_IT+0x15c>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2201      	movs	r2, #1
 8000f52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f000 faa2 	bl	80014a0 <ADC_Enable>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f040 808f 	bne.w	8001086 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000f70:	f023 0301 	bic.w	r3, r3, #1
 8000f74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a45      	ldr	r2, [pc, #276]	; (8001098 <HAL_ADC_Start_IT+0x164>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d105      	bne.n	8000f92 <HAL_ADC_Start_IT+0x5e>
 8000f86:	4b45      	ldr	r3, [pc, #276]	; (800109c <HAL_ADC_Start_IT+0x168>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d115      	bne.n	8000fbe <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f96:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d026      	beq.n	8000ffa <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fb4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fbc:	e01d      	b.n	8000ffa <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a33      	ldr	r2, [pc, #204]	; (800109c <HAL_ADC_Start_IT+0x168>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d004      	beq.n	8000fde <HAL_ADC_Start_IT+0xaa>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a2f      	ldr	r2, [pc, #188]	; (8001098 <HAL_ADC_Start_IT+0x164>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d10d      	bne.n	8000ffa <HAL_ADC_Start_IT+0xc6>
 8000fde:	4b2f      	ldr	r3, [pc, #188]	; (800109c <HAL_ADC_Start_IT+0x168>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d007      	beq.n	8000ffa <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ff2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d006      	beq.n	8001014 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100a:	f023 0206 	bic.w	r2, r3, #6
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	62da      	str	r2, [r3, #44]	; 0x2c
 8001012:	e002      	b.n	800101a <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f06f 0202 	mvn.w	r2, #2
 800102a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	685a      	ldr	r2, [r3, #4]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f042 0220 	orr.w	r2, r2, #32
 800103a:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001046:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800104a:	d113      	bne.n	8001074 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001050:	4a11      	ldr	r2, [pc, #68]	; (8001098 <HAL_ADC_Start_IT+0x164>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d105      	bne.n	8001062 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <HAL_ADC_Start_IT+0x168>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800105e:	2b00      	cmp	r3, #0
 8001060:	d108      	bne.n	8001074 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	689a      	ldr	r2, [r3, #8]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	e00c      	b.n	800108e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	689a      	ldr	r2, [r3, #8]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	e003      	b.n	800108e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800108e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40012800 	.word	0x40012800
 800109c:	40012400 	.word	0x40012400

080010a0 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010a8:	2300      	movs	r3, #0
 80010aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d101      	bne.n	80010ba <HAL_ADC_Stop_IT+0x1a>
 80010b6:	2302      	movs	r3, #2
 80010b8:	e022      	b.n	8001100 <HAL_ADC_Stop_IT+0x60>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2201      	movs	r2, #1
 80010be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 fa46 	bl	8001554 <ADC_ConversionStop_Disable>
 80010c8:	4603      	mov	r3, r0
 80010ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d111      	bne.n	80010f6 <HAL_ADC_Stop_IT+0x56>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f022 0220 	bic.w	r2, r2, #32
 80010e0:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010ea:	f023 0301 	bic.w	r3, r3, #1
 80010ee:	f043 0201 	orr.w	r2, r3, #1
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001116:	4618      	mov	r0, r3
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr

08001120 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	f003 0320 	and.w	r3, r3, #32
 800113e:	2b00      	cmp	r3, #0
 8001140:	d03e      	beq.n	80011c0 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d039      	beq.n	80011c0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001150:	f003 0310 	and.w	r3, r3, #16
 8001154:	2b00      	cmp	r3, #0
 8001156:	d105      	bne.n	8001164 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800116e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001172:	d11d      	bne.n	80011b0 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001178:	2b00      	cmp	r3, #0
 800117a:	d119      	bne.n	80011b0 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 0220 	bic.w	r2, r2, #32
 800118a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001190:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800119c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d105      	bne.n	80011b0 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a8:	f043 0201 	orr.w	r2, r3, #1
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff f975 	bl	80004a0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f06f 0212 	mvn.w	r2, #18
 80011be:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d04d      	beq.n	8001266 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d048      	beq.n	8001266 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d8:	f003 0310 	and.w	r3, r3, #16
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d105      	bne.n	80011ec <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80011f6:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80011fa:	d012      	beq.n	8001222 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001206:	2b00      	cmp	r3, #0
 8001208:	d125      	bne.n	8001256 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001214:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001218:	d11d      	bne.n	8001256 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800121e:	2b00      	cmp	r3, #0
 8001220:	d119      	bne.n	8001256 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001230:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001236:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001246:	2b00      	cmp	r3, #0
 8001248:	d105      	bne.n	8001256 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800124e:	f043 0201 	orr.w	r2, r3, #1
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f000 fa6c 	bl	8001734 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f06f 020c 	mvn.w	r2, #12
 8001264:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800126c:	2b00      	cmp	r3, #0
 800126e:	d012      	beq.n	8001296 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00d      	beq.n	8001296 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f000 f809 	bl	800129e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f06f 0201 	mvn.w	r2, #1
 8001294:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr

080012b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d101      	bne.n	80012d0 <HAL_ADC_ConfigChannel+0x20>
 80012cc:	2302      	movs	r3, #2
 80012ce:	e0dc      	b.n	800148a <HAL_ADC_ConfigChannel+0x1da>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b06      	cmp	r3, #6
 80012de:	d81c      	bhi.n	800131a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	4613      	mov	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	3b05      	subs	r3, #5
 80012f2:	221f      	movs	r2, #31
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	4019      	ands	r1, r3
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	6818      	ldr	r0, [r3, #0]
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	4613      	mov	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	3b05      	subs	r3, #5
 800130c:	fa00 f203 	lsl.w	r2, r0, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	430a      	orrs	r2, r1
 8001316:	635a      	str	r2, [r3, #52]	; 0x34
 8001318:	e03c      	b.n	8001394 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b0c      	cmp	r3, #12
 8001320:	d81c      	bhi.n	800135c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	4613      	mov	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4413      	add	r3, r2
 8001332:	3b23      	subs	r3, #35	; 0x23
 8001334:	221f      	movs	r2, #31
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	4019      	ands	r1, r3
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	6818      	ldr	r0, [r3, #0]
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	4613      	mov	r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4413      	add	r3, r2
 800134c:	3b23      	subs	r3, #35	; 0x23
 800134e:	fa00 f203 	lsl.w	r2, r0, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	430a      	orrs	r2, r1
 8001358:	631a      	str	r2, [r3, #48]	; 0x30
 800135a:	e01b      	b.n	8001394 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	4613      	mov	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	3b41      	subs	r3, #65	; 0x41
 800136e:	221f      	movs	r2, #31
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	4019      	ands	r1, r3
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	6818      	ldr	r0, [r3, #0]
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	4613      	mov	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	3b41      	subs	r3, #65	; 0x41
 8001388:	fa00 f203 	lsl.w	r2, r0, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	430a      	orrs	r2, r1
 8001392:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b09      	cmp	r3, #9
 800139a:	d91c      	bls.n	80013d6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	68d9      	ldr	r1, [r3, #12]
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	4613      	mov	r3, r2
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	4413      	add	r3, r2
 80013ac:	3b1e      	subs	r3, #30
 80013ae:	2207      	movs	r2, #7
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	4019      	ands	r1, r3
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	6898      	ldr	r0, [r3, #8]
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4613      	mov	r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	4413      	add	r3, r2
 80013c6:	3b1e      	subs	r3, #30
 80013c8:	fa00 f203 	lsl.w	r2, r0, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	430a      	orrs	r2, r1
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	e019      	b.n	800140a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6919      	ldr	r1, [r3, #16]
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4613      	mov	r3, r2
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	4413      	add	r3, r2
 80013e6:	2207      	movs	r2, #7
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	4019      	ands	r1, r3
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	6898      	ldr	r0, [r3, #8]
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4613      	mov	r3, r2
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	4413      	add	r3, r2
 80013fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	430a      	orrs	r2, r1
 8001408:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b10      	cmp	r3, #16
 8001410:	d003      	beq.n	800141a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001416:	2b11      	cmp	r3, #17
 8001418:	d132      	bne.n	8001480 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a1d      	ldr	r2, [pc, #116]	; (8001494 <HAL_ADC_ConfigChannel+0x1e4>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d125      	bne.n	8001470 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d126      	bne.n	8001480 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001440:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b10      	cmp	r3, #16
 8001448:	d11a      	bne.n	8001480 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800144a:	4b13      	ldr	r3, [pc, #76]	; (8001498 <HAL_ADC_ConfigChannel+0x1e8>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a13      	ldr	r2, [pc, #76]	; (800149c <HAL_ADC_ConfigChannel+0x1ec>)
 8001450:	fba2 2303 	umull	r2, r3, r2, r3
 8001454:	0c9a      	lsrs	r2, r3, #18
 8001456:	4613      	mov	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001460:	e002      	b.n	8001468 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	3b01      	subs	r3, #1
 8001466:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f9      	bne.n	8001462 <HAL_ADC_ConfigChannel+0x1b2>
 800146e:	e007      	b.n	8001480 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001474:	f043 0220 	orr.w	r2, r3, #32
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001488:	7bfb      	ldrb	r3, [r7, #15]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	40012400 	.word	0x40012400
 8001498:	2000000c 	.word	0x2000000c
 800149c:	431bde83 	.word	0x431bde83

080014a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d040      	beq.n	8001540 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f042 0201 	orr.w	r2, r2, #1
 80014cc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014ce:	4b1f      	ldr	r3, [pc, #124]	; (800154c <ADC_Enable+0xac>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a1f      	ldr	r2, [pc, #124]	; (8001550 <ADC_Enable+0xb0>)
 80014d4:	fba2 2303 	umull	r2, r3, r2, r3
 80014d8:	0c9b      	lsrs	r3, r3, #18
 80014da:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014dc:	e002      	b.n	80014e4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	3b01      	subs	r3, #1
 80014e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1f9      	bne.n	80014de <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014ea:	f7ff fc1d 	bl	8000d28 <HAL_GetTick>
 80014ee:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80014f0:	e01f      	b.n	8001532 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80014f2:	f7ff fc19 	bl	8000d28 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d918      	bls.n	8001532 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b01      	cmp	r3, #1
 800150c:	d011      	beq.n	8001532 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001512:	f043 0210 	orr.w	r2, r3, #16
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151e:	f043 0201 	orr.w	r2, r3, #1
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e007      	b.n	8001542 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b01      	cmp	r3, #1
 800153e:	d1d8      	bne.n	80014f2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	2000000c 	.word	0x2000000c
 8001550:	431bde83 	.word	0x431bde83

08001554 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	2b01      	cmp	r3, #1
 800156c:	d12e      	bne.n	80015cc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 0201 	bic.w	r2, r2, #1
 800157c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800157e:	f7ff fbd3 	bl	8000d28 <HAL_GetTick>
 8001582:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001584:	e01b      	b.n	80015be <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001586:	f7ff fbcf 	bl	8000d28 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d914      	bls.n	80015be <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d10d      	bne.n	80015be <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a6:	f043 0210 	orr.w	r2, r3, #16
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b2:	f043 0201 	orr.w	r2, r3, #1
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e007      	b.n	80015ce <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d0dc      	beq.n	8001586 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
	...

080015d8 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80015d8:	b590      	push	{r4, r7, lr}
 80015da:	b087      	sub	sp, #28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015e0:	2300      	movs	r3, #0
 80015e2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d101      	bne.n	80015f6 <HAL_ADCEx_Calibration_Start+0x1e>
 80015f2:	2302      	movs	r3, #2
 80015f4:	e097      	b.n	8001726 <HAL_ADCEx_Calibration_Start+0x14e>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2201      	movs	r2, #1
 80015fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ffa8 	bl	8001554 <ADC_ConversionStop_Disable>
 8001604:	4603      	mov	r3, r0
 8001606:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff ff49 	bl	80014a0 <ADC_Enable>
 800160e:	4603      	mov	r3, r0
 8001610:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001612:	7dfb      	ldrb	r3, [r7, #23]
 8001614:	2b00      	cmp	r3, #0
 8001616:	f040 8081 	bne.w	800171c <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001622:	f023 0302 	bic.w	r3, r3, #2
 8001626:	f043 0202 	orr.w	r2, r3, #2
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800162e:	4b40      	ldr	r3, [pc, #256]	; (8001730 <HAL_ADCEx_Calibration_Start+0x158>)
 8001630:	681c      	ldr	r4, [r3, #0]
 8001632:	2002      	movs	r0, #2
 8001634:	f001 fca4 	bl	8002f80 <HAL_RCCEx_GetPeriphCLKFreq>
 8001638:	4603      	mov	r3, r0
 800163a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800163e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001640:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001642:	e002      	b.n	800164a <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	3b01      	subs	r3, #1
 8001648:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1f9      	bne.n	8001644 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f042 0208 	orr.w	r2, r2, #8
 800165e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001660:	f7ff fb62 	bl	8000d28 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001666:	e01b      	b.n	80016a0 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001668:	f7ff fb5e 	bl	8000d28 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b0a      	cmp	r3, #10
 8001674:	d914      	bls.n	80016a0 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f003 0308 	and.w	r3, r3, #8
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00d      	beq.n	80016a0 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001688:	f023 0312 	bic.w	r3, r3, #18
 800168c:	f043 0210 	orr.w	r2, r3, #16
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e042      	b.n	8001726 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 0308 	and.w	r3, r3, #8
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1dc      	bne.n	8001668 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f042 0204 	orr.w	r2, r2, #4
 80016bc:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80016be:	f7ff fb33 	bl	8000d28 <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80016c4:	e01b      	b.n	80016fe <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80016c6:	f7ff fb2f 	bl	8000d28 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b0a      	cmp	r3, #10
 80016d2:	d914      	bls.n	80016fe <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00d      	beq.n	80016fe <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e6:	f023 0312 	bic.w	r3, r3, #18
 80016ea:	f043 0210 	orr.w	r2, r3, #16
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e013      	b.n	8001726 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1dc      	bne.n	80016c6 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001710:	f023 0303 	bic.w	r3, r3, #3
 8001714:	f043 0201 	orr.w	r2, r3, #1
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001724:	7dfb      	ldrb	r3, [r7, #23]
}
 8001726:	4618      	mov	r0, r3
 8001728:	371c      	adds	r7, #28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd90      	pop	{r4, r7, pc}
 800172e:	bf00      	nop
 8001730:	2000000c 	.word	0x2000000c

08001734 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr
	...

08001748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <__NVIC_SetPriorityGrouping+0x44>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001764:	4013      	ands	r3, r2
 8001766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001770:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800177a:	4a04      	ldr	r2, [pc, #16]	; (800178c <__NVIC_SetPriorityGrouping+0x44>)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	60d3      	str	r3, [r2, #12]
}
 8001780:	bf00      	nop
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001794:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	0a1b      	lsrs	r3, r3, #8
 800179a:	f003 0307 	and.w	r3, r3, #7
}
 800179e:	4618      	mov	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	db0b      	blt.n	80017d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	f003 021f 	and.w	r2, r3, #31
 80017c4:	4906      	ldr	r1, [pc, #24]	; (80017e0 <__NVIC_EnableIRQ+0x34>)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	095b      	lsrs	r3, r3, #5
 80017cc:	2001      	movs	r0, #1
 80017ce:	fa00 f202 	lsl.w	r2, r0, r2
 80017d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr
 80017e0:	e000e100 	.word	0xe000e100

080017e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	6039      	str	r1, [r7, #0]
 80017ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	db0a      	blt.n	800180e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	490c      	ldr	r1, [pc, #48]	; (8001830 <__NVIC_SetPriority+0x4c>)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	0112      	lsls	r2, r2, #4
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	440b      	add	r3, r1
 8001808:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800180c:	e00a      	b.n	8001824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	b2da      	uxtb	r2, r3
 8001812:	4908      	ldr	r1, [pc, #32]	; (8001834 <__NVIC_SetPriority+0x50>)
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	3b04      	subs	r3, #4
 800181c:	0112      	lsls	r2, r2, #4
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	440b      	add	r3, r1
 8001822:	761a      	strb	r2, [r3, #24]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000e100 	.word	0xe000e100
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001838:	b480      	push	{r7}
 800183a:	b089      	sub	sp, #36	; 0x24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f1c3 0307 	rsb	r3, r3, #7
 8001852:	2b04      	cmp	r3, #4
 8001854:	bf28      	it	cs
 8001856:	2304      	movcs	r3, #4
 8001858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3304      	adds	r3, #4
 800185e:	2b06      	cmp	r3, #6
 8001860:	d902      	bls.n	8001868 <NVIC_EncodePriority+0x30>
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3b03      	subs	r3, #3
 8001866:	e000      	b.n	800186a <NVIC_EncodePriority+0x32>
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800186c:	f04f 32ff 	mov.w	r2, #4294967295
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43da      	mvns	r2, r3
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	401a      	ands	r2, r3
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001880:	f04f 31ff 	mov.w	r1, #4294967295
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	fa01 f303 	lsl.w	r3, r1, r3
 800188a:	43d9      	mvns	r1, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	4313      	orrs	r3, r2
         );
}
 8001892:	4618      	mov	r0, r3
 8001894:	3724      	adds	r7, #36	; 0x24
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr

0800189c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018ac:	d301      	bcc.n	80018b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ae:	2301      	movs	r3, #1
 80018b0:	e00f      	b.n	80018d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b2:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <SysTick_Config+0x40>)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ba:	210f      	movs	r1, #15
 80018bc:	f04f 30ff 	mov.w	r0, #4294967295
 80018c0:	f7ff ff90 	bl	80017e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <SysTick_Config+0x40>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ca:	4b04      	ldr	r3, [pc, #16]	; (80018dc <SysTick_Config+0x40>)
 80018cc:	2207      	movs	r2, #7
 80018ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	e000e010 	.word	0xe000e010

080018e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff ff2d 	bl	8001748 <__NVIC_SetPriorityGrouping>
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b086      	sub	sp, #24
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	4603      	mov	r3, r0
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	607a      	str	r2, [r7, #4]
 8001902:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001908:	f7ff ff42 	bl	8001790 <__NVIC_GetPriorityGrouping>
 800190c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	68b9      	ldr	r1, [r7, #8]
 8001912:	6978      	ldr	r0, [r7, #20]
 8001914:	f7ff ff90 	bl	8001838 <NVIC_EncodePriority>
 8001918:	4602      	mov	r2, r0
 800191a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800191e:	4611      	mov	r1, r2
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff5f 	bl	80017e4 <__NVIC_SetPriority>
}
 8001926:	bf00      	nop
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	4603      	mov	r3, r0
 8001936:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ff35 	bl	80017ac <__NVIC_EnableIRQ>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff ffa2 	bl	800189c <SysTick_Config>
 8001958:	4603      	mov	r3, r0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001964:	b480      	push	{r7}
 8001966:	b08b      	sub	sp, #44	; 0x2c
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800196e:	2300      	movs	r3, #0
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001972:	2300      	movs	r3, #0
 8001974:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001976:	e169      	b.n	8001c4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001978:	2201      	movs	r2, #1
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	69fa      	ldr	r2, [r7, #28]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	429a      	cmp	r2, r3
 8001992:	f040 8158 	bne.w	8001c46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	4a9a      	ldr	r2, [pc, #616]	; (8001c04 <HAL_GPIO_Init+0x2a0>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d05e      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
 80019a0:	4a98      	ldr	r2, [pc, #608]	; (8001c04 <HAL_GPIO_Init+0x2a0>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d875      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019a6:	4a98      	ldr	r2, [pc, #608]	; (8001c08 <HAL_GPIO_Init+0x2a4>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d058      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
 80019ac:	4a96      	ldr	r2, [pc, #600]	; (8001c08 <HAL_GPIO_Init+0x2a4>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d86f      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019b2:	4a96      	ldr	r2, [pc, #600]	; (8001c0c <HAL_GPIO_Init+0x2a8>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d052      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
 80019b8:	4a94      	ldr	r2, [pc, #592]	; (8001c0c <HAL_GPIO_Init+0x2a8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d869      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019be:	4a94      	ldr	r2, [pc, #592]	; (8001c10 <HAL_GPIO_Init+0x2ac>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d04c      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
 80019c4:	4a92      	ldr	r2, [pc, #584]	; (8001c10 <HAL_GPIO_Init+0x2ac>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d863      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019ca:	4a92      	ldr	r2, [pc, #584]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d046      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
 80019d0:	4a90      	ldr	r2, [pc, #576]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d85d      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019d6:	2b12      	cmp	r3, #18
 80019d8:	d82a      	bhi.n	8001a30 <HAL_GPIO_Init+0xcc>
 80019da:	2b12      	cmp	r3, #18
 80019dc:	d859      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019de:	a201      	add	r2, pc, #4	; (adr r2, 80019e4 <HAL_GPIO_Init+0x80>)
 80019e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e4:	08001a5f 	.word	0x08001a5f
 80019e8:	08001a39 	.word	0x08001a39
 80019ec:	08001a4b 	.word	0x08001a4b
 80019f0:	08001a8d 	.word	0x08001a8d
 80019f4:	08001a93 	.word	0x08001a93
 80019f8:	08001a93 	.word	0x08001a93
 80019fc:	08001a93 	.word	0x08001a93
 8001a00:	08001a93 	.word	0x08001a93
 8001a04:	08001a93 	.word	0x08001a93
 8001a08:	08001a93 	.word	0x08001a93
 8001a0c:	08001a93 	.word	0x08001a93
 8001a10:	08001a93 	.word	0x08001a93
 8001a14:	08001a93 	.word	0x08001a93
 8001a18:	08001a93 	.word	0x08001a93
 8001a1c:	08001a93 	.word	0x08001a93
 8001a20:	08001a93 	.word	0x08001a93
 8001a24:	08001a93 	.word	0x08001a93
 8001a28:	08001a41 	.word	0x08001a41
 8001a2c:	08001a55 	.word	0x08001a55
 8001a30:	4a79      	ldr	r2, [pc, #484]	; (8001c18 <HAL_GPIO_Init+0x2b4>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d013      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a36:	e02c      	b.n	8001a92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	623b      	str	r3, [r7, #32]
          break;
 8001a3e:	e029      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	3304      	adds	r3, #4
 8001a46:	623b      	str	r3, [r7, #32]
          break;
 8001a48:	e024      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	3308      	adds	r3, #8
 8001a50:	623b      	str	r3, [r7, #32]
          break;
 8001a52:	e01f      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	330c      	adds	r3, #12
 8001a5a:	623b      	str	r3, [r7, #32]
          break;
 8001a5c:	e01a      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d102      	bne.n	8001a6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a66:	2304      	movs	r3, #4
 8001a68:	623b      	str	r3, [r7, #32]
          break;
 8001a6a:	e013      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d105      	bne.n	8001a80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a74:	2308      	movs	r3, #8
 8001a76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69fa      	ldr	r2, [r7, #28]
 8001a7c:	611a      	str	r2, [r3, #16]
          break;
 8001a7e:	e009      	b.n	8001a94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a80:	2308      	movs	r3, #8
 8001a82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69fa      	ldr	r2, [r7, #28]
 8001a88:	615a      	str	r2, [r3, #20]
          break;
 8001a8a:	e003      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	623b      	str	r3, [r7, #32]
          break;
 8001a90:	e000      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          break;
 8001a92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	2bff      	cmp	r3, #255	; 0xff
 8001a98:	d801      	bhi.n	8001a9e <HAL_GPIO_Init+0x13a>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	e001      	b.n	8001aa2 <HAL_GPIO_Init+0x13e>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	2bff      	cmp	r3, #255	; 0xff
 8001aa8:	d802      	bhi.n	8001ab0 <HAL_GPIO_Init+0x14c>
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	e002      	b.n	8001ab6 <HAL_GPIO_Init+0x152>
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	3b08      	subs	r3, #8
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	210f      	movs	r1, #15
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	6a39      	ldr	r1, [r7, #32]
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 80b1 	beq.w	8001c46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ae4:	4b4d      	ldr	r3, [pc, #308]	; (8001c1c <HAL_GPIO_Init+0x2b8>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	4a4c      	ldr	r2, [pc, #304]	; (8001c1c <HAL_GPIO_Init+0x2b8>)
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	6193      	str	r3, [r2, #24]
 8001af0:	4b4a      	ldr	r3, [pc, #296]	; (8001c1c <HAL_GPIO_Init+0x2b8>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001afc:	4a48      	ldr	r2, [pc, #288]	; (8001c20 <HAL_GPIO_Init+0x2bc>)
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	089b      	lsrs	r3, r3, #2
 8001b02:	3302      	adds	r3, #2
 8001b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	220f      	movs	r2, #15
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a40      	ldr	r2, [pc, #256]	; (8001c24 <HAL_GPIO_Init+0x2c0>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d013      	beq.n	8001b50 <HAL_GPIO_Init+0x1ec>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a3f      	ldr	r2, [pc, #252]	; (8001c28 <HAL_GPIO_Init+0x2c4>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d00d      	beq.n	8001b4c <HAL_GPIO_Init+0x1e8>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a3e      	ldr	r2, [pc, #248]	; (8001c2c <HAL_GPIO_Init+0x2c8>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d007      	beq.n	8001b48 <HAL_GPIO_Init+0x1e4>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a3d      	ldr	r2, [pc, #244]	; (8001c30 <HAL_GPIO_Init+0x2cc>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d101      	bne.n	8001b44 <HAL_GPIO_Init+0x1e0>
 8001b40:	2303      	movs	r3, #3
 8001b42:	e006      	b.n	8001b52 <HAL_GPIO_Init+0x1ee>
 8001b44:	2304      	movs	r3, #4
 8001b46:	e004      	b.n	8001b52 <HAL_GPIO_Init+0x1ee>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	e002      	b.n	8001b52 <HAL_GPIO_Init+0x1ee>
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e000      	b.n	8001b52 <HAL_GPIO_Init+0x1ee>
 8001b50:	2300      	movs	r3, #0
 8001b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b54:	f002 0203 	and.w	r2, r2, #3
 8001b58:	0092      	lsls	r2, r2, #2
 8001b5a:	4093      	lsls	r3, r2
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b62:	492f      	ldr	r1, [pc, #188]	; (8001c20 <HAL_GPIO_Init+0x2bc>)
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	089b      	lsrs	r3, r3, #2
 8001b68:	3302      	adds	r3, #2
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d006      	beq.n	8001b8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b7c:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	492c      	ldr	r1, [pc, #176]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	608b      	str	r3, [r1, #8]
 8001b88:	e006      	b.n	8001b98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b8a:	4b2a      	ldr	r3, [pc, #168]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	4928      	ldr	r1, [pc, #160]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001b94:	4013      	ands	r3, r2
 8001b96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d006      	beq.n	8001bb2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ba4:	4b23      	ldr	r3, [pc, #140]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001ba6:	68da      	ldr	r2, [r3, #12]
 8001ba8:	4922      	ldr	r1, [pc, #136]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	60cb      	str	r3, [r1, #12]
 8001bb0:	e006      	b.n	8001bc0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bb2:	4b20      	ldr	r3, [pc, #128]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001bb4:	68da      	ldr	r2, [r3, #12]
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	491e      	ldr	r1, [pc, #120]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d006      	beq.n	8001bda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bcc:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	4918      	ldr	r1, [pc, #96]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	604b      	str	r3, [r1, #4]
 8001bd8:	e006      	b.n	8001be8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bda:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	43db      	mvns	r3, r3
 8001be2:	4914      	ldr	r1, [pc, #80]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001be4:	4013      	ands	r3, r2
 8001be6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d021      	beq.n	8001c38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	490e      	ldr	r1, [pc, #56]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	600b      	str	r3, [r1, #0]
 8001c00:	e021      	b.n	8001c46 <HAL_GPIO_Init+0x2e2>
 8001c02:	bf00      	nop
 8001c04:	10320000 	.word	0x10320000
 8001c08:	10310000 	.word	0x10310000
 8001c0c:	10220000 	.word	0x10220000
 8001c10:	10210000 	.word	0x10210000
 8001c14:	10120000 	.word	0x10120000
 8001c18:	10110000 	.word	0x10110000
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40010000 	.word	0x40010000
 8001c24:	40010800 	.word	0x40010800
 8001c28:	40010c00 	.word	0x40010c00
 8001c2c:	40011000 	.word	0x40011000
 8001c30:	40011400 	.word	0x40011400
 8001c34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_GPIO_Init+0x304>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	4909      	ldr	r1, [pc, #36]	; (8001c68 <HAL_GPIO_Init+0x304>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	3301      	adds	r3, #1
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	fa22 f303 	lsr.w	r3, r2, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f47f ae8e 	bne.w	8001978 <HAL_GPIO_Init+0x14>
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	bf00      	nop
 8001c60:	372c      	adds	r7, #44	; 0x2c
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr
 8001c68:	40010400 	.word	0x40010400

08001c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	807b      	strh	r3, [r7, #2]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c7c:	787b      	ldrb	r3, [r7, #1]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c82:	887a      	ldrh	r2, [r7, #2]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c88:	e003      	b.n	8001c92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c8a:	887b      	ldrh	r3, [r7, #2]
 8001c8c:	041a      	lsls	r2, r3, #16
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	611a      	str	r2, [r3, #16]
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr

08001c9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e12b      	b.n	8001f06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d106      	bne.n	8001cc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7fe fc86 	bl	80005d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2224      	movs	r2, #36	; 0x24
 8001ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0201 	bic.w	r2, r2, #1
 8001cde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cfe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d00:	f001 f842 	bl	8002d88 <HAL_RCC_GetPCLK1Freq>
 8001d04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	4a81      	ldr	r2, [pc, #516]	; (8001f10 <HAL_I2C_Init+0x274>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d807      	bhi.n	8001d20 <HAL_I2C_Init+0x84>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4a80      	ldr	r2, [pc, #512]	; (8001f14 <HAL_I2C_Init+0x278>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	bf94      	ite	ls
 8001d18:	2301      	movls	r3, #1
 8001d1a:	2300      	movhi	r3, #0
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	e006      	b.n	8001d2e <HAL_I2C_Init+0x92>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4a7d      	ldr	r2, [pc, #500]	; (8001f18 <HAL_I2C_Init+0x27c>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	bf94      	ite	ls
 8001d28:	2301      	movls	r3, #1
 8001d2a:	2300      	movhi	r3, #0
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e0e7      	b.n	8001f06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	4a78      	ldr	r2, [pc, #480]	; (8001f1c <HAL_I2C_Init+0x280>)
 8001d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3e:	0c9b      	lsrs	r3, r3, #18
 8001d40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68ba      	ldr	r2, [r7, #8]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	4a6a      	ldr	r2, [pc, #424]	; (8001f10 <HAL_I2C_Init+0x274>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d802      	bhi.n	8001d70 <HAL_I2C_Init+0xd4>
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	e009      	b.n	8001d84 <HAL_I2C_Init+0xe8>
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d76:	fb02 f303 	mul.w	r3, r2, r3
 8001d7a:	4a69      	ldr	r2, [pc, #420]	; (8001f20 <HAL_I2C_Init+0x284>)
 8001d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d80:	099b      	lsrs	r3, r3, #6
 8001d82:	3301      	adds	r3, #1
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	430b      	orrs	r3, r1
 8001d8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	495c      	ldr	r1, [pc, #368]	; (8001f10 <HAL_I2C_Init+0x274>)
 8001da0:	428b      	cmp	r3, r1
 8001da2:	d819      	bhi.n	8001dd8 <HAL_I2C_Init+0x13c>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	1e59      	subs	r1, r3, #1
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	fbb1 f3f3 	udiv	r3, r1, r3
 8001db2:	1c59      	adds	r1, r3, #1
 8001db4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001db8:	400b      	ands	r3, r1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00a      	beq.n	8001dd4 <HAL_I2C_Init+0x138>
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	1e59      	subs	r1, r3, #1
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dcc:	3301      	adds	r3, #1
 8001dce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd2:	e051      	b.n	8001e78 <HAL_I2C_Init+0x1dc>
 8001dd4:	2304      	movs	r3, #4
 8001dd6:	e04f      	b.n	8001e78 <HAL_I2C_Init+0x1dc>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d111      	bne.n	8001e04 <HAL_I2C_Init+0x168>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	1e58      	subs	r0, r3, #1
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6859      	ldr	r1, [r3, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	440b      	add	r3, r1
 8001dee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001df2:	3301      	adds	r3, #1
 8001df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	bf0c      	ite	eq
 8001dfc:	2301      	moveq	r3, #1
 8001dfe:	2300      	movne	r3, #0
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	e012      	b.n	8001e2a <HAL_I2C_Init+0x18e>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	1e58      	subs	r0, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6859      	ldr	r1, [r3, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	0099      	lsls	r1, r3, #2
 8001e14:	440b      	add	r3, r1
 8001e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	bf0c      	ite	eq
 8001e24:	2301      	moveq	r3, #1
 8001e26:	2300      	movne	r3, #0
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_I2C_Init+0x196>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e022      	b.n	8001e78 <HAL_I2C_Init+0x1dc>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10e      	bne.n	8001e58 <HAL_I2C_Init+0x1bc>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	1e58      	subs	r0, r3, #1
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6859      	ldr	r1, [r3, #4]
 8001e42:	460b      	mov	r3, r1
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	440b      	add	r3, r1
 8001e48:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e56:	e00f      	b.n	8001e78 <HAL_I2C_Init+0x1dc>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	1e58      	subs	r0, r3, #1
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6859      	ldr	r1, [r3, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	0099      	lsls	r1, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e6e:	3301      	adds	r3, #1
 8001e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	6809      	ldr	r1, [r1, #0]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69da      	ldr	r2, [r3, #28]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ea6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6911      	ldr	r1, [r2, #16]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	68d2      	ldr	r2, [r2, #12]
 8001eb2:	4311      	orrs	r1, r2
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6812      	ldr	r2, [r2, #0]
 8001eb8:	430b      	orrs	r3, r1
 8001eba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695a      	ldr	r2, [r3, #20]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0201 	orr.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2220      	movs	r2, #32
 8001ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	000186a0 	.word	0x000186a0
 8001f14:	001e847f 	.word	0x001e847f
 8001f18:	003d08ff 	.word	0x003d08ff
 8001f1c:	431bde83 	.word	0x431bde83
 8001f20:	10624dd3 	.word	0x10624dd3

08001f24 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af02      	add	r7, sp, #8
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	4608      	mov	r0, r1
 8001f2e:	4611      	mov	r1, r2
 8001f30:	461a      	mov	r2, r3
 8001f32:	4603      	mov	r3, r0
 8001f34:	817b      	strh	r3, [r7, #10]
 8001f36:	460b      	mov	r3, r1
 8001f38:	813b      	strh	r3, [r7, #8]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f3e:	f7fe fef3 	bl	8000d28 <HAL_GetTick>
 8001f42:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b20      	cmp	r3, #32
 8001f4e:	f040 80d9 	bne.w	8002104 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	2319      	movs	r3, #25
 8001f58:	2201      	movs	r2, #1
 8001f5a:	496d      	ldr	r1, [pc, #436]	; (8002110 <HAL_I2C_Mem_Write+0x1ec>)
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f000 f971 	bl	8002244 <I2C_WaitOnFlagUntilTimeout>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	e0cc      	b.n	8002106 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d101      	bne.n	8001f7a <HAL_I2C_Mem_Write+0x56>
 8001f76:	2302      	movs	r3, #2
 8001f78:	e0c5      	b.n	8002106 <HAL_I2C_Mem_Write+0x1e2>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d007      	beq.n	8001fa0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0201 	orr.w	r2, r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2221      	movs	r2, #33	; 0x21
 8001fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2240      	movs	r2, #64	; 0x40
 8001fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6a3a      	ldr	r2, [r7, #32]
 8001fca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001fd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4a4d      	ldr	r2, [pc, #308]	; (8002114 <HAL_I2C_Mem_Write+0x1f0>)
 8001fe0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001fe2:	88f8      	ldrh	r0, [r7, #6]
 8001fe4:	893a      	ldrh	r2, [r7, #8]
 8001fe6:	8979      	ldrh	r1, [r7, #10]
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	9301      	str	r3, [sp, #4]
 8001fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 f890 	bl	8002118 <I2C_RequestMemoryWrite>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d052      	beq.n	80020a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e081      	b.n	8002106 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 fa36 	bl	8002478 <I2C_WaitOnTXEFlagUntilTimeout>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00d      	beq.n	800202e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	2b04      	cmp	r3, #4
 8002018:	d107      	bne.n	800202a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002028:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e06b      	b.n	8002106 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	781a      	ldrb	r2, [r3, #0]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203e:	1c5a      	adds	r2, r3, #1
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002048:	3b01      	subs	r3, #1
 800204a:	b29a      	uxth	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002054:	b29b      	uxth	r3, r3
 8002056:	3b01      	subs	r3, #1
 8002058:	b29a      	uxth	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b04      	cmp	r3, #4
 800206a:	d11b      	bne.n	80020a4 <HAL_I2C_Mem_Write+0x180>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002070:	2b00      	cmp	r3, #0
 8002072:	d017      	beq.n	80020a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	781a      	ldrb	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	1c5a      	adds	r2, r3, #1
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800208e:	3b01      	subs	r3, #1
 8002090:	b29a      	uxth	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209a:	b29b      	uxth	r3, r3
 800209c:	3b01      	subs	r3, #1
 800209e:	b29a      	uxth	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1aa      	bne.n	8002002 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f000 fa29 	bl	8002508 <I2C_WaitOnBTFFlagUntilTimeout>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00d      	beq.n	80020d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d107      	bne.n	80020d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e016      	b.n	8002106 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2220      	movs	r2, #32
 80020ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002100:	2300      	movs	r3, #0
 8002102:	e000      	b.n	8002106 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002104:	2302      	movs	r3, #2
  }
}
 8002106:	4618      	mov	r0, r3
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	00100002 	.word	0x00100002
 8002114:	ffff0000 	.word	0xffff0000

08002118 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af02      	add	r7, sp, #8
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	4608      	mov	r0, r1
 8002122:	4611      	mov	r1, r2
 8002124:	461a      	mov	r2, r3
 8002126:	4603      	mov	r3, r0
 8002128:	817b      	strh	r3, [r7, #10]
 800212a:	460b      	mov	r3, r1
 800212c:	813b      	strh	r3, [r7, #8]
 800212e:	4613      	mov	r3, r2
 8002130:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002140:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	6a3b      	ldr	r3, [r7, #32]
 8002148:	2200      	movs	r2, #0
 800214a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 f878 	bl	8002244 <I2C_WaitOnFlagUntilTimeout>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00d      	beq.n	8002176 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002168:	d103      	bne.n	8002172 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002170:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e05f      	b.n	8002236 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002176:	897b      	ldrh	r3, [r7, #10]
 8002178:	b2db      	uxtb	r3, r3
 800217a:	461a      	mov	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002184:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	6a3a      	ldr	r2, [r7, #32]
 800218a:	492d      	ldr	r1, [pc, #180]	; (8002240 <I2C_RequestMemoryWrite+0x128>)
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f000 f8d3 	bl	8002338 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e04c      	b.n	8002236 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	617b      	str	r3, [r7, #20]
 80021b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b4:	6a39      	ldr	r1, [r7, #32]
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 f95e 	bl	8002478 <I2C_WaitOnTXEFlagUntilTimeout>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00d      	beq.n	80021de <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d107      	bne.n	80021da <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e02b      	b.n	8002236 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021de:	88fb      	ldrh	r3, [r7, #6]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d105      	bne.n	80021f0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021e4:	893b      	ldrh	r3, [r7, #8]
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	611a      	str	r2, [r3, #16]
 80021ee:	e021      	b.n	8002234 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80021f0:	893b      	ldrh	r3, [r7, #8]
 80021f2:	0a1b      	lsrs	r3, r3, #8
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002200:	6a39      	ldr	r1, [r7, #32]
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 f938 	bl	8002478 <I2C_WaitOnTXEFlagUntilTimeout>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00d      	beq.n	800222a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	2b04      	cmp	r3, #4
 8002214:	d107      	bne.n	8002226 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002224:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e005      	b.n	8002236 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800222a:	893b      	ldrh	r3, [r7, #8]
 800222c:	b2da      	uxtb	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	00010002 	.word	0x00010002

08002244 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	603b      	str	r3, [r7, #0]
 8002250:	4613      	mov	r3, r2
 8002252:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002254:	e048      	b.n	80022e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800225c:	d044      	beq.n	80022e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800225e:	f7fe fd63 	bl	8000d28 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d302      	bcc.n	8002274 <I2C_WaitOnFlagUntilTimeout+0x30>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d139      	bne.n	80022e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	0c1b      	lsrs	r3, r3, #16
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b01      	cmp	r3, #1
 800227c:	d10d      	bne.n	800229a <I2C_WaitOnFlagUntilTimeout+0x56>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	43da      	mvns	r2, r3
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	4013      	ands	r3, r2
 800228a:	b29b      	uxth	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	bf0c      	ite	eq
 8002290:	2301      	moveq	r3, #1
 8002292:	2300      	movne	r3, #0
 8002294:	b2db      	uxtb	r3, r3
 8002296:	461a      	mov	r2, r3
 8002298:	e00c      	b.n	80022b4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	43da      	mvns	r2, r3
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	4013      	ands	r3, r2
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	bf0c      	ite	eq
 80022ac:	2301      	moveq	r3, #1
 80022ae:	2300      	movne	r3, #0
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	461a      	mov	r2, r3
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d116      	bne.n	80022e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2220      	movs	r2, #32
 80022c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	f043 0220 	orr.w	r2, r3, #32
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e023      	b.n	8002330 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	0c1b      	lsrs	r3, r3, #16
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d10d      	bne.n	800230e <I2C_WaitOnFlagUntilTimeout+0xca>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	43da      	mvns	r2, r3
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	4013      	ands	r3, r2
 80022fe:	b29b      	uxth	r3, r3
 8002300:	2b00      	cmp	r3, #0
 8002302:	bf0c      	ite	eq
 8002304:	2301      	moveq	r3, #1
 8002306:	2300      	movne	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	461a      	mov	r2, r3
 800230c:	e00c      	b.n	8002328 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	43da      	mvns	r2, r3
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	4013      	ands	r3, r2
 800231a:	b29b      	uxth	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	bf0c      	ite	eq
 8002320:	2301      	moveq	r3, #1
 8002322:	2300      	movne	r3, #0
 8002324:	b2db      	uxtb	r3, r3
 8002326:	461a      	mov	r2, r3
 8002328:	79fb      	ldrb	r3, [r7, #7]
 800232a:	429a      	cmp	r2, r3
 800232c:	d093      	beq.n	8002256 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
 8002344:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002346:	e071      	b.n	800242c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002356:	d123      	bne.n	80023a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002366:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002370:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2220      	movs	r2, #32
 800237c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	f043 0204 	orr.w	r2, r3, #4
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e067      	b.n	8002470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a6:	d041      	beq.n	800242c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023a8:	f7fe fcbe 	bl	8000d28 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d302      	bcc.n	80023be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d136      	bne.n	800242c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	0c1b      	lsrs	r3, r3, #16
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d10c      	bne.n	80023e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	43da      	mvns	r2, r3
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	4013      	ands	r3, r2
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	bf14      	ite	ne
 80023da:	2301      	movne	r3, #1
 80023dc:	2300      	moveq	r3, #0
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	e00b      	b.n	80023fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	43da      	mvns	r2, r3
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	4013      	ands	r3, r2
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	bf14      	ite	ne
 80023f4:	2301      	movne	r3, #1
 80023f6:	2300      	moveq	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d016      	beq.n	800242c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	f043 0220 	orr.w	r2, r3, #32
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e021      	b.n	8002470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	0c1b      	lsrs	r3, r3, #16
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b01      	cmp	r3, #1
 8002434:	d10c      	bne.n	8002450 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	43da      	mvns	r2, r3
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	4013      	ands	r3, r2
 8002442:	b29b      	uxth	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	bf14      	ite	ne
 8002448:	2301      	movne	r3, #1
 800244a:	2300      	moveq	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	e00b      	b.n	8002468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	43da      	mvns	r2, r3
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	4013      	ands	r3, r2
 800245c:	b29b      	uxth	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	bf14      	ite	ne
 8002462:	2301      	movne	r3, #1
 8002464:	2300      	moveq	r3, #0
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	f47f af6d 	bne.w	8002348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002484:	e034      	b.n	80024f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f000 f886 	bl	8002598 <I2C_IsAcknowledgeFailed>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e034      	b.n	8002500 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800249c:	d028      	beq.n	80024f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800249e:	f7fe fc43 	bl	8000d28 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d302      	bcc.n	80024b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d11d      	bne.n	80024f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024be:	2b80      	cmp	r3, #128	; 0x80
 80024c0:	d016      	beq.n	80024f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2220      	movs	r2, #32
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	f043 0220 	orr.w	r2, r3, #32
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e007      	b.n	8002500 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fa:	2b80      	cmp	r3, #128	; 0x80
 80024fc:	d1c3      	bne.n	8002486 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002514:	e034      	b.n	8002580 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 f83e 	bl	8002598 <I2C_IsAcknowledgeFailed>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e034      	b.n	8002590 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252c:	d028      	beq.n	8002580 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800252e:	f7fe fbfb 	bl	8000d28 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	429a      	cmp	r2, r3
 800253c:	d302      	bcc.n	8002544 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d11d      	bne.n	8002580 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b04      	cmp	r3, #4
 8002550:	d016      	beq.n	8002580 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2220      	movs	r2, #32
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	f043 0220 	orr.w	r2, r3, #32
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e007      	b.n	8002590 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	2b04      	cmp	r3, #4
 800258c:	d1c3      	bne.n	8002516 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ae:	d11b      	bne.n	80025e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2220      	movs	r2, #32
 80025c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d4:	f043 0204 	orr.w	r2, r3, #4
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e000      	b.n	80025ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e272      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	f000 8087 	beq.w	8002722 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002614:	4b92      	ldr	r3, [pc, #584]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 030c 	and.w	r3, r3, #12
 800261c:	2b04      	cmp	r3, #4
 800261e:	d00c      	beq.n	800263a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002620:	4b8f      	ldr	r3, [pc, #572]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f003 030c 	and.w	r3, r3, #12
 8002628:	2b08      	cmp	r3, #8
 800262a:	d112      	bne.n	8002652 <HAL_RCC_OscConfig+0x5e>
 800262c:	4b8c      	ldr	r3, [pc, #560]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002638:	d10b      	bne.n	8002652 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800263a:	4b89      	ldr	r3, [pc, #548]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d06c      	beq.n	8002720 <HAL_RCC_OscConfig+0x12c>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d168      	bne.n	8002720 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e24c      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800265a:	d106      	bne.n	800266a <HAL_RCC_OscConfig+0x76>
 800265c:	4b80      	ldr	r3, [pc, #512]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a7f      	ldr	r2, [pc, #508]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002662:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	e02e      	b.n	80026c8 <HAL_RCC_OscConfig+0xd4>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10c      	bne.n	800268c <HAL_RCC_OscConfig+0x98>
 8002672:	4b7b      	ldr	r3, [pc, #492]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a7a      	ldr	r2, [pc, #488]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002678:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	4b78      	ldr	r3, [pc, #480]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a77      	ldr	r2, [pc, #476]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002684:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	e01d      	b.n	80026c8 <HAL_RCC_OscConfig+0xd4>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002694:	d10c      	bne.n	80026b0 <HAL_RCC_OscConfig+0xbc>
 8002696:	4b72      	ldr	r3, [pc, #456]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a71      	ldr	r2, [pc, #452]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800269c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	4b6f      	ldr	r3, [pc, #444]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a6e      	ldr	r2, [pc, #440]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80026a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	e00b      	b.n	80026c8 <HAL_RCC_OscConfig+0xd4>
 80026b0:	4b6b      	ldr	r3, [pc, #428]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a6a      	ldr	r2, [pc, #424]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80026b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	4b68      	ldr	r3, [pc, #416]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a67      	ldr	r2, [pc, #412]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80026c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d013      	beq.n	80026f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d0:	f7fe fb2a 	bl	8000d28 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d8:	f7fe fb26 	bl	8000d28 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b64      	cmp	r3, #100	; 0x64
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e200      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ea:	4b5d      	ldr	r3, [pc, #372]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCC_OscConfig+0xe4>
 80026f6:	e014      	b.n	8002722 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7fe fb16 	bl	8000d28 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002700:	f7fe fb12 	bl	8000d28 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b64      	cmp	r3, #100	; 0x64
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e1ec      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002712:	4b53      	ldr	r3, [pc, #332]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f0      	bne.n	8002700 <HAL_RCC_OscConfig+0x10c>
 800271e:	e000      	b.n	8002722 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d063      	beq.n	80027f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800272e:	4b4c      	ldr	r3, [pc, #304]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f003 030c 	and.w	r3, r3, #12
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00b      	beq.n	8002752 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800273a:	4b49      	ldr	r3, [pc, #292]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 030c 	and.w	r3, r3, #12
 8002742:	2b08      	cmp	r3, #8
 8002744:	d11c      	bne.n	8002780 <HAL_RCC_OscConfig+0x18c>
 8002746:	4b46      	ldr	r3, [pc, #280]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d116      	bne.n	8002780 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002752:	4b43      	ldr	r3, [pc, #268]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d005      	beq.n	800276a <HAL_RCC_OscConfig+0x176>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d001      	beq.n	800276a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e1c0      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276a:	4b3d      	ldr	r3, [pc, #244]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	4939      	ldr	r1, [pc, #228]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800277a:	4313      	orrs	r3, r2
 800277c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800277e:	e03a      	b.n	80027f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d020      	beq.n	80027ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002788:	4b36      	ldr	r3, [pc, #216]	; (8002864 <HAL_RCC_OscConfig+0x270>)
 800278a:	2201      	movs	r2, #1
 800278c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278e:	f7fe facb 	bl	8000d28 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002796:	f7fe fac7 	bl	8000d28 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e1a1      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a8:	4b2d      	ldr	r3, [pc, #180]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0f0      	beq.n	8002796 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b4:	4b2a      	ldr	r3, [pc, #168]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	4927      	ldr	r1, [pc, #156]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	600b      	str	r3, [r1, #0]
 80027c8:	e015      	b.n	80027f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ca:	4b26      	ldr	r3, [pc, #152]	; (8002864 <HAL_RCC_OscConfig+0x270>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d0:	f7fe faaa 	bl	8000d28 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027d8:	f7fe faa6 	bl	8000d28 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e180      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ea:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d03a      	beq.n	8002878 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d019      	beq.n	800283e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800280a:	4b17      	ldr	r3, [pc, #92]	; (8002868 <HAL_RCC_OscConfig+0x274>)
 800280c:	2201      	movs	r2, #1
 800280e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002810:	f7fe fa8a 	bl	8000d28 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002818:	f7fe fa86 	bl	8000d28 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e160      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282a:	4b0d      	ldr	r3, [pc, #52]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f0      	beq.n	8002818 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002836:	2001      	movs	r0, #1
 8002838:	f000 face 	bl	8002dd8 <RCC_Delay>
 800283c:	e01c      	b.n	8002878 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800283e:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <HAL_RCC_OscConfig+0x274>)
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002844:	f7fe fa70 	bl	8000d28 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800284a:	e00f      	b.n	800286c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800284c:	f7fe fa6c 	bl	8000d28 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d908      	bls.n	800286c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e146      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000
 8002864:	42420000 	.word	0x42420000
 8002868:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800286c:	4b92      	ldr	r3, [pc, #584]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1e9      	bne.n	800284c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 80a6 	beq.w	80029d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002886:	2300      	movs	r3, #0
 8002888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800288a:	4b8b      	ldr	r3, [pc, #556]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10d      	bne.n	80028b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002896:	4b88      	ldr	r3, [pc, #544]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	4a87      	ldr	r2, [pc, #540]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 800289c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a0:	61d3      	str	r3, [r2, #28]
 80028a2:	4b85      	ldr	r3, [pc, #532]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ae:	2301      	movs	r3, #1
 80028b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b2:	4b82      	ldr	r3, [pc, #520]	; (8002abc <HAL_RCC_OscConfig+0x4c8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d118      	bne.n	80028f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028be:	4b7f      	ldr	r3, [pc, #508]	; (8002abc <HAL_RCC_OscConfig+0x4c8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a7e      	ldr	r2, [pc, #504]	; (8002abc <HAL_RCC_OscConfig+0x4c8>)
 80028c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ca:	f7fe fa2d 	bl	8000d28 <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028d2:	f7fe fa29 	bl	8000d28 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b64      	cmp	r3, #100	; 0x64
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e103      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e4:	4b75      	ldr	r3, [pc, #468]	; (8002abc <HAL_RCC_OscConfig+0x4c8>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0f0      	beq.n	80028d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d106      	bne.n	8002906 <HAL_RCC_OscConfig+0x312>
 80028f8:	4b6f      	ldr	r3, [pc, #444]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	4a6e      	ldr	r2, [pc, #440]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 80028fe:	f043 0301 	orr.w	r3, r3, #1
 8002902:	6213      	str	r3, [r2, #32]
 8002904:	e02d      	b.n	8002962 <HAL_RCC_OscConfig+0x36e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10c      	bne.n	8002928 <HAL_RCC_OscConfig+0x334>
 800290e:	4b6a      	ldr	r3, [pc, #424]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	4a69      	ldr	r2, [pc, #420]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002914:	f023 0301 	bic.w	r3, r3, #1
 8002918:	6213      	str	r3, [r2, #32]
 800291a:	4b67      	ldr	r3, [pc, #412]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	4a66      	ldr	r2, [pc, #408]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002920:	f023 0304 	bic.w	r3, r3, #4
 8002924:	6213      	str	r3, [r2, #32]
 8002926:	e01c      	b.n	8002962 <HAL_RCC_OscConfig+0x36e>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	2b05      	cmp	r3, #5
 800292e:	d10c      	bne.n	800294a <HAL_RCC_OscConfig+0x356>
 8002930:	4b61      	ldr	r3, [pc, #388]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	4a60      	ldr	r2, [pc, #384]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002936:	f043 0304 	orr.w	r3, r3, #4
 800293a:	6213      	str	r3, [r2, #32]
 800293c:	4b5e      	ldr	r3, [pc, #376]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	4a5d      	ldr	r2, [pc, #372]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002942:	f043 0301 	orr.w	r3, r3, #1
 8002946:	6213      	str	r3, [r2, #32]
 8002948:	e00b      	b.n	8002962 <HAL_RCC_OscConfig+0x36e>
 800294a:	4b5b      	ldr	r3, [pc, #364]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	4a5a      	ldr	r2, [pc, #360]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002950:	f023 0301 	bic.w	r3, r3, #1
 8002954:	6213      	str	r3, [r2, #32]
 8002956:	4b58      	ldr	r3, [pc, #352]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	4a57      	ldr	r2, [pc, #348]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 800295c:	f023 0304 	bic.w	r3, r3, #4
 8002960:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d015      	beq.n	8002996 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800296a:	f7fe f9dd 	bl	8000d28 <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002970:	e00a      	b.n	8002988 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002972:	f7fe f9d9 	bl	8000d28 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002980:	4293      	cmp	r3, r2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e0b1      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002988:	4b4b      	ldr	r3, [pc, #300]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0ee      	beq.n	8002972 <HAL_RCC_OscConfig+0x37e>
 8002994:	e014      	b.n	80029c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002996:	f7fe f9c7 	bl	8000d28 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800299c:	e00a      	b.n	80029b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299e:	f7fe f9c3 	bl	8000d28 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e09b      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029b4:	4b40      	ldr	r3, [pc, #256]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1ee      	bne.n	800299e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029c0:	7dfb      	ldrb	r3, [r7, #23]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d105      	bne.n	80029d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029c6:	4b3c      	ldr	r3, [pc, #240]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	4a3b      	ldr	r2, [pc, #236]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 80029cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 8087 	beq.w	8002aea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029dc:	4b36      	ldr	r3, [pc, #216]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 030c 	and.w	r3, r3, #12
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d061      	beq.n	8002aac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	69db      	ldr	r3, [r3, #28]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d146      	bne.n	8002a7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029f0:	4b33      	ldr	r3, [pc, #204]	; (8002ac0 <HAL_RCC_OscConfig+0x4cc>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f6:	f7fe f997 	bl	8000d28 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029fe:	f7fe f993 	bl	8000d28 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e06d      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a10:	4b29      	ldr	r3, [pc, #164]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1f0      	bne.n	80029fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a24:	d108      	bne.n	8002a38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a26:	4b24      	ldr	r3, [pc, #144]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	4921      	ldr	r1, [pc, #132]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a38:	4b1f      	ldr	r3, [pc, #124]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a19      	ldr	r1, [r3, #32]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	430b      	orrs	r3, r1
 8002a4a:	491b      	ldr	r1, [pc, #108]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a50:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <HAL_RCC_OscConfig+0x4cc>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a56:	f7fe f967 	bl	8000d28 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a5e:	f7fe f963 	bl	8000d28 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e03d      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a70:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0f0      	beq.n	8002a5e <HAL_RCC_OscConfig+0x46a>
 8002a7c:	e035      	b.n	8002aea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a7e:	4b10      	ldr	r3, [pc, #64]	; (8002ac0 <HAL_RCC_OscConfig+0x4cc>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a84:	f7fe f950 	bl	8000d28 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8c:	f7fe f94c 	bl	8000d28 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e026      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a9e:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x498>
 8002aaa:	e01e      	b.n	8002aea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d107      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e019      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	40007000 	.word	0x40007000
 8002ac0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ac4:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <HAL_RCC_OscConfig+0x500>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d106      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d001      	beq.n	8002aea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40021000 	.word	0x40021000

08002af8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0d0      	b.n	8002cae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b0c:	4b6a      	ldr	r3, [pc, #424]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d910      	bls.n	8002b3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1a:	4b67      	ldr	r3, [pc, #412]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f023 0207 	bic.w	r2, r3, #7
 8002b22:	4965      	ldr	r1, [pc, #404]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2a:	4b63      	ldr	r3, [pc, #396]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e0b8      	b.n	8002cae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d020      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b54:	4b59      	ldr	r3, [pc, #356]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	4a58      	ldr	r2, [pc, #352]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b6c:	4b53      	ldr	r3, [pc, #332]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	4a52      	ldr	r2, [pc, #328]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b78:	4b50      	ldr	r3, [pc, #320]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	494d      	ldr	r1, [pc, #308]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d040      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d107      	bne.n	8002bae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9e:	4b47      	ldr	r3, [pc, #284]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d115      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e07f      	b.n	8002cae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d107      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bb6:	4b41      	ldr	r3, [pc, #260]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d109      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e073      	b.n	8002cae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc6:	4b3d      	ldr	r3, [pc, #244]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e06b      	b.n	8002cae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bd6:	4b39      	ldr	r3, [pc, #228]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f023 0203 	bic.w	r2, r3, #3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	4936      	ldr	r1, [pc, #216]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002be8:	f7fe f89e 	bl	8000d28 <HAL_GetTick>
 8002bec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bee:	e00a      	b.n	8002c06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf0:	f7fe f89a 	bl	8000d28 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e053      	b.n	8002cae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c06:	4b2d      	ldr	r3, [pc, #180]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 020c 	and.w	r2, r3, #12
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d1eb      	bne.n	8002bf0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c18:	4b27      	ldr	r3, [pc, #156]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d210      	bcs.n	8002c48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c26:	4b24      	ldr	r3, [pc, #144]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f023 0207 	bic.w	r2, r3, #7
 8002c2e:	4922      	ldr	r1, [pc, #136]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c36:	4b20      	ldr	r3, [pc, #128]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0307 	and.w	r3, r3, #7
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e032      	b.n	8002cae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c54:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	4916      	ldr	r1, [pc, #88]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d009      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c72:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	490e      	ldr	r1, [pc, #56]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c86:	f000 f821 	bl	8002ccc <HAL_RCC_GetSysClockFreq>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	091b      	lsrs	r3, r3, #4
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	490a      	ldr	r1, [pc, #40]	; (8002cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c98:	5ccb      	ldrb	r3, [r1, r3]
 8002c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c9e:	4a09      	ldr	r2, [pc, #36]	; (8002cc4 <HAL_RCC_ClockConfig+0x1cc>)
 8002ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ca2:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <HAL_RCC_ClockConfig+0x1d0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fd fffc 	bl	8000ca4 <HAL_InitTick>

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40022000 	.word	0x40022000
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	08003eb4 	.word	0x08003eb4
 8002cc4:	2000000c 	.word	0x2000000c
 8002cc8:	20000010 	.word	0x20000010

08002ccc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b087      	sub	sp, #28
 8002cd0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60bb      	str	r3, [r7, #8]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]
 8002cde:	2300      	movs	r3, #0
 8002ce0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ce6:	4b1e      	ldr	r3, [pc, #120]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f003 030c 	and.w	r3, r3, #12
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d002      	beq.n	8002cfc <HAL_RCC_GetSysClockFreq+0x30>
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d003      	beq.n	8002d02 <HAL_RCC_GetSysClockFreq+0x36>
 8002cfa:	e027      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cfc:	4b19      	ldr	r3, [pc, #100]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cfe:	613b      	str	r3, [r7, #16]
      break;
 8002d00:	e027      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	0c9b      	lsrs	r3, r3, #18
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	4a17      	ldr	r2, [pc, #92]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d0c:	5cd3      	ldrb	r3, [r2, r3]
 8002d0e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d010      	beq.n	8002d3c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d1a:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	0c5b      	lsrs	r3, r3, #17
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	4a11      	ldr	r2, [pc, #68]	; (8002d6c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d26:	5cd3      	ldrb	r3, [r2, r3]
 8002d28:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a0d      	ldr	r2, [pc, #52]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d2e:	fb03 f202 	mul.w	r2, r3, r2
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d38:	617b      	str	r3, [r7, #20]
 8002d3a:	e004      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a0c      	ldr	r2, [pc, #48]	; (8002d70 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d40:	fb02 f303 	mul.w	r3, r2, r3
 8002d44:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	613b      	str	r3, [r7, #16]
      break;
 8002d4a:	e002      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d4c:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d4e:	613b      	str	r3, [r7, #16]
      break;
 8002d50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d52:	693b      	ldr	r3, [r7, #16]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	371c      	adds	r7, #28
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40021000 	.word	0x40021000
 8002d64:	007a1200 	.word	0x007a1200
 8002d68:	08004c34 	.word	0x08004c34
 8002d6c:	08004c44 	.word	0x08004c44
 8002d70:	003d0900 	.word	0x003d0900

08002d74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d78:	4b02      	ldr	r3, [pc, #8]	; (8002d84 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr
 8002d84:	2000000c 	.word	0x2000000c

08002d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d8c:	f7ff fff2 	bl	8002d74 <HAL_RCC_GetHCLKFreq>
 8002d90:	4602      	mov	r2, r0
 8002d92:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	0a1b      	lsrs	r3, r3, #8
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	4903      	ldr	r1, [pc, #12]	; (8002dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d9e:	5ccb      	ldrb	r3, [r1, r3]
 8002da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40021000 	.word	0x40021000
 8002dac:	08003ec4 	.word	0x08003ec4

08002db0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002db4:	f7ff ffde 	bl	8002d74 <HAL_RCC_GetHCLKFreq>
 8002db8:	4602      	mov	r2, r0
 8002dba:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	0adb      	lsrs	r3, r3, #11
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	4903      	ldr	r1, [pc, #12]	; (8002dd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dc6:	5ccb      	ldrb	r3, [r1, r3]
 8002dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	08003ec4 	.word	0x08003ec4

08002dd8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002de0:	4b0a      	ldr	r3, [pc, #40]	; (8002e0c <RCC_Delay+0x34>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a0a      	ldr	r2, [pc, #40]	; (8002e10 <RCC_Delay+0x38>)
 8002de6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dea:	0a5b      	lsrs	r3, r3, #9
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	fb02 f303 	mul.w	r3, r2, r3
 8002df2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002df4:	bf00      	nop
  }
  while (Delay --);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	1e5a      	subs	r2, r3, #1
 8002dfa:	60fa      	str	r2, [r7, #12]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1f9      	bne.n	8002df4 <RCC_Delay+0x1c>
}
 8002e00:	bf00      	nop
 8002e02:	bf00      	nop
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr
 8002e0c:	2000000c 	.word	0x2000000c
 8002e10:	10624dd3 	.word	0x10624dd3

08002e14 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	2300      	movs	r3, #0
 8002e22:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d07d      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002e30:	2300      	movs	r3, #0
 8002e32:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e34:	4b4f      	ldr	r3, [pc, #316]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10d      	bne.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e40:	4b4c      	ldr	r3, [pc, #304]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e42:	69db      	ldr	r3, [r3, #28]
 8002e44:	4a4b      	ldr	r2, [pc, #300]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e4a:	61d3      	str	r3, [r2, #28]
 8002e4c:	4b49      	ldr	r3, [pc, #292]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e54:	60bb      	str	r3, [r7, #8]
 8002e56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5c:	4b46      	ldr	r3, [pc, #280]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d118      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e68:	4b43      	ldr	r3, [pc, #268]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a42      	ldr	r2, [pc, #264]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e74:	f7fd ff58 	bl	8000d28 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7a:	e008      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e7c:	f7fd ff54 	bl	8000d28 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b64      	cmp	r3, #100	; 0x64
 8002e88:	d901      	bls.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e06d      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e8e:	4b3a      	ldr	r3, [pc, #232]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0f0      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e9a:	4b36      	ldr	r3, [pc, #216]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ea2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d02e      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d027      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002eb8:	4b2e      	ldr	r3, [pc, #184]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ec0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ec2:	4b2e      	ldr	r3, [pc, #184]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ec8:	4b2c      	ldr	r3, [pc, #176]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ece:	4a29      	ldr	r2, [pc, #164]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d014      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ede:	f7fd ff23 	bl	8000d28 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee4:	e00a      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee6:	f7fd ff1f 	bl	8000d28 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e036      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002efc:	4b1d      	ldr	r3, [pc, #116]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0ee      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f08:	4b1a      	ldr	r3, [pc, #104]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	4917      	ldr	r1, [pc, #92]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f1a:	7dfb      	ldrb	r3, [r7, #23]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d105      	bne.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f20:	4b14      	ldr	r3, [pc, #80]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	4a13      	ldr	r2, [pc, #76]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f2a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d008      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f38:	4b0e      	ldr	r3, [pc, #56]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	490b      	ldr	r1, [pc, #44]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0310 	and.w	r3, r3, #16
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d008      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f56:	4b07      	ldr	r3, [pc, #28]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	4904      	ldr	r1, [pc, #16]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40007000 	.word	0x40007000
 8002f7c:	42420440 	.word	0x42420440

08002f80 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	61fb      	str	r3, [r7, #28]
 8002f90:	2300      	movs	r3, #0
 8002f92:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002f94:	2300      	movs	r3, #0
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	2300      	movs	r3, #0
 8002f9a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b10      	cmp	r3, #16
 8002fa0:	d00a      	beq.n	8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b10      	cmp	r3, #16
 8002fa6:	f200 808a 	bhi.w	80030be <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d045      	beq.n	800303c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d075      	beq.n	80030a2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002fb6:	e082      	b.n	80030be <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002fb8:	4b46      	ldr	r3, [pc, #280]	; (80030d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002fbe:	4b45      	ldr	r3, [pc, #276]	; (80030d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d07b      	beq.n	80030c2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	0c9b      	lsrs	r3, r3, #18
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	4a41      	ldr	r2, [pc, #260]	; (80030d8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002fd4:	5cd3      	ldrb	r3, [r2, r3]
 8002fd6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d015      	beq.n	800300e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fe2:	4b3c      	ldr	r3, [pc, #240]	; (80030d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	0c5b      	lsrs	r3, r3, #17
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	4a3b      	ldr	r2, [pc, #236]	; (80030dc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002fee:	5cd3      	ldrb	r3, [r2, r3]
 8002ff0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00d      	beq.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002ffc:	4a38      	ldr	r2, [pc, #224]	; (80030e0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	fbb2 f2f3 	udiv	r2, r2, r3
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	fb02 f303 	mul.w	r3, r2, r3
 800300a:	61fb      	str	r3, [r7, #28]
 800300c:	e004      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	4a34      	ldr	r2, [pc, #208]	; (80030e4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003012:	fb02 f303 	mul.w	r3, r2, r3
 8003016:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003018:	4b2e      	ldr	r3, [pc, #184]	; (80030d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003020:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003024:	d102      	bne.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	61bb      	str	r3, [r7, #24]
      break;
 800302a:	e04a      	b.n	80030c2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	4a2d      	ldr	r2, [pc, #180]	; (80030e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003032:	fba2 2303 	umull	r2, r3, r2, r3
 8003036:	085b      	lsrs	r3, r3, #1
 8003038:	61bb      	str	r3, [r7, #24]
      break;
 800303a:	e042      	b.n	80030c2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800303c:	4b25      	ldr	r3, [pc, #148]	; (80030d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800304c:	d108      	bne.n	8003060 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003058:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800305c:	61bb      	str	r3, [r7, #24]
 800305e:	e01f      	b.n	80030a0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003066:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800306a:	d109      	bne.n	8003080 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800306c:	4b19      	ldr	r3, [pc, #100]	; (80030d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d003      	beq.n	8003080 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003078:	f649 4340 	movw	r3, #40000	; 0x9c40
 800307c:	61bb      	str	r3, [r7, #24]
 800307e:	e00f      	b.n	80030a0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003086:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800308a:	d11c      	bne.n	80030c6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800308c:	4b11      	ldr	r3, [pc, #68]	; (80030d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d016      	beq.n	80030c6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003098:	f24f 4324 	movw	r3, #62500	; 0xf424
 800309c:	61bb      	str	r3, [r7, #24]
      break;
 800309e:	e012      	b.n	80030c6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80030a0:	e011      	b.n	80030c6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80030a2:	f7ff fe85 	bl	8002db0 <HAL_RCC_GetPCLK2Freq>
 80030a6:	4602      	mov	r2, r0
 80030a8:	4b0a      	ldr	r3, [pc, #40]	; (80030d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	0b9b      	lsrs	r3, r3, #14
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	3301      	adds	r3, #1
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ba:	61bb      	str	r3, [r7, #24]
      break;
 80030bc:	e004      	b.n	80030c8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80030be:	bf00      	nop
 80030c0:	e002      	b.n	80030c8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80030c2:	bf00      	nop
 80030c4:	e000      	b.n	80030c8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80030c6:	bf00      	nop
    }
  }
  return (frequency);
 80030c8:	69bb      	ldr	r3, [r7, #24]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3720      	adds	r7, #32
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40021000 	.word	0x40021000
 80030d8:	08004c48 	.word	0x08004c48
 80030dc:	08004c58 	.word	0x08004c58
 80030e0:	007a1200 	.word	0x007a1200
 80030e4:	003d0900 	.word	0x003d0900
 80030e8:	aaaaaaab 	.word	0xaaaaaaab

080030ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e042      	b.n	8003184 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d106      	bne.n	8003118 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7fd fa9c 	bl	8000650 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2224      	movs	r2, #36	; 0x24
 800311c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800312e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 f971 	bl	8003418 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	691a      	ldr	r2, [r3, #16]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003144:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	695a      	ldr	r2, [r3, #20]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003154:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68da      	ldr	r2, [r3, #12]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003164:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2220      	movs	r2, #32
 8003170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2220      	movs	r2, #32
 8003178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b08a      	sub	sp, #40	; 0x28
 8003190:	af02      	add	r7, sp, #8
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	603b      	str	r3, [r7, #0]
 8003198:	4613      	mov	r3, r2
 800319a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b20      	cmp	r3, #32
 80031aa:	d175      	bne.n	8003298 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d002      	beq.n	80031b8 <HAL_UART_Transmit+0x2c>
 80031b2:	88fb      	ldrh	r3, [r7, #6]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e06e      	b.n	800329a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2221      	movs	r2, #33	; 0x21
 80031c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031ca:	f7fd fdad 	bl	8000d28 <HAL_GetTick>
 80031ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	88fa      	ldrh	r2, [r7, #6]
 80031d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	88fa      	ldrh	r2, [r7, #6]
 80031da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e4:	d108      	bne.n	80031f8 <HAL_UART_Transmit+0x6c>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d104      	bne.n	80031f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	61bb      	str	r3, [r7, #24]
 80031f6:	e003      	b.n	8003200 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031fc:	2300      	movs	r3, #0
 80031fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003200:	e02e      	b.n	8003260 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	2200      	movs	r2, #0
 800320a:	2180      	movs	r1, #128	; 0x80
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 f848 	bl	80032a2 <UART_WaitOnFlagUntilTimeout>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e03a      	b.n	800329a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10b      	bne.n	8003242 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	881b      	ldrh	r3, [r3, #0]
 800322e:	461a      	mov	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003238:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	3302      	adds	r3, #2
 800323e:	61bb      	str	r3, [r7, #24]
 8003240:	e007      	b.n	8003252 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	781a      	ldrb	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	3301      	adds	r3, #1
 8003250:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003256:	b29b      	uxth	r3, r3
 8003258:	3b01      	subs	r3, #1
 800325a:	b29a      	uxth	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003264:	b29b      	uxth	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1cb      	bne.n	8003202 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	2200      	movs	r2, #0
 8003272:	2140      	movs	r1, #64	; 0x40
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 f814 	bl	80032a2 <UART_WaitOnFlagUntilTimeout>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d005      	beq.n	800328c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2220      	movs	r2, #32
 8003284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e006      	b.n	800329a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2220      	movs	r2, #32
 8003290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	e000      	b.n	800329a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003298:	2302      	movs	r3, #2
  }
}
 800329a:	4618      	mov	r0, r3
 800329c:	3720      	adds	r7, #32
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b086      	sub	sp, #24
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	60f8      	str	r0, [r7, #12]
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	603b      	str	r3, [r7, #0]
 80032ae:	4613      	mov	r3, r2
 80032b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032b2:	e03b      	b.n	800332c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ba:	d037      	beq.n	800332c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032bc:	f7fd fd34 	bl	8000d28 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	6a3a      	ldr	r2, [r7, #32]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d302      	bcc.n	80032d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80032cc:	6a3b      	ldr	r3, [r7, #32]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e03a      	b.n	800334c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d023      	beq.n	800332c <UART_WaitOnFlagUntilTimeout+0x8a>
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2b80      	cmp	r3, #128	; 0x80
 80032e8:	d020      	beq.n	800332c <UART_WaitOnFlagUntilTimeout+0x8a>
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2b40      	cmp	r3, #64	; 0x40
 80032ee:	d01d      	beq.n	800332c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d116      	bne.n	800332c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80032fe:	2300      	movs	r3, #0
 8003300:	617b      	str	r3, [r7, #20]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	617b      	str	r3, [r7, #20]
 8003312:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 f81d 	bl	8003354 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2208      	movs	r2, #8
 800331e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e00f      	b.n	800334c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	4013      	ands	r3, r2
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	429a      	cmp	r2, r3
 800333a:	bf0c      	ite	eq
 800333c:	2301      	moveq	r3, #1
 800333e:	2300      	movne	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	461a      	mov	r2, r3
 8003344:	79fb      	ldrb	r3, [r7, #7]
 8003346:	429a      	cmp	r2, r3
 8003348:	d0b4      	beq.n	80032b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003354:	b480      	push	{r7}
 8003356:	b095      	sub	sp, #84	; 0x54
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	330c      	adds	r3, #12
 8003362:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003366:	e853 3f00 	ldrex	r3, [r3]
 800336a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800336c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	330c      	adds	r3, #12
 800337a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800337c:	643a      	str	r2, [r7, #64]	; 0x40
 800337e:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003380:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003382:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003384:	e841 2300 	strex	r3, r2, [r1]
 8003388:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800338a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1e5      	bne.n	800335c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	3314      	adds	r3, #20
 8003396:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	e853 3f00 	ldrex	r3, [r3]
 800339e:	61fb      	str	r3, [r7, #28]
   return(result);
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f023 0301 	bic.w	r3, r3, #1
 80033a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3314      	adds	r3, #20
 80033ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033b8:	e841 2300 	strex	r3, r2, [r1]
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1e5      	bne.n	8003390 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d119      	bne.n	8003400 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	330c      	adds	r3, #12
 80033d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	e853 3f00 	ldrex	r3, [r3]
 80033da:	60bb      	str	r3, [r7, #8]
   return(result);
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f023 0310 	bic.w	r3, r3, #16
 80033e2:	647b      	str	r3, [r7, #68]	; 0x44
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	330c      	adds	r3, #12
 80033ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033ec:	61ba      	str	r2, [r7, #24]
 80033ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f0:	6979      	ldr	r1, [r7, #20]
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	e841 2300 	strex	r3, r2, [r1]
 80033f8:	613b      	str	r3, [r7, #16]
   return(result);
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1e5      	bne.n	80033cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800340e:	bf00      	nop
 8003410:	3754      	adds	r7, #84	; 0x54
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr

08003418 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	4313      	orrs	r3, r2
 8003446:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003452:	f023 030c 	bic.w	r3, r3, #12
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6812      	ldr	r2, [r2, #0]
 800345a:	68b9      	ldr	r1, [r7, #8]
 800345c:	430b      	orrs	r3, r1
 800345e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699a      	ldr	r2, [r3, #24]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a2c      	ldr	r2, [pc, #176]	; (800352c <UART_SetConfig+0x114>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d103      	bne.n	8003488 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003480:	f7ff fc96 	bl	8002db0 <HAL_RCC_GetPCLK2Freq>
 8003484:	60f8      	str	r0, [r7, #12]
 8003486:	e002      	b.n	800348e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003488:	f7ff fc7e 	bl	8002d88 <HAL_RCC_GetPCLK1Freq>
 800348c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	4613      	mov	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	009a      	lsls	r2, r3, #2
 8003498:	441a      	add	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a4:	4a22      	ldr	r2, [pc, #136]	; (8003530 <UART_SetConfig+0x118>)
 80034a6:	fba2 2303 	umull	r2, r3, r2, r3
 80034aa:	095b      	lsrs	r3, r3, #5
 80034ac:	0119      	lsls	r1, r3, #4
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	4613      	mov	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	009a      	lsls	r2, r3, #2
 80034b8:	441a      	add	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80034c4:	4b1a      	ldr	r3, [pc, #104]	; (8003530 <UART_SetConfig+0x118>)
 80034c6:	fba3 0302 	umull	r0, r3, r3, r2
 80034ca:	095b      	lsrs	r3, r3, #5
 80034cc:	2064      	movs	r0, #100	; 0x64
 80034ce:	fb00 f303 	mul.w	r3, r0, r3
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	3332      	adds	r3, #50	; 0x32
 80034d8:	4a15      	ldr	r2, [pc, #84]	; (8003530 <UART_SetConfig+0x118>)
 80034da:	fba2 2303 	umull	r2, r3, r2, r3
 80034de:	095b      	lsrs	r3, r3, #5
 80034e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034e4:	4419      	add	r1, r3
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	4613      	mov	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	009a      	lsls	r2, r3, #2
 80034f0:	441a      	add	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80034fc:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <UART_SetConfig+0x118>)
 80034fe:	fba3 0302 	umull	r0, r3, r3, r2
 8003502:	095b      	lsrs	r3, r3, #5
 8003504:	2064      	movs	r0, #100	; 0x64
 8003506:	fb00 f303 	mul.w	r3, r0, r3
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	3332      	adds	r3, #50	; 0x32
 8003510:	4a07      	ldr	r2, [pc, #28]	; (8003530 <UART_SetConfig+0x118>)
 8003512:	fba2 2303 	umull	r2, r3, r2, r3
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	f003 020f 	and.w	r2, r3, #15
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	440a      	add	r2, r1
 8003522:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003524:	bf00      	nop
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40013800 	.word	0x40013800
 8003530:	51eb851f 	.word	0x51eb851f

08003534 <siprintf>:
 8003534:	b40e      	push	{r1, r2, r3}
 8003536:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800353a:	b500      	push	{lr}
 800353c:	b09c      	sub	sp, #112	; 0x70
 800353e:	ab1d      	add	r3, sp, #116	; 0x74
 8003540:	9002      	str	r0, [sp, #8]
 8003542:	9006      	str	r0, [sp, #24]
 8003544:	9107      	str	r1, [sp, #28]
 8003546:	9104      	str	r1, [sp, #16]
 8003548:	4808      	ldr	r0, [pc, #32]	; (800356c <siprintf+0x38>)
 800354a:	4909      	ldr	r1, [pc, #36]	; (8003570 <siprintf+0x3c>)
 800354c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003550:	9105      	str	r1, [sp, #20]
 8003552:	6800      	ldr	r0, [r0, #0]
 8003554:	a902      	add	r1, sp, #8
 8003556:	9301      	str	r3, [sp, #4]
 8003558:	f000 f99c 	bl	8003894 <_svfiprintf_r>
 800355c:	2200      	movs	r2, #0
 800355e:	9b02      	ldr	r3, [sp, #8]
 8003560:	701a      	strb	r2, [r3, #0]
 8003562:	b01c      	add	sp, #112	; 0x70
 8003564:	f85d eb04 	ldr.w	lr, [sp], #4
 8003568:	b003      	add	sp, #12
 800356a:	4770      	bx	lr
 800356c:	20000064 	.word	0x20000064
 8003570:	ffff0208 	.word	0xffff0208

08003574 <memset>:
 8003574:	4603      	mov	r3, r0
 8003576:	4402      	add	r2, r0
 8003578:	4293      	cmp	r3, r2
 800357a:	d100      	bne.n	800357e <memset+0xa>
 800357c:	4770      	bx	lr
 800357e:	f803 1b01 	strb.w	r1, [r3], #1
 8003582:	e7f9      	b.n	8003578 <memset+0x4>

08003584 <__errno>:
 8003584:	4b01      	ldr	r3, [pc, #4]	; (800358c <__errno+0x8>)
 8003586:	6818      	ldr	r0, [r3, #0]
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	20000064 	.word	0x20000064

08003590 <__libc_init_array>:
 8003590:	b570      	push	{r4, r5, r6, lr}
 8003592:	2600      	movs	r6, #0
 8003594:	4d0c      	ldr	r5, [pc, #48]	; (80035c8 <__libc_init_array+0x38>)
 8003596:	4c0d      	ldr	r4, [pc, #52]	; (80035cc <__libc_init_array+0x3c>)
 8003598:	1b64      	subs	r4, r4, r5
 800359a:	10a4      	asrs	r4, r4, #2
 800359c:	42a6      	cmp	r6, r4
 800359e:	d109      	bne.n	80035b4 <__libc_init_array+0x24>
 80035a0:	f000 fc7a 	bl	8003e98 <_init>
 80035a4:	2600      	movs	r6, #0
 80035a6:	4d0a      	ldr	r5, [pc, #40]	; (80035d0 <__libc_init_array+0x40>)
 80035a8:	4c0a      	ldr	r4, [pc, #40]	; (80035d4 <__libc_init_array+0x44>)
 80035aa:	1b64      	subs	r4, r4, r5
 80035ac:	10a4      	asrs	r4, r4, #2
 80035ae:	42a6      	cmp	r6, r4
 80035b0:	d105      	bne.n	80035be <__libc_init_array+0x2e>
 80035b2:	bd70      	pop	{r4, r5, r6, pc}
 80035b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80035b8:	4798      	blx	r3
 80035ba:	3601      	adds	r6, #1
 80035bc:	e7ee      	b.n	800359c <__libc_init_array+0xc>
 80035be:	f855 3b04 	ldr.w	r3, [r5], #4
 80035c2:	4798      	blx	r3
 80035c4:	3601      	adds	r6, #1
 80035c6:	e7f2      	b.n	80035ae <__libc_init_array+0x1e>
 80035c8:	08004c90 	.word	0x08004c90
 80035cc:	08004c90 	.word	0x08004c90
 80035d0:	08004c90 	.word	0x08004c90
 80035d4:	08004c94 	.word	0x08004c94

080035d8 <__retarget_lock_acquire_recursive>:
 80035d8:	4770      	bx	lr

080035da <__retarget_lock_release_recursive>:
 80035da:	4770      	bx	lr

080035dc <memcpy>:
 80035dc:	440a      	add	r2, r1
 80035de:	4291      	cmp	r1, r2
 80035e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80035e4:	d100      	bne.n	80035e8 <memcpy+0xc>
 80035e6:	4770      	bx	lr
 80035e8:	b510      	push	{r4, lr}
 80035ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035ee:	4291      	cmp	r1, r2
 80035f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035f4:	d1f9      	bne.n	80035ea <memcpy+0xe>
 80035f6:	bd10      	pop	{r4, pc}

080035f8 <_free_r>:
 80035f8:	b538      	push	{r3, r4, r5, lr}
 80035fa:	4605      	mov	r5, r0
 80035fc:	2900      	cmp	r1, #0
 80035fe:	d040      	beq.n	8003682 <_free_r+0x8a>
 8003600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003604:	1f0c      	subs	r4, r1, #4
 8003606:	2b00      	cmp	r3, #0
 8003608:	bfb8      	it	lt
 800360a:	18e4      	addlt	r4, r4, r3
 800360c:	f000 f8dc 	bl	80037c8 <__malloc_lock>
 8003610:	4a1c      	ldr	r2, [pc, #112]	; (8003684 <_free_r+0x8c>)
 8003612:	6813      	ldr	r3, [r2, #0]
 8003614:	b933      	cbnz	r3, 8003624 <_free_r+0x2c>
 8003616:	6063      	str	r3, [r4, #4]
 8003618:	6014      	str	r4, [r2, #0]
 800361a:	4628      	mov	r0, r5
 800361c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003620:	f000 b8d8 	b.w	80037d4 <__malloc_unlock>
 8003624:	42a3      	cmp	r3, r4
 8003626:	d908      	bls.n	800363a <_free_r+0x42>
 8003628:	6820      	ldr	r0, [r4, #0]
 800362a:	1821      	adds	r1, r4, r0
 800362c:	428b      	cmp	r3, r1
 800362e:	bf01      	itttt	eq
 8003630:	6819      	ldreq	r1, [r3, #0]
 8003632:	685b      	ldreq	r3, [r3, #4]
 8003634:	1809      	addeq	r1, r1, r0
 8003636:	6021      	streq	r1, [r4, #0]
 8003638:	e7ed      	b.n	8003616 <_free_r+0x1e>
 800363a:	461a      	mov	r2, r3
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	b10b      	cbz	r3, 8003644 <_free_r+0x4c>
 8003640:	42a3      	cmp	r3, r4
 8003642:	d9fa      	bls.n	800363a <_free_r+0x42>
 8003644:	6811      	ldr	r1, [r2, #0]
 8003646:	1850      	adds	r0, r2, r1
 8003648:	42a0      	cmp	r0, r4
 800364a:	d10b      	bne.n	8003664 <_free_r+0x6c>
 800364c:	6820      	ldr	r0, [r4, #0]
 800364e:	4401      	add	r1, r0
 8003650:	1850      	adds	r0, r2, r1
 8003652:	4283      	cmp	r3, r0
 8003654:	6011      	str	r1, [r2, #0]
 8003656:	d1e0      	bne.n	800361a <_free_r+0x22>
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	4408      	add	r0, r1
 800365e:	6010      	str	r0, [r2, #0]
 8003660:	6053      	str	r3, [r2, #4]
 8003662:	e7da      	b.n	800361a <_free_r+0x22>
 8003664:	d902      	bls.n	800366c <_free_r+0x74>
 8003666:	230c      	movs	r3, #12
 8003668:	602b      	str	r3, [r5, #0]
 800366a:	e7d6      	b.n	800361a <_free_r+0x22>
 800366c:	6820      	ldr	r0, [r4, #0]
 800366e:	1821      	adds	r1, r4, r0
 8003670:	428b      	cmp	r3, r1
 8003672:	bf01      	itttt	eq
 8003674:	6819      	ldreq	r1, [r3, #0]
 8003676:	685b      	ldreq	r3, [r3, #4]
 8003678:	1809      	addeq	r1, r1, r0
 800367a:	6021      	streq	r1, [r4, #0]
 800367c:	6063      	str	r3, [r4, #4]
 800367e:	6054      	str	r4, [r2, #4]
 8003680:	e7cb      	b.n	800361a <_free_r+0x22>
 8003682:	bd38      	pop	{r3, r4, r5, pc}
 8003684:	200006b0 	.word	0x200006b0

08003688 <sbrk_aligned>:
 8003688:	b570      	push	{r4, r5, r6, lr}
 800368a:	4e0e      	ldr	r6, [pc, #56]	; (80036c4 <sbrk_aligned+0x3c>)
 800368c:	460c      	mov	r4, r1
 800368e:	6831      	ldr	r1, [r6, #0]
 8003690:	4605      	mov	r5, r0
 8003692:	b911      	cbnz	r1, 800369a <sbrk_aligned+0x12>
 8003694:	f000 fbaa 	bl	8003dec <_sbrk_r>
 8003698:	6030      	str	r0, [r6, #0]
 800369a:	4621      	mov	r1, r4
 800369c:	4628      	mov	r0, r5
 800369e:	f000 fba5 	bl	8003dec <_sbrk_r>
 80036a2:	1c43      	adds	r3, r0, #1
 80036a4:	d00a      	beq.n	80036bc <sbrk_aligned+0x34>
 80036a6:	1cc4      	adds	r4, r0, #3
 80036a8:	f024 0403 	bic.w	r4, r4, #3
 80036ac:	42a0      	cmp	r0, r4
 80036ae:	d007      	beq.n	80036c0 <sbrk_aligned+0x38>
 80036b0:	1a21      	subs	r1, r4, r0
 80036b2:	4628      	mov	r0, r5
 80036b4:	f000 fb9a 	bl	8003dec <_sbrk_r>
 80036b8:	3001      	adds	r0, #1
 80036ba:	d101      	bne.n	80036c0 <sbrk_aligned+0x38>
 80036bc:	f04f 34ff 	mov.w	r4, #4294967295
 80036c0:	4620      	mov	r0, r4
 80036c2:	bd70      	pop	{r4, r5, r6, pc}
 80036c4:	200006b4 	.word	0x200006b4

080036c8 <_malloc_r>:
 80036c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036cc:	1ccd      	adds	r5, r1, #3
 80036ce:	f025 0503 	bic.w	r5, r5, #3
 80036d2:	3508      	adds	r5, #8
 80036d4:	2d0c      	cmp	r5, #12
 80036d6:	bf38      	it	cc
 80036d8:	250c      	movcc	r5, #12
 80036da:	2d00      	cmp	r5, #0
 80036dc:	4607      	mov	r7, r0
 80036de:	db01      	blt.n	80036e4 <_malloc_r+0x1c>
 80036e0:	42a9      	cmp	r1, r5
 80036e2:	d905      	bls.n	80036f0 <_malloc_r+0x28>
 80036e4:	230c      	movs	r3, #12
 80036e6:	2600      	movs	r6, #0
 80036e8:	603b      	str	r3, [r7, #0]
 80036ea:	4630      	mov	r0, r6
 80036ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80037c4 <_malloc_r+0xfc>
 80036f4:	f000 f868 	bl	80037c8 <__malloc_lock>
 80036f8:	f8d8 3000 	ldr.w	r3, [r8]
 80036fc:	461c      	mov	r4, r3
 80036fe:	bb5c      	cbnz	r4, 8003758 <_malloc_r+0x90>
 8003700:	4629      	mov	r1, r5
 8003702:	4638      	mov	r0, r7
 8003704:	f7ff ffc0 	bl	8003688 <sbrk_aligned>
 8003708:	1c43      	adds	r3, r0, #1
 800370a:	4604      	mov	r4, r0
 800370c:	d155      	bne.n	80037ba <_malloc_r+0xf2>
 800370e:	f8d8 4000 	ldr.w	r4, [r8]
 8003712:	4626      	mov	r6, r4
 8003714:	2e00      	cmp	r6, #0
 8003716:	d145      	bne.n	80037a4 <_malloc_r+0xdc>
 8003718:	2c00      	cmp	r4, #0
 800371a:	d048      	beq.n	80037ae <_malloc_r+0xe6>
 800371c:	6823      	ldr	r3, [r4, #0]
 800371e:	4631      	mov	r1, r6
 8003720:	4638      	mov	r0, r7
 8003722:	eb04 0903 	add.w	r9, r4, r3
 8003726:	f000 fb61 	bl	8003dec <_sbrk_r>
 800372a:	4581      	cmp	r9, r0
 800372c:	d13f      	bne.n	80037ae <_malloc_r+0xe6>
 800372e:	6821      	ldr	r1, [r4, #0]
 8003730:	4638      	mov	r0, r7
 8003732:	1a6d      	subs	r5, r5, r1
 8003734:	4629      	mov	r1, r5
 8003736:	f7ff ffa7 	bl	8003688 <sbrk_aligned>
 800373a:	3001      	adds	r0, #1
 800373c:	d037      	beq.n	80037ae <_malloc_r+0xe6>
 800373e:	6823      	ldr	r3, [r4, #0]
 8003740:	442b      	add	r3, r5
 8003742:	6023      	str	r3, [r4, #0]
 8003744:	f8d8 3000 	ldr.w	r3, [r8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d038      	beq.n	80037be <_malloc_r+0xf6>
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	42a2      	cmp	r2, r4
 8003750:	d12b      	bne.n	80037aa <_malloc_r+0xe2>
 8003752:	2200      	movs	r2, #0
 8003754:	605a      	str	r2, [r3, #4]
 8003756:	e00f      	b.n	8003778 <_malloc_r+0xb0>
 8003758:	6822      	ldr	r2, [r4, #0]
 800375a:	1b52      	subs	r2, r2, r5
 800375c:	d41f      	bmi.n	800379e <_malloc_r+0xd6>
 800375e:	2a0b      	cmp	r2, #11
 8003760:	d917      	bls.n	8003792 <_malloc_r+0xca>
 8003762:	1961      	adds	r1, r4, r5
 8003764:	42a3      	cmp	r3, r4
 8003766:	6025      	str	r5, [r4, #0]
 8003768:	bf18      	it	ne
 800376a:	6059      	strne	r1, [r3, #4]
 800376c:	6863      	ldr	r3, [r4, #4]
 800376e:	bf08      	it	eq
 8003770:	f8c8 1000 	streq.w	r1, [r8]
 8003774:	5162      	str	r2, [r4, r5]
 8003776:	604b      	str	r3, [r1, #4]
 8003778:	4638      	mov	r0, r7
 800377a:	f104 060b 	add.w	r6, r4, #11
 800377e:	f000 f829 	bl	80037d4 <__malloc_unlock>
 8003782:	f026 0607 	bic.w	r6, r6, #7
 8003786:	1d23      	adds	r3, r4, #4
 8003788:	1af2      	subs	r2, r6, r3
 800378a:	d0ae      	beq.n	80036ea <_malloc_r+0x22>
 800378c:	1b9b      	subs	r3, r3, r6
 800378e:	50a3      	str	r3, [r4, r2]
 8003790:	e7ab      	b.n	80036ea <_malloc_r+0x22>
 8003792:	42a3      	cmp	r3, r4
 8003794:	6862      	ldr	r2, [r4, #4]
 8003796:	d1dd      	bne.n	8003754 <_malloc_r+0x8c>
 8003798:	f8c8 2000 	str.w	r2, [r8]
 800379c:	e7ec      	b.n	8003778 <_malloc_r+0xb0>
 800379e:	4623      	mov	r3, r4
 80037a0:	6864      	ldr	r4, [r4, #4]
 80037a2:	e7ac      	b.n	80036fe <_malloc_r+0x36>
 80037a4:	4634      	mov	r4, r6
 80037a6:	6876      	ldr	r6, [r6, #4]
 80037a8:	e7b4      	b.n	8003714 <_malloc_r+0x4c>
 80037aa:	4613      	mov	r3, r2
 80037ac:	e7cc      	b.n	8003748 <_malloc_r+0x80>
 80037ae:	230c      	movs	r3, #12
 80037b0:	4638      	mov	r0, r7
 80037b2:	603b      	str	r3, [r7, #0]
 80037b4:	f000 f80e 	bl	80037d4 <__malloc_unlock>
 80037b8:	e797      	b.n	80036ea <_malloc_r+0x22>
 80037ba:	6025      	str	r5, [r4, #0]
 80037bc:	e7dc      	b.n	8003778 <_malloc_r+0xb0>
 80037be:	605b      	str	r3, [r3, #4]
 80037c0:	deff      	udf	#255	; 0xff
 80037c2:	bf00      	nop
 80037c4:	200006b0 	.word	0x200006b0

080037c8 <__malloc_lock>:
 80037c8:	4801      	ldr	r0, [pc, #4]	; (80037d0 <__malloc_lock+0x8>)
 80037ca:	f7ff bf05 	b.w	80035d8 <__retarget_lock_acquire_recursive>
 80037ce:	bf00      	nop
 80037d0:	200006ac 	.word	0x200006ac

080037d4 <__malloc_unlock>:
 80037d4:	4801      	ldr	r0, [pc, #4]	; (80037dc <__malloc_unlock+0x8>)
 80037d6:	f7ff bf00 	b.w	80035da <__retarget_lock_release_recursive>
 80037da:	bf00      	nop
 80037dc:	200006ac 	.word	0x200006ac

080037e0 <__ssputs_r>:
 80037e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037e4:	461f      	mov	r7, r3
 80037e6:	688e      	ldr	r6, [r1, #8]
 80037e8:	4682      	mov	sl, r0
 80037ea:	42be      	cmp	r6, r7
 80037ec:	460c      	mov	r4, r1
 80037ee:	4690      	mov	r8, r2
 80037f0:	680b      	ldr	r3, [r1, #0]
 80037f2:	d82c      	bhi.n	800384e <__ssputs_r+0x6e>
 80037f4:	898a      	ldrh	r2, [r1, #12]
 80037f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80037fa:	d026      	beq.n	800384a <__ssputs_r+0x6a>
 80037fc:	6965      	ldr	r5, [r4, #20]
 80037fe:	6909      	ldr	r1, [r1, #16]
 8003800:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003804:	eba3 0901 	sub.w	r9, r3, r1
 8003808:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800380c:	1c7b      	adds	r3, r7, #1
 800380e:	444b      	add	r3, r9
 8003810:	106d      	asrs	r5, r5, #1
 8003812:	429d      	cmp	r5, r3
 8003814:	bf38      	it	cc
 8003816:	461d      	movcc	r5, r3
 8003818:	0553      	lsls	r3, r2, #21
 800381a:	d527      	bpl.n	800386c <__ssputs_r+0x8c>
 800381c:	4629      	mov	r1, r5
 800381e:	f7ff ff53 	bl	80036c8 <_malloc_r>
 8003822:	4606      	mov	r6, r0
 8003824:	b360      	cbz	r0, 8003880 <__ssputs_r+0xa0>
 8003826:	464a      	mov	r2, r9
 8003828:	6921      	ldr	r1, [r4, #16]
 800382a:	f7ff fed7 	bl	80035dc <memcpy>
 800382e:	89a3      	ldrh	r3, [r4, #12]
 8003830:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003838:	81a3      	strh	r3, [r4, #12]
 800383a:	6126      	str	r6, [r4, #16]
 800383c:	444e      	add	r6, r9
 800383e:	6026      	str	r6, [r4, #0]
 8003840:	463e      	mov	r6, r7
 8003842:	6165      	str	r5, [r4, #20]
 8003844:	eba5 0509 	sub.w	r5, r5, r9
 8003848:	60a5      	str	r5, [r4, #8]
 800384a:	42be      	cmp	r6, r7
 800384c:	d900      	bls.n	8003850 <__ssputs_r+0x70>
 800384e:	463e      	mov	r6, r7
 8003850:	4632      	mov	r2, r6
 8003852:	4641      	mov	r1, r8
 8003854:	6820      	ldr	r0, [r4, #0]
 8003856:	f000 faaf 	bl	8003db8 <memmove>
 800385a:	2000      	movs	r0, #0
 800385c:	68a3      	ldr	r3, [r4, #8]
 800385e:	1b9b      	subs	r3, r3, r6
 8003860:	60a3      	str	r3, [r4, #8]
 8003862:	6823      	ldr	r3, [r4, #0]
 8003864:	4433      	add	r3, r6
 8003866:	6023      	str	r3, [r4, #0]
 8003868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800386c:	462a      	mov	r2, r5
 800386e:	f000 fadb 	bl	8003e28 <_realloc_r>
 8003872:	4606      	mov	r6, r0
 8003874:	2800      	cmp	r0, #0
 8003876:	d1e0      	bne.n	800383a <__ssputs_r+0x5a>
 8003878:	4650      	mov	r0, sl
 800387a:	6921      	ldr	r1, [r4, #16]
 800387c:	f7ff febc 	bl	80035f8 <_free_r>
 8003880:	230c      	movs	r3, #12
 8003882:	f8ca 3000 	str.w	r3, [sl]
 8003886:	89a3      	ldrh	r3, [r4, #12]
 8003888:	f04f 30ff 	mov.w	r0, #4294967295
 800388c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003890:	81a3      	strh	r3, [r4, #12]
 8003892:	e7e9      	b.n	8003868 <__ssputs_r+0x88>

08003894 <_svfiprintf_r>:
 8003894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003898:	4698      	mov	r8, r3
 800389a:	898b      	ldrh	r3, [r1, #12]
 800389c:	4607      	mov	r7, r0
 800389e:	061b      	lsls	r3, r3, #24
 80038a0:	460d      	mov	r5, r1
 80038a2:	4614      	mov	r4, r2
 80038a4:	b09d      	sub	sp, #116	; 0x74
 80038a6:	d50e      	bpl.n	80038c6 <_svfiprintf_r+0x32>
 80038a8:	690b      	ldr	r3, [r1, #16]
 80038aa:	b963      	cbnz	r3, 80038c6 <_svfiprintf_r+0x32>
 80038ac:	2140      	movs	r1, #64	; 0x40
 80038ae:	f7ff ff0b 	bl	80036c8 <_malloc_r>
 80038b2:	6028      	str	r0, [r5, #0]
 80038b4:	6128      	str	r0, [r5, #16]
 80038b6:	b920      	cbnz	r0, 80038c2 <_svfiprintf_r+0x2e>
 80038b8:	230c      	movs	r3, #12
 80038ba:	603b      	str	r3, [r7, #0]
 80038bc:	f04f 30ff 	mov.w	r0, #4294967295
 80038c0:	e0d0      	b.n	8003a64 <_svfiprintf_r+0x1d0>
 80038c2:	2340      	movs	r3, #64	; 0x40
 80038c4:	616b      	str	r3, [r5, #20]
 80038c6:	2300      	movs	r3, #0
 80038c8:	9309      	str	r3, [sp, #36]	; 0x24
 80038ca:	2320      	movs	r3, #32
 80038cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038d0:	2330      	movs	r3, #48	; 0x30
 80038d2:	f04f 0901 	mov.w	r9, #1
 80038d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80038da:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003a7c <_svfiprintf_r+0x1e8>
 80038de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038e2:	4623      	mov	r3, r4
 80038e4:	469a      	mov	sl, r3
 80038e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038ea:	b10a      	cbz	r2, 80038f0 <_svfiprintf_r+0x5c>
 80038ec:	2a25      	cmp	r2, #37	; 0x25
 80038ee:	d1f9      	bne.n	80038e4 <_svfiprintf_r+0x50>
 80038f0:	ebba 0b04 	subs.w	fp, sl, r4
 80038f4:	d00b      	beq.n	800390e <_svfiprintf_r+0x7a>
 80038f6:	465b      	mov	r3, fp
 80038f8:	4622      	mov	r2, r4
 80038fa:	4629      	mov	r1, r5
 80038fc:	4638      	mov	r0, r7
 80038fe:	f7ff ff6f 	bl	80037e0 <__ssputs_r>
 8003902:	3001      	adds	r0, #1
 8003904:	f000 80a9 	beq.w	8003a5a <_svfiprintf_r+0x1c6>
 8003908:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800390a:	445a      	add	r2, fp
 800390c:	9209      	str	r2, [sp, #36]	; 0x24
 800390e:	f89a 3000 	ldrb.w	r3, [sl]
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 80a1 	beq.w	8003a5a <_svfiprintf_r+0x1c6>
 8003918:	2300      	movs	r3, #0
 800391a:	f04f 32ff 	mov.w	r2, #4294967295
 800391e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003922:	f10a 0a01 	add.w	sl, sl, #1
 8003926:	9304      	str	r3, [sp, #16]
 8003928:	9307      	str	r3, [sp, #28]
 800392a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800392e:	931a      	str	r3, [sp, #104]	; 0x68
 8003930:	4654      	mov	r4, sl
 8003932:	2205      	movs	r2, #5
 8003934:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003938:	4850      	ldr	r0, [pc, #320]	; (8003a7c <_svfiprintf_r+0x1e8>)
 800393a:	f000 fa67 	bl	8003e0c <memchr>
 800393e:	9a04      	ldr	r2, [sp, #16]
 8003940:	b9d8      	cbnz	r0, 800397a <_svfiprintf_r+0xe6>
 8003942:	06d0      	lsls	r0, r2, #27
 8003944:	bf44      	itt	mi
 8003946:	2320      	movmi	r3, #32
 8003948:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800394c:	0711      	lsls	r1, r2, #28
 800394e:	bf44      	itt	mi
 8003950:	232b      	movmi	r3, #43	; 0x2b
 8003952:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003956:	f89a 3000 	ldrb.w	r3, [sl]
 800395a:	2b2a      	cmp	r3, #42	; 0x2a
 800395c:	d015      	beq.n	800398a <_svfiprintf_r+0xf6>
 800395e:	4654      	mov	r4, sl
 8003960:	2000      	movs	r0, #0
 8003962:	f04f 0c0a 	mov.w	ip, #10
 8003966:	9a07      	ldr	r2, [sp, #28]
 8003968:	4621      	mov	r1, r4
 800396a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800396e:	3b30      	subs	r3, #48	; 0x30
 8003970:	2b09      	cmp	r3, #9
 8003972:	d94d      	bls.n	8003a10 <_svfiprintf_r+0x17c>
 8003974:	b1b0      	cbz	r0, 80039a4 <_svfiprintf_r+0x110>
 8003976:	9207      	str	r2, [sp, #28]
 8003978:	e014      	b.n	80039a4 <_svfiprintf_r+0x110>
 800397a:	eba0 0308 	sub.w	r3, r0, r8
 800397e:	fa09 f303 	lsl.w	r3, r9, r3
 8003982:	4313      	orrs	r3, r2
 8003984:	46a2      	mov	sl, r4
 8003986:	9304      	str	r3, [sp, #16]
 8003988:	e7d2      	b.n	8003930 <_svfiprintf_r+0x9c>
 800398a:	9b03      	ldr	r3, [sp, #12]
 800398c:	1d19      	adds	r1, r3, #4
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	9103      	str	r1, [sp, #12]
 8003992:	2b00      	cmp	r3, #0
 8003994:	bfbb      	ittet	lt
 8003996:	425b      	neglt	r3, r3
 8003998:	f042 0202 	orrlt.w	r2, r2, #2
 800399c:	9307      	strge	r3, [sp, #28]
 800399e:	9307      	strlt	r3, [sp, #28]
 80039a0:	bfb8      	it	lt
 80039a2:	9204      	strlt	r2, [sp, #16]
 80039a4:	7823      	ldrb	r3, [r4, #0]
 80039a6:	2b2e      	cmp	r3, #46	; 0x2e
 80039a8:	d10c      	bne.n	80039c4 <_svfiprintf_r+0x130>
 80039aa:	7863      	ldrb	r3, [r4, #1]
 80039ac:	2b2a      	cmp	r3, #42	; 0x2a
 80039ae:	d134      	bne.n	8003a1a <_svfiprintf_r+0x186>
 80039b0:	9b03      	ldr	r3, [sp, #12]
 80039b2:	3402      	adds	r4, #2
 80039b4:	1d1a      	adds	r2, r3, #4
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	9203      	str	r2, [sp, #12]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	bfb8      	it	lt
 80039be:	f04f 33ff 	movlt.w	r3, #4294967295
 80039c2:	9305      	str	r3, [sp, #20]
 80039c4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003a80 <_svfiprintf_r+0x1ec>
 80039c8:	2203      	movs	r2, #3
 80039ca:	4650      	mov	r0, sl
 80039cc:	7821      	ldrb	r1, [r4, #0]
 80039ce:	f000 fa1d 	bl	8003e0c <memchr>
 80039d2:	b138      	cbz	r0, 80039e4 <_svfiprintf_r+0x150>
 80039d4:	2240      	movs	r2, #64	; 0x40
 80039d6:	9b04      	ldr	r3, [sp, #16]
 80039d8:	eba0 000a 	sub.w	r0, r0, sl
 80039dc:	4082      	lsls	r2, r0
 80039de:	4313      	orrs	r3, r2
 80039e0:	3401      	adds	r4, #1
 80039e2:	9304      	str	r3, [sp, #16]
 80039e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039e8:	2206      	movs	r2, #6
 80039ea:	4826      	ldr	r0, [pc, #152]	; (8003a84 <_svfiprintf_r+0x1f0>)
 80039ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039f0:	f000 fa0c 	bl	8003e0c <memchr>
 80039f4:	2800      	cmp	r0, #0
 80039f6:	d038      	beq.n	8003a6a <_svfiprintf_r+0x1d6>
 80039f8:	4b23      	ldr	r3, [pc, #140]	; (8003a88 <_svfiprintf_r+0x1f4>)
 80039fa:	bb1b      	cbnz	r3, 8003a44 <_svfiprintf_r+0x1b0>
 80039fc:	9b03      	ldr	r3, [sp, #12]
 80039fe:	3307      	adds	r3, #7
 8003a00:	f023 0307 	bic.w	r3, r3, #7
 8003a04:	3308      	adds	r3, #8
 8003a06:	9303      	str	r3, [sp, #12]
 8003a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a0a:	4433      	add	r3, r6
 8003a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a0e:	e768      	b.n	80038e2 <_svfiprintf_r+0x4e>
 8003a10:	460c      	mov	r4, r1
 8003a12:	2001      	movs	r0, #1
 8003a14:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a18:	e7a6      	b.n	8003968 <_svfiprintf_r+0xd4>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f04f 0c0a 	mov.w	ip, #10
 8003a20:	4619      	mov	r1, r3
 8003a22:	3401      	adds	r4, #1
 8003a24:	9305      	str	r3, [sp, #20]
 8003a26:	4620      	mov	r0, r4
 8003a28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a2c:	3a30      	subs	r2, #48	; 0x30
 8003a2e:	2a09      	cmp	r2, #9
 8003a30:	d903      	bls.n	8003a3a <_svfiprintf_r+0x1a6>
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0c6      	beq.n	80039c4 <_svfiprintf_r+0x130>
 8003a36:	9105      	str	r1, [sp, #20]
 8003a38:	e7c4      	b.n	80039c4 <_svfiprintf_r+0x130>
 8003a3a:	4604      	mov	r4, r0
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a42:	e7f0      	b.n	8003a26 <_svfiprintf_r+0x192>
 8003a44:	ab03      	add	r3, sp, #12
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	462a      	mov	r2, r5
 8003a4a:	4638      	mov	r0, r7
 8003a4c:	4b0f      	ldr	r3, [pc, #60]	; (8003a8c <_svfiprintf_r+0x1f8>)
 8003a4e:	a904      	add	r1, sp, #16
 8003a50:	f3af 8000 	nop.w
 8003a54:	1c42      	adds	r2, r0, #1
 8003a56:	4606      	mov	r6, r0
 8003a58:	d1d6      	bne.n	8003a08 <_svfiprintf_r+0x174>
 8003a5a:	89ab      	ldrh	r3, [r5, #12]
 8003a5c:	065b      	lsls	r3, r3, #25
 8003a5e:	f53f af2d 	bmi.w	80038bc <_svfiprintf_r+0x28>
 8003a62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a64:	b01d      	add	sp, #116	; 0x74
 8003a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a6a:	ab03      	add	r3, sp, #12
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	462a      	mov	r2, r5
 8003a70:	4638      	mov	r0, r7
 8003a72:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <_svfiprintf_r+0x1f8>)
 8003a74:	a904      	add	r1, sp, #16
 8003a76:	f000 f87d 	bl	8003b74 <_printf_i>
 8003a7a:	e7eb      	b.n	8003a54 <_svfiprintf_r+0x1c0>
 8003a7c:	08004c5a 	.word	0x08004c5a
 8003a80:	08004c60 	.word	0x08004c60
 8003a84:	08004c64 	.word	0x08004c64
 8003a88:	00000000 	.word	0x00000000
 8003a8c:	080037e1 	.word	0x080037e1

08003a90 <_printf_common>:
 8003a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a94:	4616      	mov	r6, r2
 8003a96:	4699      	mov	r9, r3
 8003a98:	688a      	ldr	r2, [r1, #8]
 8003a9a:	690b      	ldr	r3, [r1, #16]
 8003a9c:	4607      	mov	r7, r0
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	bfb8      	it	lt
 8003aa2:	4613      	movlt	r3, r2
 8003aa4:	6033      	str	r3, [r6, #0]
 8003aa6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003aaa:	460c      	mov	r4, r1
 8003aac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ab0:	b10a      	cbz	r2, 8003ab6 <_printf_common+0x26>
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	6033      	str	r3, [r6, #0]
 8003ab6:	6823      	ldr	r3, [r4, #0]
 8003ab8:	0699      	lsls	r1, r3, #26
 8003aba:	bf42      	ittt	mi
 8003abc:	6833      	ldrmi	r3, [r6, #0]
 8003abe:	3302      	addmi	r3, #2
 8003ac0:	6033      	strmi	r3, [r6, #0]
 8003ac2:	6825      	ldr	r5, [r4, #0]
 8003ac4:	f015 0506 	ands.w	r5, r5, #6
 8003ac8:	d106      	bne.n	8003ad8 <_printf_common+0x48>
 8003aca:	f104 0a19 	add.w	sl, r4, #25
 8003ace:	68e3      	ldr	r3, [r4, #12]
 8003ad0:	6832      	ldr	r2, [r6, #0]
 8003ad2:	1a9b      	subs	r3, r3, r2
 8003ad4:	42ab      	cmp	r3, r5
 8003ad6:	dc2b      	bgt.n	8003b30 <_printf_common+0xa0>
 8003ad8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003adc:	1e13      	subs	r3, r2, #0
 8003ade:	6822      	ldr	r2, [r4, #0]
 8003ae0:	bf18      	it	ne
 8003ae2:	2301      	movne	r3, #1
 8003ae4:	0692      	lsls	r2, r2, #26
 8003ae6:	d430      	bmi.n	8003b4a <_printf_common+0xba>
 8003ae8:	4649      	mov	r1, r9
 8003aea:	4638      	mov	r0, r7
 8003aec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003af0:	47c0      	blx	r8
 8003af2:	3001      	adds	r0, #1
 8003af4:	d023      	beq.n	8003b3e <_printf_common+0xae>
 8003af6:	6823      	ldr	r3, [r4, #0]
 8003af8:	6922      	ldr	r2, [r4, #16]
 8003afa:	f003 0306 	and.w	r3, r3, #6
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	bf14      	ite	ne
 8003b02:	2500      	movne	r5, #0
 8003b04:	6833      	ldreq	r3, [r6, #0]
 8003b06:	f04f 0600 	mov.w	r6, #0
 8003b0a:	bf08      	it	eq
 8003b0c:	68e5      	ldreq	r5, [r4, #12]
 8003b0e:	f104 041a 	add.w	r4, r4, #26
 8003b12:	bf08      	it	eq
 8003b14:	1aed      	subeq	r5, r5, r3
 8003b16:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003b1a:	bf08      	it	eq
 8003b1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b20:	4293      	cmp	r3, r2
 8003b22:	bfc4      	itt	gt
 8003b24:	1a9b      	subgt	r3, r3, r2
 8003b26:	18ed      	addgt	r5, r5, r3
 8003b28:	42b5      	cmp	r5, r6
 8003b2a:	d11a      	bne.n	8003b62 <_printf_common+0xd2>
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	e008      	b.n	8003b42 <_printf_common+0xb2>
 8003b30:	2301      	movs	r3, #1
 8003b32:	4652      	mov	r2, sl
 8003b34:	4649      	mov	r1, r9
 8003b36:	4638      	mov	r0, r7
 8003b38:	47c0      	blx	r8
 8003b3a:	3001      	adds	r0, #1
 8003b3c:	d103      	bne.n	8003b46 <_printf_common+0xb6>
 8003b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b46:	3501      	adds	r5, #1
 8003b48:	e7c1      	b.n	8003ace <_printf_common+0x3e>
 8003b4a:	2030      	movs	r0, #48	; 0x30
 8003b4c:	18e1      	adds	r1, r4, r3
 8003b4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b58:	4422      	add	r2, r4
 8003b5a:	3302      	adds	r3, #2
 8003b5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b60:	e7c2      	b.n	8003ae8 <_printf_common+0x58>
 8003b62:	2301      	movs	r3, #1
 8003b64:	4622      	mov	r2, r4
 8003b66:	4649      	mov	r1, r9
 8003b68:	4638      	mov	r0, r7
 8003b6a:	47c0      	blx	r8
 8003b6c:	3001      	adds	r0, #1
 8003b6e:	d0e6      	beq.n	8003b3e <_printf_common+0xae>
 8003b70:	3601      	adds	r6, #1
 8003b72:	e7d9      	b.n	8003b28 <_printf_common+0x98>

08003b74 <_printf_i>:
 8003b74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b78:	7e0f      	ldrb	r7, [r1, #24]
 8003b7a:	4691      	mov	r9, r2
 8003b7c:	2f78      	cmp	r7, #120	; 0x78
 8003b7e:	4680      	mov	r8, r0
 8003b80:	460c      	mov	r4, r1
 8003b82:	469a      	mov	sl, r3
 8003b84:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b8a:	d807      	bhi.n	8003b9c <_printf_i+0x28>
 8003b8c:	2f62      	cmp	r7, #98	; 0x62
 8003b8e:	d80a      	bhi.n	8003ba6 <_printf_i+0x32>
 8003b90:	2f00      	cmp	r7, #0
 8003b92:	f000 80d5 	beq.w	8003d40 <_printf_i+0x1cc>
 8003b96:	2f58      	cmp	r7, #88	; 0x58
 8003b98:	f000 80c1 	beq.w	8003d1e <_printf_i+0x1aa>
 8003b9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ba0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ba4:	e03a      	b.n	8003c1c <_printf_i+0xa8>
 8003ba6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003baa:	2b15      	cmp	r3, #21
 8003bac:	d8f6      	bhi.n	8003b9c <_printf_i+0x28>
 8003bae:	a101      	add	r1, pc, #4	; (adr r1, 8003bb4 <_printf_i+0x40>)
 8003bb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bb4:	08003c0d 	.word	0x08003c0d
 8003bb8:	08003c21 	.word	0x08003c21
 8003bbc:	08003b9d 	.word	0x08003b9d
 8003bc0:	08003b9d 	.word	0x08003b9d
 8003bc4:	08003b9d 	.word	0x08003b9d
 8003bc8:	08003b9d 	.word	0x08003b9d
 8003bcc:	08003c21 	.word	0x08003c21
 8003bd0:	08003b9d 	.word	0x08003b9d
 8003bd4:	08003b9d 	.word	0x08003b9d
 8003bd8:	08003b9d 	.word	0x08003b9d
 8003bdc:	08003b9d 	.word	0x08003b9d
 8003be0:	08003d27 	.word	0x08003d27
 8003be4:	08003c4d 	.word	0x08003c4d
 8003be8:	08003ce1 	.word	0x08003ce1
 8003bec:	08003b9d 	.word	0x08003b9d
 8003bf0:	08003b9d 	.word	0x08003b9d
 8003bf4:	08003d49 	.word	0x08003d49
 8003bf8:	08003b9d 	.word	0x08003b9d
 8003bfc:	08003c4d 	.word	0x08003c4d
 8003c00:	08003b9d 	.word	0x08003b9d
 8003c04:	08003b9d 	.word	0x08003b9d
 8003c08:	08003ce9 	.word	0x08003ce9
 8003c0c:	682b      	ldr	r3, [r5, #0]
 8003c0e:	1d1a      	adds	r2, r3, #4
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	602a      	str	r2, [r5, #0]
 8003c14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e0a0      	b.n	8003d62 <_printf_i+0x1ee>
 8003c20:	6820      	ldr	r0, [r4, #0]
 8003c22:	682b      	ldr	r3, [r5, #0]
 8003c24:	0607      	lsls	r7, r0, #24
 8003c26:	f103 0104 	add.w	r1, r3, #4
 8003c2a:	6029      	str	r1, [r5, #0]
 8003c2c:	d501      	bpl.n	8003c32 <_printf_i+0xbe>
 8003c2e:	681e      	ldr	r6, [r3, #0]
 8003c30:	e003      	b.n	8003c3a <_printf_i+0xc6>
 8003c32:	0646      	lsls	r6, r0, #25
 8003c34:	d5fb      	bpl.n	8003c2e <_printf_i+0xba>
 8003c36:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003c3a:	2e00      	cmp	r6, #0
 8003c3c:	da03      	bge.n	8003c46 <_printf_i+0xd2>
 8003c3e:	232d      	movs	r3, #45	; 0x2d
 8003c40:	4276      	negs	r6, r6
 8003c42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c46:	230a      	movs	r3, #10
 8003c48:	4859      	ldr	r0, [pc, #356]	; (8003db0 <_printf_i+0x23c>)
 8003c4a:	e012      	b.n	8003c72 <_printf_i+0xfe>
 8003c4c:	682b      	ldr	r3, [r5, #0]
 8003c4e:	6820      	ldr	r0, [r4, #0]
 8003c50:	1d19      	adds	r1, r3, #4
 8003c52:	6029      	str	r1, [r5, #0]
 8003c54:	0605      	lsls	r5, r0, #24
 8003c56:	d501      	bpl.n	8003c5c <_printf_i+0xe8>
 8003c58:	681e      	ldr	r6, [r3, #0]
 8003c5a:	e002      	b.n	8003c62 <_printf_i+0xee>
 8003c5c:	0641      	lsls	r1, r0, #25
 8003c5e:	d5fb      	bpl.n	8003c58 <_printf_i+0xe4>
 8003c60:	881e      	ldrh	r6, [r3, #0]
 8003c62:	2f6f      	cmp	r7, #111	; 0x6f
 8003c64:	bf0c      	ite	eq
 8003c66:	2308      	moveq	r3, #8
 8003c68:	230a      	movne	r3, #10
 8003c6a:	4851      	ldr	r0, [pc, #324]	; (8003db0 <_printf_i+0x23c>)
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c72:	6865      	ldr	r5, [r4, #4]
 8003c74:	2d00      	cmp	r5, #0
 8003c76:	bfa8      	it	ge
 8003c78:	6821      	ldrge	r1, [r4, #0]
 8003c7a:	60a5      	str	r5, [r4, #8]
 8003c7c:	bfa4      	itt	ge
 8003c7e:	f021 0104 	bicge.w	r1, r1, #4
 8003c82:	6021      	strge	r1, [r4, #0]
 8003c84:	b90e      	cbnz	r6, 8003c8a <_printf_i+0x116>
 8003c86:	2d00      	cmp	r5, #0
 8003c88:	d04b      	beq.n	8003d22 <_printf_i+0x1ae>
 8003c8a:	4615      	mov	r5, r2
 8003c8c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c90:	fb03 6711 	mls	r7, r3, r1, r6
 8003c94:	5dc7      	ldrb	r7, [r0, r7]
 8003c96:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003c9a:	4637      	mov	r7, r6
 8003c9c:	42bb      	cmp	r3, r7
 8003c9e:	460e      	mov	r6, r1
 8003ca0:	d9f4      	bls.n	8003c8c <_printf_i+0x118>
 8003ca2:	2b08      	cmp	r3, #8
 8003ca4:	d10b      	bne.n	8003cbe <_printf_i+0x14a>
 8003ca6:	6823      	ldr	r3, [r4, #0]
 8003ca8:	07de      	lsls	r6, r3, #31
 8003caa:	d508      	bpl.n	8003cbe <_printf_i+0x14a>
 8003cac:	6923      	ldr	r3, [r4, #16]
 8003cae:	6861      	ldr	r1, [r4, #4]
 8003cb0:	4299      	cmp	r1, r3
 8003cb2:	bfde      	ittt	le
 8003cb4:	2330      	movle	r3, #48	; 0x30
 8003cb6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003cba:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003cbe:	1b52      	subs	r2, r2, r5
 8003cc0:	6122      	str	r2, [r4, #16]
 8003cc2:	464b      	mov	r3, r9
 8003cc4:	4621      	mov	r1, r4
 8003cc6:	4640      	mov	r0, r8
 8003cc8:	f8cd a000 	str.w	sl, [sp]
 8003ccc:	aa03      	add	r2, sp, #12
 8003cce:	f7ff fedf 	bl	8003a90 <_printf_common>
 8003cd2:	3001      	adds	r0, #1
 8003cd4:	d14a      	bne.n	8003d6c <_printf_i+0x1f8>
 8003cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cda:	b004      	add	sp, #16
 8003cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ce0:	6823      	ldr	r3, [r4, #0]
 8003ce2:	f043 0320 	orr.w	r3, r3, #32
 8003ce6:	6023      	str	r3, [r4, #0]
 8003ce8:	2778      	movs	r7, #120	; 0x78
 8003cea:	4832      	ldr	r0, [pc, #200]	; (8003db4 <_printf_i+0x240>)
 8003cec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003cf0:	6823      	ldr	r3, [r4, #0]
 8003cf2:	6829      	ldr	r1, [r5, #0]
 8003cf4:	061f      	lsls	r7, r3, #24
 8003cf6:	f851 6b04 	ldr.w	r6, [r1], #4
 8003cfa:	d402      	bmi.n	8003d02 <_printf_i+0x18e>
 8003cfc:	065f      	lsls	r7, r3, #25
 8003cfe:	bf48      	it	mi
 8003d00:	b2b6      	uxthmi	r6, r6
 8003d02:	07df      	lsls	r7, r3, #31
 8003d04:	bf48      	it	mi
 8003d06:	f043 0320 	orrmi.w	r3, r3, #32
 8003d0a:	6029      	str	r1, [r5, #0]
 8003d0c:	bf48      	it	mi
 8003d0e:	6023      	strmi	r3, [r4, #0]
 8003d10:	b91e      	cbnz	r6, 8003d1a <_printf_i+0x1a6>
 8003d12:	6823      	ldr	r3, [r4, #0]
 8003d14:	f023 0320 	bic.w	r3, r3, #32
 8003d18:	6023      	str	r3, [r4, #0]
 8003d1a:	2310      	movs	r3, #16
 8003d1c:	e7a6      	b.n	8003c6c <_printf_i+0xf8>
 8003d1e:	4824      	ldr	r0, [pc, #144]	; (8003db0 <_printf_i+0x23c>)
 8003d20:	e7e4      	b.n	8003cec <_printf_i+0x178>
 8003d22:	4615      	mov	r5, r2
 8003d24:	e7bd      	b.n	8003ca2 <_printf_i+0x12e>
 8003d26:	682b      	ldr	r3, [r5, #0]
 8003d28:	6826      	ldr	r6, [r4, #0]
 8003d2a:	1d18      	adds	r0, r3, #4
 8003d2c:	6961      	ldr	r1, [r4, #20]
 8003d2e:	6028      	str	r0, [r5, #0]
 8003d30:	0635      	lsls	r5, r6, #24
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	d501      	bpl.n	8003d3a <_printf_i+0x1c6>
 8003d36:	6019      	str	r1, [r3, #0]
 8003d38:	e002      	b.n	8003d40 <_printf_i+0x1cc>
 8003d3a:	0670      	lsls	r0, r6, #25
 8003d3c:	d5fb      	bpl.n	8003d36 <_printf_i+0x1c2>
 8003d3e:	8019      	strh	r1, [r3, #0]
 8003d40:	2300      	movs	r3, #0
 8003d42:	4615      	mov	r5, r2
 8003d44:	6123      	str	r3, [r4, #16]
 8003d46:	e7bc      	b.n	8003cc2 <_printf_i+0x14e>
 8003d48:	682b      	ldr	r3, [r5, #0]
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	1d1a      	adds	r2, r3, #4
 8003d4e:	602a      	str	r2, [r5, #0]
 8003d50:	681d      	ldr	r5, [r3, #0]
 8003d52:	6862      	ldr	r2, [r4, #4]
 8003d54:	4628      	mov	r0, r5
 8003d56:	f000 f859 	bl	8003e0c <memchr>
 8003d5a:	b108      	cbz	r0, 8003d60 <_printf_i+0x1ec>
 8003d5c:	1b40      	subs	r0, r0, r5
 8003d5e:	6060      	str	r0, [r4, #4]
 8003d60:	6863      	ldr	r3, [r4, #4]
 8003d62:	6123      	str	r3, [r4, #16]
 8003d64:	2300      	movs	r3, #0
 8003d66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d6a:	e7aa      	b.n	8003cc2 <_printf_i+0x14e>
 8003d6c:	462a      	mov	r2, r5
 8003d6e:	4649      	mov	r1, r9
 8003d70:	4640      	mov	r0, r8
 8003d72:	6923      	ldr	r3, [r4, #16]
 8003d74:	47d0      	blx	sl
 8003d76:	3001      	adds	r0, #1
 8003d78:	d0ad      	beq.n	8003cd6 <_printf_i+0x162>
 8003d7a:	6823      	ldr	r3, [r4, #0]
 8003d7c:	079b      	lsls	r3, r3, #30
 8003d7e:	d413      	bmi.n	8003da8 <_printf_i+0x234>
 8003d80:	68e0      	ldr	r0, [r4, #12]
 8003d82:	9b03      	ldr	r3, [sp, #12]
 8003d84:	4298      	cmp	r0, r3
 8003d86:	bfb8      	it	lt
 8003d88:	4618      	movlt	r0, r3
 8003d8a:	e7a6      	b.n	8003cda <_printf_i+0x166>
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	4632      	mov	r2, r6
 8003d90:	4649      	mov	r1, r9
 8003d92:	4640      	mov	r0, r8
 8003d94:	47d0      	blx	sl
 8003d96:	3001      	adds	r0, #1
 8003d98:	d09d      	beq.n	8003cd6 <_printf_i+0x162>
 8003d9a:	3501      	adds	r5, #1
 8003d9c:	68e3      	ldr	r3, [r4, #12]
 8003d9e:	9903      	ldr	r1, [sp, #12]
 8003da0:	1a5b      	subs	r3, r3, r1
 8003da2:	42ab      	cmp	r3, r5
 8003da4:	dcf2      	bgt.n	8003d8c <_printf_i+0x218>
 8003da6:	e7eb      	b.n	8003d80 <_printf_i+0x20c>
 8003da8:	2500      	movs	r5, #0
 8003daa:	f104 0619 	add.w	r6, r4, #25
 8003dae:	e7f5      	b.n	8003d9c <_printf_i+0x228>
 8003db0:	08004c6b 	.word	0x08004c6b
 8003db4:	08004c7c 	.word	0x08004c7c

08003db8 <memmove>:
 8003db8:	4288      	cmp	r0, r1
 8003dba:	b510      	push	{r4, lr}
 8003dbc:	eb01 0402 	add.w	r4, r1, r2
 8003dc0:	d902      	bls.n	8003dc8 <memmove+0x10>
 8003dc2:	4284      	cmp	r4, r0
 8003dc4:	4623      	mov	r3, r4
 8003dc6:	d807      	bhi.n	8003dd8 <memmove+0x20>
 8003dc8:	1e43      	subs	r3, r0, #1
 8003dca:	42a1      	cmp	r1, r4
 8003dcc:	d008      	beq.n	8003de0 <memmove+0x28>
 8003dce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003dd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003dd6:	e7f8      	b.n	8003dca <memmove+0x12>
 8003dd8:	4601      	mov	r1, r0
 8003dda:	4402      	add	r2, r0
 8003ddc:	428a      	cmp	r2, r1
 8003dde:	d100      	bne.n	8003de2 <memmove+0x2a>
 8003de0:	bd10      	pop	{r4, pc}
 8003de2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003de6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003dea:	e7f7      	b.n	8003ddc <memmove+0x24>

08003dec <_sbrk_r>:
 8003dec:	b538      	push	{r3, r4, r5, lr}
 8003dee:	2300      	movs	r3, #0
 8003df0:	4d05      	ldr	r5, [pc, #20]	; (8003e08 <_sbrk_r+0x1c>)
 8003df2:	4604      	mov	r4, r0
 8003df4:	4608      	mov	r0, r1
 8003df6:	602b      	str	r3, [r5, #0]
 8003df8:	f7fc fca6 	bl	8000748 <_sbrk>
 8003dfc:	1c43      	adds	r3, r0, #1
 8003dfe:	d102      	bne.n	8003e06 <_sbrk_r+0x1a>
 8003e00:	682b      	ldr	r3, [r5, #0]
 8003e02:	b103      	cbz	r3, 8003e06 <_sbrk_r+0x1a>
 8003e04:	6023      	str	r3, [r4, #0]
 8003e06:	bd38      	pop	{r3, r4, r5, pc}
 8003e08:	200006a8 	.word	0x200006a8

08003e0c <memchr>:
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	b510      	push	{r4, lr}
 8003e10:	b2c9      	uxtb	r1, r1
 8003e12:	4402      	add	r2, r0
 8003e14:	4293      	cmp	r3, r2
 8003e16:	4618      	mov	r0, r3
 8003e18:	d101      	bne.n	8003e1e <memchr+0x12>
 8003e1a:	2000      	movs	r0, #0
 8003e1c:	e003      	b.n	8003e26 <memchr+0x1a>
 8003e1e:	7804      	ldrb	r4, [r0, #0]
 8003e20:	3301      	adds	r3, #1
 8003e22:	428c      	cmp	r4, r1
 8003e24:	d1f6      	bne.n	8003e14 <memchr+0x8>
 8003e26:	bd10      	pop	{r4, pc}

08003e28 <_realloc_r>:
 8003e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e2c:	4680      	mov	r8, r0
 8003e2e:	4614      	mov	r4, r2
 8003e30:	460e      	mov	r6, r1
 8003e32:	b921      	cbnz	r1, 8003e3e <_realloc_r+0x16>
 8003e34:	4611      	mov	r1, r2
 8003e36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e3a:	f7ff bc45 	b.w	80036c8 <_malloc_r>
 8003e3e:	b92a      	cbnz	r2, 8003e4c <_realloc_r+0x24>
 8003e40:	f7ff fbda 	bl	80035f8 <_free_r>
 8003e44:	4625      	mov	r5, r4
 8003e46:	4628      	mov	r0, r5
 8003e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e4c:	f000 f81b 	bl	8003e86 <_malloc_usable_size_r>
 8003e50:	4284      	cmp	r4, r0
 8003e52:	4607      	mov	r7, r0
 8003e54:	d802      	bhi.n	8003e5c <_realloc_r+0x34>
 8003e56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003e5a:	d812      	bhi.n	8003e82 <_realloc_r+0x5a>
 8003e5c:	4621      	mov	r1, r4
 8003e5e:	4640      	mov	r0, r8
 8003e60:	f7ff fc32 	bl	80036c8 <_malloc_r>
 8003e64:	4605      	mov	r5, r0
 8003e66:	2800      	cmp	r0, #0
 8003e68:	d0ed      	beq.n	8003e46 <_realloc_r+0x1e>
 8003e6a:	42bc      	cmp	r4, r7
 8003e6c:	4622      	mov	r2, r4
 8003e6e:	4631      	mov	r1, r6
 8003e70:	bf28      	it	cs
 8003e72:	463a      	movcs	r2, r7
 8003e74:	f7ff fbb2 	bl	80035dc <memcpy>
 8003e78:	4631      	mov	r1, r6
 8003e7a:	4640      	mov	r0, r8
 8003e7c:	f7ff fbbc 	bl	80035f8 <_free_r>
 8003e80:	e7e1      	b.n	8003e46 <_realloc_r+0x1e>
 8003e82:	4635      	mov	r5, r6
 8003e84:	e7df      	b.n	8003e46 <_realloc_r+0x1e>

08003e86 <_malloc_usable_size_r>:
 8003e86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e8a:	1f18      	subs	r0, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	bfbc      	itt	lt
 8003e90:	580b      	ldrlt	r3, [r1, r0]
 8003e92:	18c0      	addlt	r0, r0, r3
 8003e94:	4770      	bx	lr
	...

08003e98 <_init>:
 8003e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e9a:	bf00      	nop
 8003e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e9e:	bc08      	pop	{r3}
 8003ea0:	469e      	mov	lr, r3
 8003ea2:	4770      	bx	lr

08003ea4 <_fini>:
 8003ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea6:	bf00      	nop
 8003ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eaa:	bc08      	pop	{r3}
 8003eac:	469e      	mov	lr, r3
 8003eae:	4770      	bx	lr
